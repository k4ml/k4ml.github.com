<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>A Pelican Blog</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2012-09-30T04:54:36Z</updated><entry><title>API Documentation</title><link href="/api-documentation.html" rel="alternate"></link><updated>2012-09-30T04:54:36Z</updated><author><name>kamal</name></author><id>tag:,2012-09-30:api-documentation.html</id><summary type="html">&lt;p&gt;All public API members can (and should) be imported from &lt;tt class="docutils literal"&gt;blinker&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from blinker import ANY, signal
&lt;/pre&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/blinker/docs/source/api.rst&lt;/tt&gt;, line 10)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;currentmodule&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. currentmodule:: blinker.base

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="basic-signals"&gt;
&lt;h2&gt;Basic Signals&lt;/h2&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/blinker/docs/source/api.rst&lt;/tt&gt;, line 15)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autoattribute&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autoattribute:: blinker.base.ANY

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/blinker/docs/source/api.rst&lt;/tt&gt;, line 17)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autoattribute&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autoattribute:: blinker.base.receiver_connected

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/blinker/docs/source/api.rst&lt;/tt&gt;, line 19)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autoclass&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autoclass:: Signal
   :members:
   :undoc-members:

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="named-signals"&gt;
&lt;h2&gt;Named Signals&lt;/h2&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/blinker/docs/source/api.rst&lt;/tt&gt;, line 26)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;function&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. function:: signal(name, doc=None)

  Return the :class:`NamedSignal` *name*, creating it if required.

  Repeated calls to this function will return the same signal object.
  Signals are created in a global :class:`Namespace`.

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/blinker/docs/source/api.rst&lt;/tt&gt;, line 33)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autoclass&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autoclass:: NamedSignal
   :show-inheritance:
   :members:

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/blinker/docs/source/api.rst&lt;/tt&gt;, line 37)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autoclass&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autoclass:: Namespace
   :show-inheritance:
   :members: signal
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Blinker Documentation</title><link href="/blinker-documentation.html" rel="alternate"></link><updated>2012-09-30T04:54:36Z</updated><author><name>kamal</name></author><id>tag:,2012-09-30:blinker-documentation.html</id><summary type="html">&lt;p&gt;Blinker provides fast &amp;amp; simple object-to-object and broadcast
signaling for Python objects.&lt;/p&gt;
&lt;p&gt;The core of Blinker is quite small but provides powerful features:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;a global registry of named signals&lt;/li&gt;
&lt;li&gt;anonymous signals&lt;/li&gt;
&lt;li&gt;custom name registries&lt;/li&gt;
&lt;li&gt;permanently or temporarily connected receivers&lt;/li&gt;
&lt;li&gt;automatically disconnected receivers via weak referencing&lt;/li&gt;
&lt;li&gt;sending arbitrary data payloads&lt;/li&gt;
&lt;li&gt;collecting return values from signal receivers&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;div class="section" id="requirements"&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Python 2.4 or later; Python 3.0 or later; or Jython 2.5 or later.&lt;/p&gt;
&lt;p&gt;No other modules are required.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="license"&gt;
&lt;h2&gt;License&lt;/h2&gt;
&lt;p&gt;Blinker is provided under the MIT License.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="contents"&gt;
&lt;h2&gt;Contents&lt;/h2&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/blinker/docs/source/index.rst&lt;/tt&gt;, line 35)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;toctree&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. toctree::
   :maxdepth: 2

   signals
   api


&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Signals</title><link href="/signals.html" rel="alternate"></link><updated>2012-09-30T04:54:36Z</updated><author><name>kamal</name></author><id>tag:,2012-09-30:signals.html</id><summary type="html">&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/blinker/docs/source/signals.rst&lt;/tt&gt;, line 5)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;currentmodule&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. currentmodule:: blinker.base

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="decoupling-with-named-signals"&gt;
&lt;h2&gt;Decoupling With Named Signals&lt;/h2&gt;
&lt;p&gt;Named signals are created with &lt;a href="#id1"&gt;&lt;span class="problematic" id="id2"&gt;:func:`signal`&lt;/span&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class="system-message" id="id1"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/blinker/docs/source/signals.rst&lt;/tt&gt;, line 10); &lt;em&gt;&lt;a href="#id2"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;func&amp;quot;.&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/blinker/docs/source/signals.rst&lt;/tt&gt;, line 12)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;doctest&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. doctest::

  &amp;gt;&amp;gt;&amp;gt; from blinker import signal
  &amp;gt;&amp;gt;&amp;gt; initialized = signal('initialized')
  &amp;gt;&amp;gt;&amp;gt; initialized is signal('initialized')
  True

&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Every call to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;signal('name')&lt;/span&gt;&lt;/tt&gt; returns the same signal object,
allowing unconnected parts of code (different modules, plugins,
anything) to all use the same signal without requiring any code
sharing or special imports.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="subscribing-to-signals"&gt;
&lt;h2&gt;Subscribing to Signals&lt;/h2&gt;
&lt;p&gt;&lt;a href="#id3"&gt;&lt;span class="problematic" id="id4"&gt;:meth:`Signal.connect`&lt;/span&gt;&lt;/a&gt; registers a function to be invoked each time
the signal is emitted.  Connected functions are always passed the
object that caused the signal to be emitted.&lt;/p&gt;
&lt;div class="system-message" id="id3"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/blinker/docs/source/signals.rst&lt;/tt&gt;, line 28); &lt;em&gt;&lt;a href="#id4"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;meth&amp;quot;.&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/blinker/docs/source/signals.rst&lt;/tt&gt;, line 32)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;doctest&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. doctest::

  &amp;gt;&amp;gt;&amp;gt; def subscriber(sender):
  ...     print(&amp;quot;Got a signal sent by %r&amp;quot; % sender)
  ...
  &amp;gt;&amp;gt;&amp;gt; ready = signal('ready')
  &amp;gt;&amp;gt;&amp;gt; ready.connect(subscriber)
  &amp;lt;function subscriber at 0x...&amp;gt;


&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="emitting-signals"&gt;
&lt;h2&gt;Emitting Signals&lt;/h2&gt;
&lt;p&gt;Code producing events of interest can &lt;a href="#id5"&gt;&lt;span class="problematic" id="id6"&gt;:meth:`Signal.send`&lt;/span&gt;&lt;/a&gt;
notifications to all connected receivers.&lt;/p&gt;
&lt;div class="system-message" id="id5"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/blinker/docs/source/signals.rst&lt;/tt&gt;, line 45); &lt;em&gt;&lt;a href="#id6"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;meth&amp;quot;.&lt;/div&gt;
&lt;p&gt;Below, a simple &lt;tt class="docutils literal"&gt;Processor&lt;/tt&gt; class emits a &lt;tt class="docutils literal"&gt;ready&lt;/tt&gt; signal when it's
about to process something, and &lt;tt class="docutils literal"&gt;complete&lt;/tt&gt; when it is done.  It
passes &lt;tt class="docutils literal"&gt;self&lt;/tt&gt; to the &lt;a href="#id7"&gt;&lt;span class="problematic" id="id8"&gt;:meth:`~Signal.send`&lt;/span&gt;&lt;/a&gt; method, signifying that
that particular instance was responsible for emitting the signal.&lt;/p&gt;
&lt;div class="system-message" id="id7"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/blinker/docs/source/signals.rst&lt;/tt&gt;, line 48); &lt;em&gt;&lt;a href="#id8"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;meth&amp;quot;.&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/blinker/docs/source/signals.rst&lt;/tt&gt;, line 53)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;doctest&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. doctest::

  &amp;gt;&amp;gt;&amp;gt; class Processor:
  ...    def __init__(self, name):
  ...        self.name = name
  ...
  ...    def go(self):
  ...        ready = signal('ready')
  ...        ready.send(self)
  ...        print(&amp;quot;Processing.&amp;quot;)
  ...        complete = signal('complete')
  ...        complete.send(self)
  ...
  ...    def __repr__(self):
  ...        return '&amp;lt;Processor %s&amp;gt;' % self.name
  ...
  &amp;gt;&amp;gt;&amp;gt; processor_a = Processor('a')
  &amp;gt;&amp;gt;&amp;gt; processor_a.go()
  Got a signal sent by &amp;lt;Processor a&amp;gt;
  Processing.

&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Notice the &lt;tt class="docutils literal"&gt;complete&lt;/tt&gt; signal in &lt;tt class="docutils literal"&gt;go()&lt;/tt&gt;?  No receivers have
connected to &lt;tt class="docutils literal"&gt;complete&lt;/tt&gt; yet, and that's a-ok.  Calling
&lt;a href="#id9"&gt;&lt;span class="problematic" id="id10"&gt;:meth:`~Signal.send`&lt;/span&gt;&lt;/a&gt; on a signal with no receivers will result in no
notifications being sent, and these no-op sends are optimized to be as
inexpensive as possible.&lt;/p&gt;
&lt;div class="system-message" id="id9"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/blinker/docs/source/signals.rst&lt;/tt&gt;, line 74); &lt;em&gt;&lt;a href="#id10"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;meth&amp;quot;.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="subscribing-to-specific-senders"&gt;
&lt;h2&gt;Subscribing to Specific Senders&lt;/h2&gt;
&lt;p&gt;The default connection to a signal invokes the receiver function when
any sender emits it.  The &lt;a href="#id11"&gt;&lt;span class="problematic" id="id12"&gt;:meth:`Signal.connect`&lt;/span&gt;&lt;/a&gt; function accepts an
optional argument to restrict the subscription to one specific sending
object:&lt;/p&gt;
&lt;div class="system-message" id="id11"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/blinker/docs/source/signals.rst&lt;/tt&gt;, line 84); &lt;em&gt;&lt;a href="#id12"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;meth&amp;quot;.&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/blinker/docs/source/signals.rst&lt;/tt&gt;, line 89)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;doctest&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. doctest::

  &amp;gt;&amp;gt;&amp;gt; def b_subscriber(sender):
  ...     print(&amp;quot;Caught signal from processor_b.&amp;quot;)
  ...     assert sender.name == 'b'
  ...
  &amp;gt;&amp;gt;&amp;gt; processor_b = Processor('b')
  &amp;gt;&amp;gt;&amp;gt; ready.connect(b_subscriber, sender=processor_b)
  &amp;lt;function b_subscriber at 0x...&amp;gt;

&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This function has been subscribed to &lt;tt class="docutils literal"&gt;ready&lt;/tt&gt; but only when sent by
&lt;tt class="docutils literal"&gt;processor_b&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/blinker/docs/source/signals.rst&lt;/tt&gt;, line 102)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;doctest&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. doctest::

  &amp;gt;&amp;gt;&amp;gt; processor_a.go()
  Got a signal sent by &amp;lt;Processor a&amp;gt;
  Processing.
  &amp;gt;&amp;gt;&amp;gt; processor_b.go()
  Got a signal sent by &amp;lt;Processor b&amp;gt;
  Caught signal from processor_b.
  Processing.


&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="sending-and-receiving-data-through-signals"&gt;
&lt;h2&gt;Sending and Receiving Data Through Signals&lt;/h2&gt;
&lt;p&gt;Additional keyword arguments can be passed to &lt;a href="#id13"&gt;&lt;span class="problematic" id="id14"&gt;:meth:`~Signal.send`&lt;/span&gt;&lt;/a&gt;.
These will in turn be passed to the connected functions:&lt;/p&gt;
&lt;div class="system-message" id="id13"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/blinker/docs/source/signals.rst&lt;/tt&gt;, line 116); &lt;em&gt;&lt;a href="#id14"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;meth&amp;quot;.&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/blinker/docs/source/signals.rst&lt;/tt&gt;, line 119)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;doctest&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. doctest::

  &amp;gt;&amp;gt;&amp;gt; send_data = signal('send-data')
  &amp;gt;&amp;gt;&amp;gt; &amp;#64;send_data.connect
  ... def receive_data(sender, **kw):
  ...     print(&amp;quot;Caught signal from %r, data %r&amp;quot; % (sender, kw))
  ...     return 'received!'
  ...
  &amp;gt;&amp;gt;&amp;gt; result = send_data.send('anonymous', abc=123)
  Caught signal from 'anonymous', data {'abc': 123}

&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The return value of &lt;a href="#id15"&gt;&lt;span class="problematic" id="id16"&gt;:meth:`~Signal.send`&lt;/span&gt;&lt;/a&gt; collects the return values of
each connected function as a list of (&lt;tt class="docutils literal"&gt;receiver function&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;return
value&lt;/tt&gt;) pairs:&lt;/p&gt;
&lt;div class="system-message" id="id15"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/blinker/docs/source/signals.rst&lt;/tt&gt;, line 130); &lt;em&gt;&lt;a href="#id16"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;meth&amp;quot;.&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/blinker/docs/source/signals.rst&lt;/tt&gt;, line 134)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;doctest&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. doctest::

  &amp;gt;&amp;gt;&amp;gt; result
  [(&amp;lt;function receive_data at 0x...&amp;gt;, 'received!')]


&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="anonymous-signals"&gt;
&lt;h2&gt;Anonymous Signals&lt;/h2&gt;
&lt;p&gt;Signals need not be named.  The &lt;a href="#id17"&gt;&lt;span class="problematic" id="id18"&gt;:class:`Signal`&lt;/span&gt;&lt;/a&gt; constructor creates a
unique signal each time it is invoked.  For example, an alternative
implementation of the Processor from above might provide the
processing signals as class attributes:&lt;/p&gt;
&lt;div class="system-message" id="id17"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/blinker/docs/source/signals.rst&lt;/tt&gt;, line 143); &lt;em&gt;&lt;a href="#id18"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;class&amp;quot;.&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/blinker/docs/source/signals.rst&lt;/tt&gt;, line 148)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;doctest&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. doctest::

  &amp;gt;&amp;gt;&amp;gt; from blinker import Signal
  &amp;gt;&amp;gt;&amp;gt; class AltProcessor:
  ...    on_ready = Signal()
  ...    on_complete = Signal()
  ...
  ...    def __init__(self, name):
  ...        self.name = name
  ...
  ...    def go(self):
  ...        self.on_ready.send(self)
  ...        print(&amp;quot;Alternate processing.&amp;quot;)
  ...        self.on_complete.send(self)
  ...
  ...    def __repr__(self):
  ...        return '&amp;lt;AltProcessor %s&amp;gt;' % self.name
  ...

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="connect-as-a-decorator"&gt;
&lt;h2&gt;&lt;tt class="docutils literal"&gt;connect&lt;/tt&gt; as a Decorator&lt;/h2&gt;
&lt;p&gt;You may have noticed the return value of &lt;a href="#id19"&gt;&lt;span class="problematic" id="id20"&gt;:meth:`~Signal.connect`&lt;/span&gt;&lt;/a&gt; in
the console output in the sections above.  This allows &lt;tt class="docutils literal"&gt;connect&lt;/tt&gt; to
be used as a decorator on functions:&lt;/p&gt;
&lt;div class="system-message" id="id19"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/blinker/docs/source/signals.rst&lt;/tt&gt;, line 170); &lt;em&gt;&lt;a href="#id20"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;meth&amp;quot;.&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/blinker/docs/source/signals.rst&lt;/tt&gt;, line 174)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;doctest&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. doctest::

  &amp;gt;&amp;gt;&amp;gt; apc = AltProcessor('c')
  &amp;gt;&amp;gt;&amp;gt; &amp;#64;apc.on_complete.connect
  ... def completed(sender):
  ...     print &amp;quot;AltProcessor %s completed!&amp;quot; % sender.name
  ...
  &amp;gt;&amp;gt;&amp;gt; apc.go()
  Alternate processing.
  AltProcessor c completed!

&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;While convenient, this form unfortunately does not allow the
&lt;tt class="docutils literal"&gt;sender&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;weak&lt;/tt&gt; arguments to be customized for the connected
function.  For this, &lt;a href="#id21"&gt;&lt;span class="problematic" id="id22"&gt;:meth:`~Signal.connect_via`&lt;/span&gt;&lt;/a&gt; can be used:&lt;/p&gt;
&lt;div class="system-message" id="id21"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/blinker/docs/source/signals.rst&lt;/tt&gt;, line 185); &lt;em&gt;&lt;a href="#id22"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;meth&amp;quot;.&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/blinker/docs/source/signals.rst&lt;/tt&gt;, line 189)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;doctest&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. doctest::

  &amp;gt;&amp;gt;&amp;gt; dice_roll = signal('dice_roll')
  &amp;gt;&amp;gt;&amp;gt; &amp;#64;dice_roll.connect_via(1)
  ... &amp;#64;dice_roll.connect_via(3)
  ... &amp;#64;dice_roll.connect_via(5)
  ... def odd_subscriber(sender):
  ...     print(&amp;quot;Observed dice roll %r.&amp;quot; % sender)
  ...
  &amp;gt;&amp;gt;&amp;gt; result = dice_roll.send(3)
  Observed dice roll 3.


&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="optimizing-signal-sending"&gt;
&lt;h2&gt;Optimizing Signal Sending&lt;/h2&gt;
&lt;p&gt;Signals are optimized to send very quickly, whether receivers are
connected or not.  If the data to be sent down a signal is very
expensive, it can be more efficient to check to see if any receivers
are connected first by testing the &lt;a href="#id23"&gt;&lt;span class="problematic" id="id24"&gt;:attr:`~Signal.receivers`&lt;/span&gt;&lt;/a&gt; property:&lt;/p&gt;
&lt;div class="system-message" id="id23"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/blinker/docs/source/signals.rst&lt;/tt&gt;, line 205); &lt;em&gt;&lt;a href="#id24"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;attr&amp;quot;.&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/blinker/docs/source/signals.rst&lt;/tt&gt;, line 210)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;doctest&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. doctest::

  &amp;gt;&amp;gt;&amp;gt; bool(signal('ready').receivers)
  True
  &amp;gt;&amp;gt;&amp;gt; bool(signal('complete').receivers)
  False
  &amp;gt;&amp;gt;&amp;gt; bool(AltProcessor.on_complete.receivers)
  True

&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Checking for a receiver listening for a particular sender is also
possible:&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/blinker/docs/source/signals.rst&lt;/tt&gt;, line 222)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;doctest&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. doctest::

  &amp;gt;&amp;gt;&amp;gt; signal('ready').has_receivers_for(processor_a)
  True

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="documenting-signals"&gt;
&lt;h2&gt;Documenting Signals&lt;/h2&gt;
&lt;p&gt;Both named and anonymous signals can be passed a &lt;tt class="docutils literal"&gt;doc&lt;/tt&gt; argument at
construction to set the pydoc help text for the signal.  This
documentation will be picked up by most documentation generators (such
as sphinx) and is nice for documenting any additional data parameters
that will be sent down with the signal.&lt;/p&gt;
&lt;p&gt;See the documentation of the &lt;a href="#id25"&gt;&lt;span class="problematic" id="id26"&gt;:obj:`receiver_connected`&lt;/span&gt;&lt;/a&gt; built-in signal
for an example.&lt;/p&gt;
&lt;div class="system-message" id="id25"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/blinker/docs/source/signals.rst&lt;/tt&gt;, line 236); &lt;em&gt;&lt;a href="#id26"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;obj&amp;quot;.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="more"&gt;
&lt;h2&gt;More&lt;/h2&gt;
&lt;p&gt;Disconnecting receivers from signals, introspection of connected
receivers, private namespaces for named signals and more are discussed
in the &lt;a href="#id27"&gt;&lt;span class="problematic" id="id28"&gt;:ref:`api`&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="system-message" id="id27"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/blinker/docs/source/signals.rst&lt;/tt&gt;, line 242); &lt;em&gt;&lt;a href="#id28"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title></title><link href="/.html" rel="alternate"></link><updated>2012-09-30T04:54:08Z</updated><author><name>kamal</name></author><id>tag:,2012-09-30:.html</id><summary type="html">&lt;p&gt;The following is a list of ideas of functionality which would be nice
to have in &lt;cite&gt;rst.el&lt;/cite&gt;. In the examples a &lt;tt class="docutils literal"&gt;&amp;#64;&lt;/tt&gt; stands for the cursor.&lt;/p&gt;
&lt;div class="section" id="convert-to-id"&gt;
&lt;h2&gt;Convert to id&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Convert the region to an HTML id&lt;ul&gt;
&lt;li&gt;For instance &amp;quot;Eine Überschrift&amp;quot; to &amp;quot;eine-berschrift&amp;quot;&lt;/li&gt;
&lt;li&gt;According the same rules as reST does this&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="jump-to-internal-target"&gt;
&lt;h2&gt;Jump to internal target&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A command to jump to the internal target the point is on&lt;/li&gt;
&lt;li&gt;A target may be&lt;ul&gt;
&lt;li&gt;A section title&lt;/li&gt;
&lt;li&gt;Footnotes / citations&lt;/li&gt;
&lt;li&gt;Inline internal targets&lt;/li&gt;
&lt;li&gt;Hyperlink target definition&lt;/li&gt;
&lt;li&gt;Substitution definition&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;See hunk #26 in &lt;cite&gt;rst_el-emacs_V23_1_patch1_1_2&lt;/cite&gt; vs. &lt;cite&gt;emacs_V23_1&lt;/cite&gt;
for some ideas&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="completion-for-directive-options"&gt;
&lt;h2&gt;Completion for directive options&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Imagine&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. list-table::
   :&amp;#64;
&lt;/pre&gt;
&lt;p&gt;with the cursor at the asterisk&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;There should be a command which offers all the possible options for
this particular directive as completion&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;May be &lt;cite&gt;skeleton.el&lt;/cite&gt; can also be useful&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="completion-for-directives"&gt;
&lt;h2&gt;Completion for directives&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Imagine&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. &amp;#64;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;There should be a command which offers all directives as completion&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;May be this should work for other keywords as well&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;May be this could work even at the beginning of the line&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Completion must be bound to M-TAB&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Already existing binding must be chained&lt;/li&gt;
&lt;li&gt;May be &lt;cite&gt;expand.el&lt;/cite&gt; can help (look in package finder)?&lt;/li&gt;
&lt;li&gt;May be &lt;cite&gt;hippie&lt;/cite&gt; is good here&lt;/li&gt;
&lt;li&gt;Check &lt;cite&gt;(info)autotype&lt;/cite&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="completion-for-user-defined-elements"&gt;
&lt;h2&gt;Completion for user-defined elements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Imagine&lt;/p&gt;
&lt;pre class="literal-block"&gt;
|&amp;#64;
&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[&amp;#64;
&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre class="literal-block"&gt;
_&amp;#64;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;There should be a command which offers all defined substitutions /
footnotes / links as completion&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="insertion-of-link-alias"&gt;
&lt;h2&gt;Insertion of link alias&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Imagine&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Aspect of something
===================

This is about the `aspect of something`_&amp;#64;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;There should be a command which asks you for an alias for the link,
add the alias and change the link&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. _aspects of something:

Aspect of something
===================

This is about the `aspects of something`_&amp;#64;
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="smart-use-of-iimage-mode"&gt;
&lt;h2&gt;Smart use of &lt;cite&gt;iimage-mode&lt;/cite&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;There is &lt;cite&gt;iimage-mode&lt;/cite&gt; which shows &lt;tt class="docutils literal"&gt;.. image::&lt;/tt&gt;s in Emacs&lt;/li&gt;
&lt;li&gt;May be we can add a binding to toggle it&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="toc-in-speedbar"&gt;
&lt;h2&gt;TOC in speedbar&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;If the TOC is displayed in the speedbar this could be used for
permanent navigation&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="toc-mode-without-markup"&gt;
&lt;h2&gt;toc-mode without markup&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The markup which may be contained in a section title is not useful
in toc-mode and should be suppressed&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="sophisticated-navigation-in-sections"&gt;
&lt;h2&gt;Sophisticated navigation in sections&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Navigation in sections similar to navigation in other structured data&lt;ul&gt;
&lt;li&gt;Like XML, Lisp&lt;/li&gt;
&lt;li&gt;C-M-u für Up&lt;/li&gt;
&lt;li&gt;C-M-d für Down&lt;/li&gt;
&lt;li&gt;C-M-f / C-M-b für Forward / Backward&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="display-of-current-location"&gt;
&lt;h2&gt;Display of current location&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Display the &amp;quot;section path&amp;quot; to the current point&lt;/li&gt;
&lt;li&gt;Like in XML: In which element is the point?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="toc-mode-only-to-a-certain-level"&gt;
&lt;h2&gt;toc-mode only to a certain level&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;If a TOC buffer is created a prefix argument should limit the depth
of the listing to the given level&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="imenu-support"&gt;
&lt;h2&gt;Imenu support&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Imenu could be supported&lt;ul&gt;
&lt;li&gt;See &lt;cite&gt;(elisp)Imenu&lt;/cite&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="outline-support"&gt;
&lt;h2&gt;Outline support&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Support for &lt;cite&gt;outline-mode&lt;/cite&gt; / &lt;cite&gt;allout-mode&lt;/cite&gt; would be nice&lt;ul&gt;
&lt;li&gt;Should consider section titles&lt;ul&gt;
&lt;li&gt;May be item lists can also be included&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Using &lt;cite&gt;allout-mode&lt;/cite&gt; is difficult&lt;ul&gt;
&lt;li&gt;It's not customizable enough for the complex syntax of
reStructuredText&lt;/li&gt;
&lt;li&gt;However, some commands make sense&lt;ul&gt;
&lt;li&gt;Motion commands&lt;/li&gt;
&lt;li&gt;Exposure commands&lt;/li&gt;
&lt;li&gt;Some alteration commands&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Should be reimplemented&lt;ul&gt;
&lt;li&gt;Key bindings need to be reused&lt;ul&gt;
&lt;li&gt;However, care must be taken if a file uses &lt;cite&gt;allout-mode&lt;/cite&gt; for
instance by comment strings&lt;/li&gt;
&lt;li&gt;In this case key bindings must not be overridden&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A command adding / updating &lt;cite&gt;allout-mode&lt;/cite&gt; tags could be a solution&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="sophisticated-filling"&gt;
&lt;h2&gt;Sophisticated filling&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;These things must be filled special:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Definitions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Filling of&lt;/p&gt;
&lt;pre class="literal-block"&gt;
* VeryLongWordSuchAsAnURLVeryLongWordSuchAsAnURLVeryLongWordSuchAsAnURLVeryLongWordSuchAsAnURLVeryLongWordSuchAsAnURL
&lt;/pre&gt;
&lt;p&gt;should work as expected by &lt;em&gt;not&lt;/em&gt; breaking the line&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;These things may not be filled at all&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Literal blocks&lt;/li&gt;
&lt;li&gt;Tables&lt;/li&gt;
&lt;li&gt;Section headers&lt;/li&gt;
&lt;li&gt;Link definitions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="sophisticated-indentation"&gt;
&lt;h2&gt;Sophisticated indentation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;It should be generally possible to shift one more to the right&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;This makes indentation for quotes possible&lt;/li&gt;
&lt;li&gt;But not for literal blocks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;For item lists the best tab should be on the same level as the last
item:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
* bla

&amp;#64;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;The second best tab should be where text starts:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
* bla

  &amp;#64;
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&amp;lt;backtab&amp;gt; should be used to indent in the other direction&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Or may be C-u &amp;lt;tab&amp;gt; but this has a different meaning&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&amp;lt;tab&amp;gt; could obsolete C-c C-r &amp;lt;tab&amp;gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;For this the indentation needs to be determined at the start
instead of per line&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&amp;lt;tab&amp;gt; over list works:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Text

  * GGGGGG
  * SSSSSSSSSSSSSSS
  * TTTTTTTT
  * ZZZZZZZZ
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&amp;lt;tab&amp;gt; over list doesn't work:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Text

* GGGGGG
* SSSSSSSSSSSSSSS
* TTTTTTTT
* ZZZZZZZZ
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="list-to-sections"&gt;
&lt;h2&gt;List to sections&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A command would be nice which&lt;ul&gt;
&lt;li&gt;transforms the first level of a nested list in a region into a
header&lt;/li&gt;
&lt;li&gt;removes one level of indentation from the rest of the list&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="change-section-level-by-more-than-one-step"&gt;
&lt;h2&gt;Change section level by more than one step&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It would be nice if &amp;lt;C-h&amp;gt; &lt;cite&gt;rst-adjust&lt;/cite&gt; could rotate a section
adornment more than one level&lt;/li&gt;
&lt;li&gt;A modification of the semantic of the prefix arguments could do this&lt;ul&gt;
&lt;li&gt;Non-zero numeric prefix arg n rotates n step in the given direction&lt;/li&gt;
&lt;li&gt;Prefix arg 0 toggles overline / underline&lt;ul&gt;
&lt;li&gt;This would be different from current setup&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="compiling-for-syntax-check"&gt;
&lt;h2&gt;Compiling for syntax check&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Compiling with results going to &lt;cite&gt;/dev/null&lt;/cite&gt; would be useful&lt;ul&gt;
&lt;li&gt;This would just do a syntax check with no files lying around&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Toolset choice for &amp;lt;C-c C-c C-c&amp;gt; &lt;cite&gt;rst-compile&lt;/cite&gt; must be by
customizable if at all necessary&lt;ul&gt;
&lt;li&gt;Customization group must be used&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="renumber-an-exisiting-enumeration"&gt;
&lt;h2&gt;Renumber an exisiting enumeration&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Renumbering an exisiting enumeration is not possible yet&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="command-to-move-across-blocks"&gt;
&lt;h2&gt;Command to move across blocks&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A command moving forward / backward across the content blocks of the
current block would be nice&lt;ul&gt;
&lt;li&gt;For instance: Move across all blocks contained in an item or field&lt;/li&gt;
&lt;li&gt;This would move to the start of the sibling of the current block&lt;/li&gt;
&lt;li&gt;Would allow to jump to the next item on the same level in a list&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&amp;lt;C-M-f&amp;gt; &lt;cite&gt;forward-sexp&lt;/cite&gt; could be a nice binding&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="rst-toc-insert-features"&gt;
&lt;h2&gt;rst-toc-insert features&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;cite&gt;contents::&lt;/cite&gt; options could be parsed to figure out how deep to
render the inserted TOC&lt;/li&gt;
&lt;li&gt;On load, detect any existing TOCs and set the properties for links&lt;/li&gt;
&lt;li&gt;TOC insertion should have an option to add empty lines&lt;/li&gt;
&lt;li&gt;TOC insertion should deal with multiple lines&lt;/li&gt;
&lt;li&gt;Automatically detect if we have a &lt;cite&gt;section-numbering::&lt;/cite&gt; in the
corresponding section, to render the toc.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="automatic-handling-of-txt-files"&gt;
&lt;h3&gt;Automatic handling of &lt;cite&gt;.txt&lt;/cite&gt; files&lt;/h3&gt;
&lt;p&gt;It would be nice to differentiate between text files using
reStructuredText and other general text files. If we had a function to
automatically guess whether a &lt;cite&gt;.txt&lt;/cite&gt; file is following the
reStructuredText conventions, we could trigger &lt;cite&gt;rst-mode&lt;/cite&gt; without
having to hard-code this in every text file, nor forcing the user to
add a local mode variable at the top of the file. We could perform
this guessing by searching for a valid adornment at the top of the
document or searching for reStructuredText directives further on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="entry-level-for-rst-straighten-adornments"&gt;
&lt;h3&gt;Entry level for rst-straighten-adornments&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;cite&gt;rst-straighten-adornments&lt;/cite&gt; should have an entry level to start at a
lower than the top level&lt;ul&gt;
&lt;li&gt;I for one prefer a verbose style for top level titles which is not
appropriate for documents without titles&lt;/li&gt;
&lt;li&gt;Should be done by a prefix argument&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Template Designer Documentation</title><link href="/template-designer-documentation.html" rel="alternate"></link><updated>2012-09-30T04:52:53Z</updated><author><name>kamal</name></author><id>tag:,2012-09-30:template-designer-documentation.html</id><summary type="html">&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/templates.rst&lt;/tt&gt;, line 4)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;highlight&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. highlight:: html+jinja

&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This document describes the syntax and semantics of the template engine and
will be most useful as reference to those creating Jinja templates.  As the
template engine is very flexible the configuration from the application might
be slightly different from here in terms of delimiters and behavior of
undefined values.&lt;/p&gt;
&lt;div class="section" id="synopsis"&gt;
&lt;h2&gt;Synopsis&lt;/h2&gt;
&lt;p&gt;A template is simply a text file.  It can generate any text-based format
(HTML, XML, CSV, LaTeX, etc.).  It doesn't have a specific extension,
&lt;tt class="docutils literal"&gt;.html&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;.xml&lt;/tt&gt; are just fine.&lt;/p&gt;
&lt;p&gt;A template contains &lt;strong&gt;variables&lt;/strong&gt; or &lt;strong&gt;expressions&lt;/strong&gt;, which get replaced with
values when the template is evaluated, and tags, which control the logic of
the template.  The template syntax is heavily inspired by Django and Python.&lt;/p&gt;
&lt;p&gt;Below is a minimal template that illustrates a few basics.  We will cover
the details later in that document:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;!DOCTYPE HTML PUBLIC &amp;quot;-//W3C//DTD HTML 4.01//EN&amp;quot;&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;My Webpage&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;ul id=&amp;quot;navigation&amp;quot;&amp;gt;
    {% for item in navigation %}
        &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{ item.href }}&amp;quot;&amp;gt;{{ item.caption }}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    {% endfor %}
    &amp;lt;/ul&amp;gt;

    &amp;lt;h1&amp;gt;My Webpage&amp;lt;/h1&amp;gt;
    {{ a_variable }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This covers the default settings.  The application developer might have
changed the syntax from &lt;tt class="docutils literal"&gt;{% foo %}&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;&amp;lt;% foo %&amp;gt;&lt;/tt&gt; or something similar.&lt;/p&gt;
&lt;p&gt;There are two kinds of delimiters. &lt;tt class="docutils literal"&gt;{% ... %}&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;{{ ... }}&lt;/tt&gt;.  The first
one is used to execute statements such as for-loops or assign values, the
latter prints the result of the expression to the template.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;span id="variables"&gt;&lt;/span&gt;&lt;h2&gt;Variables&lt;/h2&gt;
&lt;p&gt;The application passes variables to the templates you can mess around in the
template.  Variables may have attributes or elements on them you can access
too.  How a variable looks like, heavily depends on the application providing
those.&lt;/p&gt;
&lt;p&gt;You can use a dot (&lt;tt class="docutils literal"&gt;.&lt;/tt&gt;) to access attributes of a variable, alternative the
so-called &amp;quot;subscript&amp;quot; syntax (&lt;tt class="docutils literal"&gt;[]&lt;/tt&gt;) can be used.  The following lines do
the same:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{{ foo.bar }}
{{ foo['bar'] }}
&lt;/pre&gt;
&lt;p&gt;It's important to know that the curly braces are &lt;em&gt;not&lt;/em&gt; part of the variable
but the print statement.  If you access variables inside tags don't put the
braces around.&lt;/p&gt;
&lt;p&gt;If a variable or attribute does not exist you will get back an undefined
value.  What you can do with that kind of value depends on the application
configuration, the default behavior is that it evaluates to an empty string
if printed and that you can iterate over it, but every other operation fails.&lt;/p&gt;
&lt;div class="admonition-implementation admonition" id="notes-on-subscriptions"&gt;
&lt;p class="first admonition-title"&gt;Implementation&lt;/p&gt;
&lt;p&gt;For convenience sake &lt;tt class="docutils literal"&gt;foo.bar&lt;/tt&gt; in Jinja2 does the following things on
the Python layer:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;check if there is an attribute called &lt;cite&gt;bar&lt;/cite&gt; on &lt;cite&gt;foo&lt;/cite&gt;.&lt;/li&gt;
&lt;li&gt;if there is not, check if there is an item &lt;tt class="docutils literal"&gt;'bar'&lt;/tt&gt; in &lt;cite&gt;foo&lt;/cite&gt;.&lt;/li&gt;
&lt;li&gt;if there is not, return an undefined object.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;foo['bar']&lt;/span&gt;&lt;/tt&gt; on the other hand works mostly the same with the a small
difference in the order:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;check if there is an item &lt;tt class="docutils literal"&gt;'bar'&lt;/tt&gt; in &lt;cite&gt;foo&lt;/cite&gt;.&lt;/li&gt;
&lt;li&gt;if there is not, check if there is an attribute called &lt;cite&gt;bar&lt;/cite&gt; on &lt;cite&gt;foo&lt;/cite&gt;.&lt;/li&gt;
&lt;li&gt;if there is not, return an undefined object.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is important if an object has an item or attribute with the same
name.  Additionally there is the &lt;a href="#id2"&gt;&lt;span class="problematic" id="id3"&gt;:func:`attr`&lt;/span&gt;&lt;/a&gt; filter that just looks up
attributes.&lt;/p&gt;
&lt;div class="last system-message" id="id2"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/templates.rst&lt;/tt&gt;, line 95); &lt;em&gt;&lt;a href="#id3"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;func&amp;quot;.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;span id="filters"&gt;&lt;/span&gt;&lt;h2&gt;Filters&lt;/h2&gt;
&lt;p&gt;Variables can be modified by &lt;strong&gt;filters&lt;/strong&gt;.  Filters are separated from the
variable by a pipe symbol (&lt;tt class="docutils literal"&gt;|&lt;/tt&gt;) and may have optional arguments in
parentheses.  Multiple filters can be chained.  The output of one filter is
applied to the next.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;{{ name|striptags|title }}&lt;/tt&gt; for example will remove all HTML Tags from the
&lt;cite&gt;name&lt;/cite&gt; and title-cases it.  Filters that accept arguments have parentheses
around the arguments, like a function call.  This example will join a list
by commas:  &lt;tt class="docutils literal"&gt;{{ &lt;span class="pre"&gt;list|join(',&lt;/span&gt; ') }}&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;a href="#id5"&gt;&lt;span class="problematic" id="id6"&gt;:ref:`builtin-filters`&lt;/span&gt;&lt;/a&gt; below describes all the builtin filters.&lt;/p&gt;
&lt;div class="system-message" id="id5"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/templates.rst&lt;/tt&gt;, line 114); &lt;em&gt;&lt;a href="#id6"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;span id="tests"&gt;&lt;/span&gt;&lt;h2&gt;Tests&lt;/h2&gt;
&lt;p&gt;Beside filters there are also so called &amp;quot;tests&amp;quot; available.  Tests can be used
to test a variable against a common expression.  To test a variable or
expression you add &lt;cite&gt;is&lt;/cite&gt; plus the name of the test after the variable.  For
example to find out if a variable is defined you can do &lt;tt class="docutils literal"&gt;name is defined&lt;/tt&gt;
which will then return true or false depending on if &lt;cite&gt;name&lt;/cite&gt; is defined.&lt;/p&gt;
&lt;p&gt;Tests can accept arguments too.  If the test only takes one argument you can
leave out the parentheses to group them.  For example the following two
expressions do the same:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% if loop.index is divisibleby 3 %}
{% if loop.index is divisibleby(3) %}
&lt;/pre&gt;
&lt;p&gt;The &lt;a href="#id8"&gt;&lt;span class="problematic" id="id9"&gt;:ref:`builtin-tests`&lt;/span&gt;&lt;/a&gt; below describes all the builtin tests.&lt;/p&gt;
&lt;div class="system-message" id="id8"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/templates.rst&lt;/tt&gt;, line 134); &lt;em&gt;&lt;a href="#id9"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="comments"&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;p&gt;To comment-out part of a line in a template, use the comment syntax which is
by default set to &lt;tt class="docutils literal"&gt;{# ... #}&lt;/tt&gt;.  This is useful to comment out parts of the
template for debugging or to add information for other template designers or
yourself:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{# note: disabled template because we no longer use this
    {% for user in users %}
        ...
    {% endfor %}
#}
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="whitespace-control"&gt;
&lt;h2&gt;Whitespace Control&lt;/h2&gt;
&lt;p&gt;In the default configuration whitespace is not further modified by the
template engine, so each whitespace (spaces, tabs, newlines etc.) is returned
unchanged.  If the application configures Jinja to &lt;cite&gt;trim_blocks&lt;/cite&gt; the first
newline after a a template tag is removed automatically (like in PHP).&lt;/p&gt;
&lt;p&gt;But you can also strip whitespace in templates by hand.  If you put an minus
sign (&lt;tt class="docutils literal"&gt;-&lt;/tt&gt;) to the start or end of an block (for example a for tag), a
comment or variable expression you can remove the whitespaces after or before
that block:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% for item in seq -%}
    {{ item }}
{%- endfor %}
&lt;/pre&gt;
&lt;p&gt;This will yield all elements without whitespace between them.  If &lt;cite&gt;seq&lt;/cite&gt; was
a list of numbers from &lt;tt class="docutils literal"&gt;1&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;9&lt;/tt&gt; the output would be &lt;tt class="docutils literal"&gt;123456789&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;If &lt;a href="#id10"&gt;&lt;span class="problematic" id="id11"&gt;:ref:`line-statements`&lt;/span&gt;&lt;/a&gt; are enabled they strip leading whitespace
automatically up to the beginning of the line.&lt;/p&gt;
&lt;div class="system-message" id="id10"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/templates.rst&lt;/tt&gt;, line 172); &lt;em&gt;&lt;a href="#id11"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/div&gt;
&lt;div class="admonition-note admonition"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;You must not use a whitespace between the tag and the minus sign.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;valid&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{%- if foo -%}...{% endif %}
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;invalid&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class="last literal-block"&gt;
{% - if foo - %}...{% endif %}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="escaping"&gt;
&lt;h2&gt;Escaping&lt;/h2&gt;
&lt;p&gt;It is sometimes desirable or even necessary to have Jinja ignore parts it
would otherwise handle as variables or blocks.  For example if the default
syntax is used and you want to use &lt;tt class="docutils literal"&gt;{{&lt;/tt&gt; as raw string in the template and
not start a variable you have to use a trick.&lt;/p&gt;
&lt;p&gt;The easiest way is to output the variable delimiter (&lt;tt class="docutils literal"&gt;{{&lt;/tt&gt;) by using a
variable expression:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{{ '{{' }}
&lt;/pre&gt;
&lt;p&gt;For bigger sections it makes sense to mark a block &lt;cite&gt;raw&lt;/cite&gt;.  For example to
put Jinja syntax as example into a template you can use this snippet:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% raw %}
    &amp;lt;ul&amp;gt;
    {% for item in seq %}
        &amp;lt;li&amp;gt;{{ item }}&amp;lt;/li&amp;gt;
    {% endfor %}
    &amp;lt;/ul&amp;gt;
{% endraw %}
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;span id="line-statements"&gt;&lt;/span&gt;&lt;h2&gt;Line Statements&lt;/h2&gt;
&lt;p&gt;If line statements are enabled by the application it's possible to mark a
line as a statement.  For example if the line statement prefix is configured
to &lt;tt class="docutils literal"&gt;#&lt;/tt&gt; the following two examples are equivalent:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;ul&amp;gt;
# for item in seq
    &amp;lt;li&amp;gt;{{ item }}&amp;lt;/li&amp;gt;
# endfor
&amp;lt;/ul&amp;gt;

&amp;lt;ul&amp;gt;
{% for item in seq %}
    &amp;lt;li&amp;gt;{{ item }}&amp;lt;/li&amp;gt;
{% endfor %}
&amp;lt;/ul&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The line statement prefix can appear anywhere on the line as long as no text
precedes it.  For better readability statements that start a block (such as
&lt;cite&gt;for&lt;/cite&gt;, &lt;cite&gt;if&lt;/cite&gt;, &lt;cite&gt;elif&lt;/cite&gt; etc.) may end with a colon:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# for item in seq:
    ...
# endfor
&lt;/pre&gt;
&lt;div class="admonition-note admonition"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;Line statements can span multiple lines if there are open parentheses,
braces or brackets:&lt;/p&gt;
&lt;pre class="last literal-block"&gt;
&amp;lt;ul&amp;gt;
# for href, caption in [('index.html', 'Index'),
                        ('about.html', 'About')]:
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{ href }}&amp;quot;&amp;gt;{{ caption }}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
# endfor
&amp;lt;/ul&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Since Jinja 2.2 line-based comments are available as well.  For example if
the line-comment prefix is configured to be &lt;tt class="docutils literal"&gt;##&lt;/tt&gt; everything from &lt;tt class="docutils literal"&gt;##&lt;/tt&gt; to
the end of the line is ignored (excluding the newline sign):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# for item in seq:
    &amp;lt;li&amp;gt;{{ item }}&amp;lt;/li&amp;gt;     ## this comment is ignored
# endfor
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id13"&gt;
&lt;span id="template-inheritance"&gt;&lt;/span&gt;&lt;h2&gt;Template Inheritance&lt;/h2&gt;
&lt;p&gt;The most powerful part of Jinja is template inheritance. Template inheritance
allows you to build a base &amp;quot;skeleton&amp;quot; template that contains all the common
elements of your site and defines &lt;strong&gt;blocks&lt;/strong&gt; that child templates can override.&lt;/p&gt;
&lt;p&gt;Sounds complicated but is very basic. It's easiest to understand it by starting
with an example.&lt;/p&gt;
&lt;div class="section" id="base-template"&gt;
&lt;h3&gt;Base Template&lt;/h3&gt;
&lt;p&gt;This template, which we'll call &lt;tt class="docutils literal"&gt;base.html&lt;/tt&gt;, defines a simple HTML skeleton
document that you might use for a simple two-column page. It's the job of
&amp;quot;child&amp;quot; templates to fill the empty blocks with content:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;!DOCTYPE HTML PUBLIC &amp;quot;-//W3C//DTD HTML 4.01//EN&amp;quot;&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;html xmlns=&amp;quot;http://www.w3.org/1999/xhtml&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    {% block head %}
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;style.css&amp;quot; /&amp;gt;
    &amp;lt;title&amp;gt;{% block title %}{% endblock %} - My Webpage&amp;lt;/title&amp;gt;
    {% endblock %}
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div id=&amp;quot;content&amp;quot;&amp;gt;{% block content %}{% endblock %}&amp;lt;/div&amp;gt;
    &amp;lt;div id=&amp;quot;footer&amp;quot;&amp;gt;
        {% block footer %}
        &amp;amp;copy; Copyright 2008 by &amp;lt;a href=&amp;quot;http://domain.invalid/&amp;quot;&amp;gt;you&amp;lt;/a&amp;gt;.
        {% endblock %}
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/pre&gt;
&lt;p&gt;In this example, the &lt;tt class="docutils literal"&gt;{% block %}&lt;/tt&gt; tags define four blocks that child templates
can fill in. All the &lt;cite&gt;block&lt;/cite&gt; tag does is to tell the template engine that a
child template may override those portions of the template.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="child-template"&gt;
&lt;h3&gt;Child Template&lt;/h3&gt;
&lt;p&gt;A child template might look like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% extends &amp;quot;base.html&amp;quot; %}
{% block title %}Index{% endblock %}
{% block head %}
    {{ super() }}
    &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
        .important { color: #336699; }
    &amp;lt;/style&amp;gt;
{% endblock %}
{% block content %}
    &amp;lt;h1&amp;gt;Index&amp;lt;/h1&amp;gt;
    &amp;lt;p class=&amp;quot;important&amp;quot;&amp;gt;
      Welcome on my awesome homepage.
    &amp;lt;/p&amp;gt;
{% endblock %}
&lt;/pre&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;{% extends %}&lt;/tt&gt; tag is the key here. It tells the template engine that
this template &amp;quot;extends&amp;quot; another template.  When the template system evaluates
this template, first it locates the parent.  The extends tag should be the
first tag in the template.  Everything before it is printed out normally and
may cause confusion.  For details about this behavior and how to take
advantage of it, see &lt;a href="#id14"&gt;&lt;span class="problematic" id="id15"&gt;:ref:`null-master-fallback`&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="system-message" id="id14"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/templates.rst&lt;/tt&gt;, line 326); &lt;em&gt;&lt;a href="#id15"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/div&gt;
&lt;p&gt;The filename of the template depends on the template loader.  For example the
&lt;a href="#id16"&gt;&lt;span class="problematic" id="id17"&gt;:class:`FileSystemLoader`&lt;/span&gt;&lt;/a&gt; allows you to access other templates by giving the
filename.  You can access templates in subdirectories with an slash:&lt;/p&gt;
&lt;div class="system-message" id="id16"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/templates.rst&lt;/tt&gt;, line 333); &lt;em&gt;&lt;a href="#id17"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;class&amp;quot;.&lt;/div&gt;
&lt;pre class="literal-block"&gt;
{% extends &amp;quot;layout/default.html&amp;quot; %}
&lt;/pre&gt;
&lt;p&gt;But this behavior can depend on the application embedding Jinja.  Note that
since the child template doesn't define the &lt;tt class="docutils literal"&gt;footer&lt;/tt&gt; block, the value from
the parent template is used instead.&lt;/p&gt;
&lt;p&gt;You can't define multiple &lt;tt class="docutils literal"&gt;{% block %}&lt;/tt&gt; tags with the same name in the
same template.  This limitation exists because a block tag works in &amp;quot;both&amp;quot;
directions.  That is, a block tag doesn't just provide a hole to fill - it
also defines the content that fills the hole in the &lt;em&gt;parent&lt;/em&gt;.  If there
were two similarly-named &lt;tt class="docutils literal"&gt;{% block %}&lt;/tt&gt; tags in a template, that template's
parent wouldn't know which one of the blocks' content to use.&lt;/p&gt;
&lt;p&gt;If you want to print a block multiple times you can however use the special
&lt;cite&gt;self&lt;/cite&gt; variable and call the block with that name:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;title&amp;gt;{% block title %}{% endblock %}&amp;lt;/title&amp;gt;
&amp;lt;h1&amp;gt;{{ self.title() }}&amp;lt;/h1&amp;gt;
{% block body %}{% endblock %}
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="super-blocks"&gt;
&lt;h3&gt;Super Blocks&lt;/h3&gt;
&lt;p&gt;It's possible to render the contents of the parent block by calling &lt;cite&gt;super&lt;/cite&gt;.
This gives back the results of the parent block:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% block sidebar %}
    &amp;lt;h3&amp;gt;Table Of Contents&amp;lt;/h3&amp;gt;
    ...
    {{ super() }}
{% endblock %}
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="named-block-end-tags"&gt;
&lt;h3&gt;Named Block End-Tags&lt;/h3&gt;
&lt;p&gt;Jinja2 allows you to put the name of the block after the end tag for better
readability:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% block sidebar %}
    {% block inner_sidebar %}
        ...
    {% endblock inner_sidebar %}
{% endblock sidebar %}
&lt;/pre&gt;
&lt;p&gt;However the name after the &lt;cite&gt;endblock&lt;/cite&gt; word must match the block name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="block-nesting-and-scope"&gt;
&lt;h3&gt;Block Nesting and Scope&lt;/h3&gt;
&lt;p&gt;Blocks can be nested for more complex layouts.  However per default blocks
may not access variables from outer scopes:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% for item in seq %}
    &amp;lt;li&amp;gt;{% block loop_item %}{{ item }}{% endblock %}&amp;lt;/li&amp;gt;
{% endfor %}
&lt;/pre&gt;
&lt;p&gt;This example would output empty &lt;tt class="docutils literal"&gt;&amp;lt;li&amp;gt;&lt;/tt&gt; items because &lt;cite&gt;item&lt;/cite&gt; is unavailable
inside the block.  The reason for this is that if the block is replaced by
a child template a variable would appear that was not defined in the block or
passed to the context.&lt;/p&gt;
&lt;p&gt;Starting with Jinja 2.2 you can explicitly specify that variables are
available in a block by setting the block to &amp;quot;scoped&amp;quot; by adding the &lt;cite&gt;scoped&lt;/cite&gt;
modifier to a block declaration:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% for item in seq %}
    &amp;lt;li&amp;gt;{% block loop_item scoped %}{{ item }}{% endblock %}&amp;lt;/li&amp;gt;
{% endfor %}
&lt;/pre&gt;
&lt;p&gt;When overriding a block the &lt;cite&gt;scoped&lt;/cite&gt; modifier does not have to be provided.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="template-objects"&gt;
&lt;h3&gt;Template Objects&lt;/h3&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/templates.rst&lt;/tt&gt;, line 415)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;versionchanged&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. versionchanged:: 2.4

&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;If a template object was passed to the template context you can
extend from that object as well.  Assuming the calling code passes
a layout template as &lt;cite&gt;layout_template&lt;/cite&gt; to the environment, this
code works:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% extends layout_template %}
&lt;/pre&gt;
&lt;p&gt;Previously the &lt;cite&gt;layout_template&lt;/cite&gt; variable had to be a string with
the layout template's filename for this to work.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="html-escaping"&gt;
&lt;h2&gt;HTML Escaping&lt;/h2&gt;
&lt;p&gt;When generating HTML from templates, there's always a risk that a variable will
include characters that affect the resulting HTML.  There are two approaches:
manually escaping each variable or automatically escaping everything by default.&lt;/p&gt;
&lt;p&gt;Jinja supports both, but what is used depends on the application configuration.
The default configuaration is no automatic escaping for various reasons:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;escaping everything except of safe values will also mean that Jinja is
escaping variables known to not include HTML such as numbers which is
a huge performance hit.&lt;/li&gt;
&lt;li&gt;The information about the safety of a variable is very fragile.  It could
happen that by coercing safe and unsafe values the return value is double
escaped HTML.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="working-with-manual-escaping"&gt;
&lt;h3&gt;Working with Manual Escaping&lt;/h3&gt;
&lt;p&gt;If manual escaping is enabled it's &lt;strong&gt;your&lt;/strong&gt; responsibility to escape
variables if needed.  What to escape?  If you have a variable that &lt;em&gt;may&lt;/em&gt;
include any of the following chars (&lt;tt class="docutils literal"&gt;&amp;gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&amp;lt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&amp;amp;&lt;/tt&gt;, or &lt;tt class="docutils literal"&gt;&amp;quot;&lt;/tt&gt;) you
&lt;strong&gt;have to&lt;/strong&gt; escape it unless the variable contains well-formed and trusted
HTML.  Escaping works by piping the variable through the &lt;tt class="docutils literal"&gt;|e&lt;/tt&gt; filter:
&lt;tt class="docutils literal"&gt;{{ user.username|e }}&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="working-with-automatic-escaping"&gt;
&lt;h3&gt;Working with Automatic Escaping&lt;/h3&gt;
&lt;p&gt;When automatic escaping is enabled everything is escaped by default except
for values explicitly marked as safe.  Those can either be marked by the
application or in the template by using the &lt;cite&gt;|safe&lt;/cite&gt; filter.  The main
problem with this approach is that Python itself doesn't have the concept
of tainted values so the information if a value is safe or unsafe can get
lost.  If the information is lost escaping will take place which means that
you could end up with double escaped contents.&lt;/p&gt;
&lt;p&gt;Double escaping is easy to avoid however, just rely on the tools Jinja2
provides and don't use builtin Python constructs such as the string modulo
operator.&lt;/p&gt;
&lt;p&gt;Functions returning template data (macros, &lt;cite&gt;super&lt;/cite&gt;, &lt;cite&gt;self.BLOCKNAME&lt;/cite&gt;) return
safe markup always.&lt;/p&gt;
&lt;p&gt;String literals in templates with automatic escaping are considered unsafe
too.  The reason for this is that the safe string is an extension to Python
and not every library will work properly with it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="list-of-control-structures"&gt;
&lt;h2&gt;List of Control Structures&lt;/h2&gt;
&lt;p&gt;A control structure refers to all those things that control the flow of a
program - conditionals (i.e. if/elif/else), for-loops, as well as things like
macros and blocks.  Control structures appear inside &lt;tt class="docutils literal"&gt;{% ... %}&lt;/tt&gt; blocks
in the default syntax.&lt;/p&gt;
&lt;div class="section" id="for"&gt;
&lt;h3&gt;For&lt;/h3&gt;
&lt;p&gt;Loop over each item in a sequence.  For example, to display a list of users
provided in a variable called &lt;cite&gt;users&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;h1&amp;gt;Members&amp;lt;/h1&amp;gt;
&amp;lt;ul&amp;gt;
{% for user in users %}
  &amp;lt;li&amp;gt;{{ user.username|e }}&amp;lt;/li&amp;gt;
{% endfor %}
&amp;lt;/ul&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Inside of a for loop block you can access some special variables:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="31%" /&gt;
&lt;col width="69%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Variable&lt;/th&gt;
&lt;th class="head"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;cite&gt;loop.index&lt;/cite&gt;&lt;/td&gt;
&lt;td&gt;The current iteration of the loop. (1 indexed)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;cite&gt;loop.index0&lt;/cite&gt;&lt;/td&gt;
&lt;td&gt;The current iteration of the loop. (0 indexed)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;cite&gt;loop.revindex&lt;/cite&gt;&lt;/td&gt;
&lt;td&gt;The number of iterations from the end of the loop
(1 indexed)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;cite&gt;loop.revindex0&lt;/cite&gt;&lt;/td&gt;
&lt;td&gt;The number of iterations from the end of the loop
(0 indexed)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;cite&gt;loop.first&lt;/cite&gt;&lt;/td&gt;
&lt;td&gt;True if first iteration.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;cite&gt;loop.last&lt;/cite&gt;&lt;/td&gt;
&lt;td&gt;True if last iteration.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;cite&gt;loop.length&lt;/cite&gt;&lt;/td&gt;
&lt;td&gt;The number of items in the sequence.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;cite&gt;loop.cycle&lt;/cite&gt;&lt;/td&gt;
&lt;td&gt;A helper function to cycle between a list of
sequences.  See the explanation below.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Within a for-loop, it's possible to cycle among a list of strings/variables
each time through the loop by using the special &lt;cite&gt;loop.cycle&lt;/cite&gt; helper:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% for row in rows %}
    &amp;lt;li class=&amp;quot;{{ loop.cycle('odd', 'even') }}&amp;quot;&amp;gt;{{ row }}&amp;lt;/li&amp;gt;
{% endfor %}
&lt;/pre&gt;
&lt;p&gt;With Jinja 2.1 an extra &lt;cite&gt;cycle&lt;/cite&gt; helper exists that allows loop-unbound
cycling.  For more information have a look at the &lt;a href="#id18"&gt;&lt;span class="problematic" id="id19"&gt;:ref:`builtin-globals`&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="system-message" id="id18"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/templates.rst&lt;/tt&gt;, line 532); &lt;em&gt;&lt;a href="#id19"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/div&gt;
&lt;p id="loop-filtering"&gt;Unlike in Python it's not possible to &lt;cite&gt;break&lt;/cite&gt; or &lt;cite&gt;continue&lt;/cite&gt; in a loop.  You
can however filter the sequence during iteration which allows you to skip
items.  The following example skips all the users which are hidden:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% for user in users if not user.hidden %}
    &amp;lt;li&amp;gt;{{ user.username|e }}&amp;lt;/li&amp;gt;
{% endfor %}
&lt;/pre&gt;
&lt;p&gt;The advantage is that the special &lt;cite&gt;loop&lt;/cite&gt; variable will count correctly thus
not counting the users not iterated over.&lt;/p&gt;
&lt;p&gt;If no iteration took place because the sequence was empty or the filtering
removed all the items from the sequence you can render a replacement block
by using &lt;cite&gt;else&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;ul&amp;gt;
{% for user in users %}
    &amp;lt;li&amp;gt;{{ user.username|e }}&amp;lt;/li&amp;gt;
{% else %}
    &amp;lt;li&amp;gt;&amp;lt;em&amp;gt;no users found&amp;lt;/em&amp;gt;&amp;lt;/li&amp;gt;
{% endfor %}
&amp;lt;/ul&amp;gt;
&lt;/pre&gt;
&lt;p&gt;It is also possible to use loops recursively.  This is useful if you are
dealing with recursive data such as sitemaps.  To use loops recursively you
basically have to add the &lt;cite&gt;recursive&lt;/cite&gt; modifier to the loop definition and
call the &lt;cite&gt;loop&lt;/cite&gt; variable with the new iterable where you want to recurse.&lt;/p&gt;
&lt;p&gt;The following example implements a sitemap with recursive loops:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;ul class=&amp;quot;sitemap&amp;quot;&amp;gt;
{%- for item in sitemap recursive %}
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{ item.href|e }}&amp;quot;&amp;gt;{{ item.title }}&amp;lt;/a&amp;gt;
    {%- if item.children -%}
        &amp;lt;ul class=&amp;quot;submenu&amp;quot;&amp;gt;{{ loop(item.children) }}&amp;lt;/ul&amp;gt;
    {%- endif %}&amp;lt;/li&amp;gt;
{%- endfor %}
&amp;lt;/ul&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="if"&gt;
&lt;h3&gt;If&lt;/h3&gt;
&lt;p&gt;The &lt;cite&gt;if&lt;/cite&gt; statement in Jinja is comparable with the if statements of Python.
In the simplest form you can use it to test if a variable is defined, not
empty or not false:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% if users %}
&amp;lt;ul&amp;gt;
{% for user in users %}
    &amp;lt;li&amp;gt;{{ user.username|e }}&amp;lt;/li&amp;gt;
{% endfor %}
&amp;lt;/ul&amp;gt;
{% endif %}
&lt;/pre&gt;
&lt;p&gt;For multiple branches &lt;cite&gt;elif&lt;/cite&gt; and &lt;cite&gt;else&lt;/cite&gt; can be used like in Python.  You can
use more complex &lt;a href="#id20"&gt;&lt;span class="problematic" id="id21"&gt;:ref:`expressions`&lt;/span&gt;&lt;/a&gt; there too:&lt;/p&gt;
&lt;div class="system-message" id="id20"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/templates.rst&lt;/tt&gt;, line 592); &lt;em&gt;&lt;a href="#id21"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/div&gt;
&lt;pre class="literal-block"&gt;
{% if kenny.sick %}
    Kenny is sick.
{% elif kenny.dead %}
    You killed Kenny!  You bastard!!!
{% else %}
    Kenny looks okay --- so far
{% endif %}
&lt;/pre&gt;
&lt;p&gt;If can also be used as &lt;a href="#id22"&gt;&lt;span class="problematic" id="id23"&gt;:ref:`inline expression &amp;lt;if-expression&amp;gt;`&lt;/span&gt;&lt;/a&gt; and for
&lt;a href="#id24"&gt;&lt;span class="problematic" id="id25"&gt;:ref:`loop filtering &amp;lt;loop-filtering&amp;gt;`&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="system-message" id="id22"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/templates.rst&lt;/tt&gt;, line 603); &lt;em&gt;&lt;a href="#id23"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/div&gt;
&lt;div class="system-message" id="id24"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/templates.rst&lt;/tt&gt;, line 603); &lt;em&gt;&lt;a href="#id25"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="macros"&gt;
&lt;h3&gt;Macros&lt;/h3&gt;
&lt;p&gt;Macros are comparable with functions in regular programming languages.  They
are useful to put often used idioms into reusable functions to not repeat
yourself.&lt;/p&gt;
&lt;p&gt;Here a small example of a macro that renders a form element:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% macro input(name, value='', type='text', size=20) -%}
    &amp;lt;input type=&amp;quot;{{ type }}&amp;quot; name=&amp;quot;{{ name }}&amp;quot; value=&amp;quot;{{
        value|e }}&amp;quot; size=&amp;quot;{{ size }}&amp;quot;&amp;gt;
{%- endmacro %}
&lt;/pre&gt;
&lt;p&gt;The macro can then be called like a function in the namespace:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;p&amp;gt;{{ input('username') }}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;{{ input('password', type='password') }}&amp;lt;/p&amp;gt;
&lt;/pre&gt;
&lt;p&gt;If the macro was defined in a different template you have to
&lt;a href="#id26"&gt;&lt;span class="problematic" id="id27"&gt;:ref:`import &amp;lt;import&amp;gt;`&lt;/span&gt;&lt;/a&gt; it first.&lt;/p&gt;
&lt;div class="system-message" id="id26"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/templates.rst&lt;/tt&gt;, line 626); &lt;em&gt;&lt;a href="#id27"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/div&gt;
&lt;p&gt;Inside macros you have access to three special variables:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;cite&gt;varargs&lt;/cite&gt;&lt;/dt&gt;
&lt;dd&gt;If more positional arguments are passed to the macro than accepted by the
macro they end up in the special &lt;cite&gt;varargs&lt;/cite&gt; variable as list of values.&lt;/dd&gt;
&lt;dt&gt;&lt;cite&gt;kwargs&lt;/cite&gt;&lt;/dt&gt;
&lt;dd&gt;Like &lt;cite&gt;varargs&lt;/cite&gt; but for keyword arguments.  All unconsumed keyword
arguments are stored in this special variable.&lt;/dd&gt;
&lt;dt&gt;&lt;cite&gt;caller&lt;/cite&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;If the macro was called from a &lt;a href="#id28"&gt;&lt;span class="problematic" id="id29"&gt;:ref:`call&amp;lt;call&amp;gt;`&lt;/span&gt;&lt;/a&gt; tag the caller is stored
in this variable as macro which can be called.&lt;/p&gt;
&lt;div class="last system-message" id="id28"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/templates.rst&lt;/tt&gt;, line 640); &lt;em&gt;&lt;a href="#id29"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Macros also expose some of their internal details.  The following attributes
are available on a macro object:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;cite&gt;name&lt;/cite&gt;&lt;/dt&gt;
&lt;dd&gt;The name of the macro.  &lt;tt class="docutils literal"&gt;{{ input.name }}&lt;/tt&gt; will print &lt;tt class="docutils literal"&gt;input&lt;/tt&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;cite&gt;arguments&lt;/cite&gt;&lt;/dt&gt;
&lt;dd&gt;A tuple of the names of arguments the macro accepts.&lt;/dd&gt;
&lt;dt&gt;&lt;cite&gt;defaults&lt;/cite&gt;&lt;/dt&gt;
&lt;dd&gt;A tuple of default values.&lt;/dd&gt;
&lt;dt&gt;&lt;cite&gt;catch_kwargs&lt;/cite&gt;&lt;/dt&gt;
&lt;dd&gt;This is &lt;cite&gt;true&lt;/cite&gt; if the macro accepts extra keyword arguments (ie: accesses
the special &lt;cite&gt;kwargs&lt;/cite&gt; variable).&lt;/dd&gt;
&lt;dt&gt;&lt;cite&gt;catch_varargs&lt;/cite&gt;&lt;/dt&gt;
&lt;dd&gt;This is &lt;cite&gt;true&lt;/cite&gt; if the macro accepts extra positional arguments (ie:
accesses the special &lt;cite&gt;varargs&lt;/cite&gt; variable).&lt;/dd&gt;
&lt;dt&gt;&lt;cite&gt;caller&lt;/cite&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;This is &lt;cite&gt;true&lt;/cite&gt; if the macro accesses the special &lt;cite&gt;caller&lt;/cite&gt; variable and may
be called from a &lt;a href="#id30"&gt;&lt;span class="problematic" id="id31"&gt;:ref:`call&amp;lt;call&amp;gt;`&lt;/span&gt;&lt;/a&gt; tag.&lt;/p&gt;
&lt;div class="last system-message" id="id30"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/templates.rst&lt;/tt&gt;, line 664); &lt;em&gt;&lt;a href="#id31"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;If a macro name starts with an underscore it's not exported and can't
be imported.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id32"&gt;
&lt;span id="call"&gt;&lt;/span&gt;&lt;h3&gt;Call&lt;/h3&gt;
&lt;p&gt;In some cases it can be useful to pass a macro to another macro.  For this
purpose you can use the special &lt;cite&gt;call&lt;/cite&gt; block.  The following example shows
a macro that takes advantage of the call functionality and how it can be
used:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% macro render_dialog(title, class='dialog') -%}
    &amp;lt;div class=&amp;quot;{{ class }}&amp;quot;&amp;gt;
        &amp;lt;h2&amp;gt;{{ title }}&amp;lt;/h2&amp;gt;
        &amp;lt;div class=&amp;quot;contents&amp;quot;&amp;gt;
            {{ caller() }}
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
{%- endmacro %}

{% call render_dialog('Hello World') %}
    This is a simple dialog rendered by using a macro and
    a call block.
{% endcall %}
&lt;/pre&gt;
&lt;p&gt;It's also possible to pass arguments back to the call block.  This makes it
useful as replacement for loops.  Generally speaking a call block works
exactly like an macro, just that it doesn't have a name.&lt;/p&gt;
&lt;p&gt;Here an example of how a call block can be used with arguments:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% macro dump_users(users) -%}
    &amp;lt;ul&amp;gt;
    {%- for user in users %}
        &amp;lt;li&amp;gt;&amp;lt;p&amp;gt;{{ user.username|e }}&amp;lt;/p&amp;gt;{{ caller(user) }}&amp;lt;/li&amp;gt;
    {%- endfor %}
    &amp;lt;/ul&amp;gt;
{%- endmacro %}

{% call(user) dump_users(list_of_user) %}
    &amp;lt;dl&amp;gt;
        &amp;lt;dl&amp;gt;Realname&amp;lt;/dl&amp;gt;
        &amp;lt;dd&amp;gt;{{ user.realname|e }}&amp;lt;/dd&amp;gt;
        &amp;lt;dl&amp;gt;Description&amp;lt;/dl&amp;gt;
        &amp;lt;dd&amp;gt;{{ user.description }}&amp;lt;/dd&amp;gt;
    &amp;lt;/dl&amp;gt;
{% endcall %}
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id33"&gt;
&lt;h3&gt;Filters&lt;/h3&gt;
&lt;p&gt;Filter sections allow you to apply regular Jinja2 filters on a block of
template data.  Just wrap the code in the special &lt;cite&gt;filter&lt;/cite&gt; section:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% filter upper %}
    This text becomes uppercase
{% endfilter %}
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="assignments"&gt;
&lt;h3&gt;Assignments&lt;/h3&gt;
&lt;p&gt;Inside code blocks you can also assign values to variables.  Assignments at
top level (outside of blocks, macros or loops) are exported from the template
like top level macros and can be imported by other templates.&lt;/p&gt;
&lt;p&gt;Assignments use the &lt;cite&gt;set&lt;/cite&gt; tag and can have multiple targets:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% set navigation = [('index.html', 'Index'), ('about.html', 'About')] %}
{% set key, value = call_something() %}
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="extends"&gt;
&lt;h3&gt;Extends&lt;/h3&gt;
&lt;p&gt;The &lt;cite&gt;extends&lt;/cite&gt; tag can be used to extend a template from another one.  You
can have multiple of them in a file but only one of them may be executed
at the time.  See the section about &lt;a href="#id34"&gt;&lt;span class="problematic" id="id35"&gt;:ref:`template-inheritance`&lt;/span&gt;&lt;/a&gt; above.&lt;/p&gt;
&lt;div class="system-message" id="id34"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/templates.rst&lt;/tt&gt;, line 746); &lt;em&gt;&lt;a href="#id35"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="block"&gt;
&lt;h3&gt;Block&lt;/h3&gt;
&lt;p&gt;Blocks are used for inheritance and act as placeholders and replacements
at the same time.  They are documented in detail as part of the section
about &lt;a href="#id36"&gt;&lt;span class="problematic" id="id37"&gt;:ref:`template-inheritance`&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="system-message" id="id36"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/templates.rst&lt;/tt&gt;, line 754); &lt;em&gt;&lt;a href="#id37"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="include"&gt;
&lt;h3&gt;Include&lt;/h3&gt;
&lt;p&gt;The &lt;cite&gt;include&lt;/cite&gt; statement is useful to include a template and return the
rendered contents of that file into the current namespace:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% include 'header.html' %}
    Body
{% include 'footer.html' %}
&lt;/pre&gt;
&lt;p&gt;Included templates have access to the variables of the active context by
default.  For more details about context behavior of imports and includes
see &lt;a href="#id38"&gt;&lt;span class="problematic" id="id39"&gt;:ref:`import-visibility`&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="system-message" id="id38"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/templates.rst&lt;/tt&gt;, line 769); &lt;em&gt;&lt;a href="#id39"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/div&gt;
&lt;p&gt;From Jinja 2.2 onwards you can mark an include with &lt;tt class="docutils literal"&gt;ignore missing&lt;/tt&gt; in
which case Jinja will ignore the statement if the template to be ignored
does not exist.  When combined with &lt;tt class="docutils literal"&gt;with&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;without context&lt;/tt&gt; it has
to be placed &lt;em&gt;before&lt;/em&gt; the context visibility statement.  Here some valid
examples:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% include &amp;quot;sidebar.html&amp;quot; ignore missing %}
{% include &amp;quot;sidebar.html&amp;quot; ignore missing with context %}
{% include &amp;quot;sidebar.html&amp;quot; ignore missing without context %}
&lt;/pre&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/templates.rst&lt;/tt&gt;, line 783)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;versionadded&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. versionadded:: 2.2

&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;You can also provide a list of templates that are checked for existence
before inclusion.  The first template that exists will be included.  If
&lt;cite&gt;ignore missing&lt;/cite&gt; is given, it will fall back to rendering nothing if
none of the templates exist, otherwise it will raise an exception.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% include ['page_detailed.html', 'page.html'] %}
{% include ['special_sidebar.html', 'sidebar.html'] ignore missing %}
&lt;/pre&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/templates.rst&lt;/tt&gt;, line 795)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;versionchanged&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. versionchanged:: 2.4
   If a template object was passed to the template context you can
   include that object using `include`.

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id40"&gt;
&lt;span id="import"&gt;&lt;/span&gt;&lt;h3&gt;Import&lt;/h3&gt;
&lt;p&gt;Jinja2 supports putting often used code into macros.  These macros can go into
different templates and get imported from there.  This works similar to the
import statements in Python.  It's important to know that imports are cached
and imported templates don't have access to the current template variables,
just the globals by defualt.  For more details about context behavior of
imports and includes see &lt;a href="#id41"&gt;&lt;span class="problematic" id="id42"&gt;:ref:`import-visibility`&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="system-message" id="id41"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/templates.rst&lt;/tt&gt;, line 804); &lt;em&gt;&lt;a href="#id42"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/div&gt;
&lt;p&gt;There are two ways to import templates.  You can import the complete template
into a variable or request specific macros / exported variables from it.&lt;/p&gt;
&lt;p&gt;Imagine we have a helper module that renders forms (called &lt;cite&gt;forms.html&lt;/cite&gt;):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% macro input(name, value='', type='text') -%}
    &amp;lt;input type=&amp;quot;{{ type }}&amp;quot; value=&amp;quot;{{ value|e }}&amp;quot; name=&amp;quot;{{ name }}&amp;quot;&amp;gt;
{%- endmacro %}

{%- macro textarea(name, value='', rows=10, cols=40) -%}
    &amp;lt;textarea name=&amp;quot;{{ name }}&amp;quot; rows=&amp;quot;{{ rows }}&amp;quot; cols=&amp;quot;{{ cols
        }}&amp;quot;&amp;gt;{{ value|e }}&amp;lt;/textarea&amp;gt;
{%- endmacro %}
&lt;/pre&gt;
&lt;p&gt;The easiest and most flexible is importing the whole module into a variable.
That way you can access the attributes:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% import 'forms.html' as forms %}
&amp;lt;dl&amp;gt;
    &amp;lt;dt&amp;gt;Username&amp;lt;/dt&amp;gt;
    &amp;lt;dd&amp;gt;{{ forms.input('username') }}&amp;lt;/dd&amp;gt;
    &amp;lt;dt&amp;gt;Password&amp;lt;/dt&amp;gt;
    &amp;lt;dd&amp;gt;{{ forms.input('password', type='password') }}&amp;lt;/dd&amp;gt;
&amp;lt;/dl&amp;gt;
&amp;lt;p&amp;gt;{{ forms.textarea('comment') }}&amp;lt;/p&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Alternatively you can import names from the template into the current
namespace:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% from 'forms.html' import input as input_field, textarea %}
&amp;lt;dl&amp;gt;
    &amp;lt;dt&amp;gt;Username&amp;lt;/dt&amp;gt;
    &amp;lt;dd&amp;gt;{{ input_field('username') }}&amp;lt;/dd&amp;gt;
    &amp;lt;dt&amp;gt;Password&amp;lt;/dt&amp;gt;
    &amp;lt;dd&amp;gt;{{ input_field('password', type='password') }}&amp;lt;/dd&amp;gt;
&amp;lt;/dl&amp;gt;
&amp;lt;p&amp;gt;{{ textarea('comment') }}&amp;lt;/p&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Macros and variables starting with one ore more underscores are private and
cannot be imported.&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/templates.rst&lt;/tt&gt;, line 853)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;versionchanged&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. versionchanged:: 2.4
   If a template object was passed to the template context you can
   import from that object.


&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="import-context-behavior"&gt;
&lt;span id="import-visibility"&gt;&lt;/span&gt;&lt;h2&gt;Import Context Behavior&lt;/h2&gt;
&lt;p&gt;Per default included templates are passed the current context and imported
templates not.  The reason for this is that imports unlike includes are
cached as imports are often used just as a module that holds macros.&lt;/p&gt;
&lt;p&gt;This however can be changed of course explicitly.  By adding &lt;cite&gt;with context&lt;/cite&gt;
or &lt;cite&gt;without context&lt;/cite&gt; to the import/include directive the current context
can be passed to the template and caching is disabled automatically.&lt;/p&gt;
&lt;p&gt;Here two examples:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% from 'forms.html' import input with context %}
{% include 'header.html' without context %}
&lt;/pre&gt;
&lt;div class="admonition-note admonition"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;In Jinja 2.0 the context that was passed to the included template
did not include variables defined in the template.  As a matter of
fact this did not work:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% for box in boxes %}
    {% include &amp;quot;render_box.html&amp;quot; %}
{% endfor %}
&lt;/pre&gt;
&lt;p class="last"&gt;The included template &lt;tt class="docutils literal"&gt;render_box.html&lt;/tt&gt; is &lt;em&gt;not&lt;/em&gt; able to access
&lt;cite&gt;box&lt;/cite&gt; in Jinja 2.0. As of Jinja 2.1 &lt;tt class="docutils literal"&gt;render_box.html&lt;/tt&gt; &lt;em&gt;is&lt;/em&gt; able
to do so.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id43"&gt;
&lt;span id="expressions"&gt;&lt;/span&gt;&lt;h2&gt;Expressions&lt;/h2&gt;
&lt;p&gt;Jinja allows basic expressions everywhere.  These work very similar to regular
Python and even if you're not working with Python you should feel comfortable
with it.&lt;/p&gt;
&lt;div class="section" id="literals"&gt;
&lt;h3&gt;Literals&lt;/h3&gt;
&lt;p&gt;The simplest form of expressions are literals.  Literals are representations
for Python objects such as strings and numbers.  The following literals exist:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&amp;quot;Hello World&amp;quot;:&lt;/dt&gt;
&lt;dd&gt;Everything between two double or single quotes is a string.  They are
useful whenever you need a string in the template (for example as
arguments to function calls, filters or just to extend or include a
template).&lt;/dd&gt;
&lt;dt&gt;42 / 42.23:&lt;/dt&gt;
&lt;dd&gt;Integers and floating point numbers are created by just writing the
number down.  If a dot is present the number is a float, otherwise an
integer.  Keep in mind that for Python &lt;tt class="docutils literal"&gt;42&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;42.0&lt;/tt&gt; is something
different.&lt;/dd&gt;
&lt;dt&gt;['list', 'of', 'objects']:&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Everything between two brackets is a list.  Lists are useful to store
sequential data in or to iterate over them.  For example you can easily
create a list of links using lists and tuples with a for loop:&lt;/p&gt;
&lt;pre class="last literal-block"&gt;
&amp;lt;ul&amp;gt;
{% for href, caption in [('index.html', 'Index'), ('about.html', 'About'),
                         ('downloads.html', 'Downloads')] %}
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{ href }}&amp;quot;&amp;gt;{{ caption }}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
{% endfor %}
&amp;lt;/ul&amp;gt;
&lt;/pre&gt;
&lt;/dd&gt;
&lt;dt&gt;('tuple', 'of', 'values'):&lt;/dt&gt;
&lt;dd&gt;Tuples are like lists, just that you can't modify them.  If the tuple
only has one item you have to end it with a comma.  Tuples are usually
used to represent items of two or more elements.  See the example above
for more details.&lt;/dd&gt;
&lt;dt&gt;{'dict': 'of', 'key': 'and', 'value': 'pairs'}:&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;A dict in Python is a structure that combines keys and values.  Keys must
be unique and always have exactly one value.  Dicts are rarely used in
templates, they are useful in some rare cases such as the &lt;a href="#id44"&gt;&lt;span class="problematic" id="id45"&gt;:func:`xmlattr`&lt;/span&gt;&lt;/a&gt;
filter.&lt;/p&gt;
&lt;div class="last system-message" id="id44"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/templates.rst&lt;/tt&gt;, line 937); &lt;em&gt;&lt;a href="#id45"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;func&amp;quot;.&lt;/div&gt;
&lt;/dd&gt;
&lt;dt&gt;true / false:&lt;/dt&gt;
&lt;dd&gt;true is always true and false is always false.&lt;/dd&gt;
&lt;/dl&gt;
&lt;div class="admonition-note admonition"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;The special constants &lt;cite&gt;true&lt;/cite&gt;, &lt;cite&gt;false&lt;/cite&gt; and &lt;cite&gt;none&lt;/cite&gt; are indeed lowercase.
Because that caused confusion in the past, when writing &lt;cite&gt;True&lt;/cite&gt; expands
to an undefined variable that is considered false, all three of them can
be written in title case too (&lt;cite&gt;True&lt;/cite&gt;, &lt;cite&gt;False&lt;/cite&gt;, and &lt;cite&gt;None&lt;/cite&gt;).  However for
consistency (all Jinja identifiers are lowercase) you should use the
lowercase versions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="math"&gt;
&lt;h3&gt;Math&lt;/h3&gt;
&lt;p&gt;Jinja allows you to calculate with values.  This is rarely useful in templates
but exists for completeness' sake.  The following operators are supported:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;+&lt;/dt&gt;
&lt;dd&gt;Adds two objects together.  Usually the objects are numbers but if both are
strings or lists you can concatenate them this way.  This however is not
the preferred way to concatenate strings!  For string concatenation have
a look at the &lt;tt class="docutils literal"&gt;~&lt;/tt&gt; operator.  &lt;tt class="docutils literal"&gt;{{ 1 + 1 }}&lt;/tt&gt; is &lt;tt class="docutils literal"&gt;2&lt;/tt&gt;.&lt;/dd&gt;
&lt;dt&gt;-&lt;/dt&gt;
&lt;dd&gt;Substract the second number from the first one.  &lt;tt class="docutils literal"&gt;{{ 3 - 2 }}&lt;/tt&gt; is &lt;tt class="docutils literal"&gt;1&lt;/tt&gt;.&lt;/dd&gt;
&lt;/dl&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;/&lt;/dt&gt;
&lt;dd&gt;Divide two numbers.  The return value will be a floating point number.
&lt;tt class="docutils literal"&gt;{{ 1 / 2 }}&lt;/tt&gt; is &lt;tt class="docutils literal"&gt;{{ 0.5 }}&lt;/tt&gt;.&lt;/dd&gt;
&lt;/dl&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;//&lt;/dt&gt;
&lt;dd&gt;Divide two numbers and return the truncated integer result.
&lt;tt class="docutils literal"&gt;{{ 20 // 7 }}&lt;/tt&gt; is &lt;tt class="docutils literal"&gt;2&lt;/tt&gt;.&lt;/dd&gt;
&lt;/dl&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;%&lt;/dt&gt;
&lt;dd&gt;Calculate the remainder of an integer division.  &lt;tt class="docutils literal"&gt;{{ 11 % 7 }}&lt;/tt&gt; is &lt;tt class="docutils literal"&gt;4&lt;/tt&gt;.&lt;/dd&gt;
&lt;dt&gt;*&lt;/dt&gt;
&lt;dd&gt;Multiply the left operand with the right one.  &lt;tt class="docutils literal"&gt;{{ 2 * 2 }}&lt;/tt&gt; would
return &lt;tt class="docutils literal"&gt;4&lt;/tt&gt;.  This can also be used to repeat a string multiple times.
&lt;tt class="docutils literal"&gt;{{ '=' * 80 }}&lt;/tt&gt; would print a bar of 80 equal signs.&lt;/dd&gt;
&lt;dt&gt;**&lt;/dt&gt;
&lt;dd&gt;Raise the left operand to the power of the right operand.  &lt;tt class="docutils literal"&gt;{{ &lt;span class="pre"&gt;2**3&lt;/span&gt; }}&lt;/tt&gt;
would return &lt;tt class="docutils literal"&gt;8&lt;/tt&gt;.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="comparisons"&gt;
&lt;h3&gt;Comparisons&lt;/h3&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;==&lt;/dt&gt;
&lt;dd&gt;Compares two objects for equality.&lt;/dd&gt;
&lt;dt&gt;!=&lt;/dt&gt;
&lt;dd&gt;Compares two objects for inequality.&lt;/dd&gt;
&lt;/dl&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&amp;gt;&lt;/dt&gt;
&lt;dd&gt;&lt;cite&gt;true&lt;/cite&gt; if the left hand side is greater than the right hand side.&lt;/dd&gt;
&lt;dt&gt;&amp;gt;=&lt;/dt&gt;
&lt;dd&gt;&lt;cite&gt;true&lt;/cite&gt; if the left hand side is greater or equal to the right hand side.&lt;/dd&gt;
&lt;/dl&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&amp;lt;&lt;/dt&gt;
&lt;dd&gt;&lt;cite&gt;true&lt;/cite&gt; if the left hand side is lower than the right hand side.&lt;/dd&gt;
&lt;dt&gt;&amp;lt;=&lt;/dt&gt;
&lt;dd&gt;&lt;cite&gt;true&lt;/cite&gt; if the left hand side is lower or equal to the right hand side.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="logic"&gt;
&lt;h3&gt;Logic&lt;/h3&gt;
&lt;p&gt;For &lt;cite&gt;if&lt;/cite&gt; statements, &lt;cite&gt;for&lt;/cite&gt; filtering or &lt;cite&gt;if&lt;/cite&gt; expressions it can be useful to
combine multiple expressions:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;and&lt;/dt&gt;
&lt;dd&gt;Return true if the left and the right operand is true.&lt;/dd&gt;
&lt;dt&gt;or&lt;/dt&gt;
&lt;dd&gt;Return true if the left or the right operand is true.&lt;/dd&gt;
&lt;dt&gt;not&lt;/dt&gt;
&lt;dd&gt;negate a statement (see below).&lt;/dd&gt;
&lt;dt&gt;(expr)&lt;/dt&gt;
&lt;dd&gt;group an expression.&lt;/dd&gt;
&lt;/dl&gt;
&lt;div class="admonition-note admonition"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;The &lt;tt class="docutils literal"&gt;is&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;in&lt;/tt&gt; operators support negation using an infix notation
too: &lt;tt class="docutils literal"&gt;foo is not bar&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;foo not in bar&lt;/tt&gt; instead of &lt;tt class="docutils literal"&gt;not foo is bar&lt;/tt&gt;
and &lt;tt class="docutils literal"&gt;not foo in bar&lt;/tt&gt;.  All other expressions require a prefix notation:
&lt;tt class="docutils literal"&gt;not (foo and bar).&lt;/tt&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="other-operators"&gt;
&lt;h3&gt;Other Operators&lt;/h3&gt;
&lt;p&gt;The following operators are very useful but don't fit into any of the other
two categories:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;in&lt;/dt&gt;
&lt;dd&gt;Perform sequence / mapping containment test.  Returns true if the left
operand is contained in the right.  &lt;tt class="docutils literal"&gt;{{ 1 in [1, 2, 3] }}&lt;/tt&gt; would for
example return true.&lt;/dd&gt;
&lt;dt&gt;is&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Performs a &lt;a href="#id46"&gt;&lt;span class="problematic" id="id47"&gt;:ref:`test &amp;lt;tests&amp;gt;`&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="last system-message" id="id46"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/templates.rst&lt;/tt&gt;, line 1048); &lt;em&gt;&lt;a href="#id47"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/div&gt;
&lt;/dd&gt;
&lt;dt&gt;|&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Applies a &lt;a href="#id48"&gt;&lt;span class="problematic" id="id49"&gt;:ref:`filter &amp;lt;filters&amp;gt;`&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="last system-message" id="id48"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/templates.rst&lt;/tt&gt;, line 1051); &lt;em&gt;&lt;a href="#id49"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;~&lt;/dt&gt;
&lt;dd&gt;Converts all operands into strings and concatenates them.
&lt;tt class="docutils literal"&gt;{{ &amp;quot;Hello &amp;quot; ~ name ~ &amp;quot;!&amp;quot; }}&lt;/tt&gt; would return (assuming &lt;cite&gt;name&lt;/cite&gt; is
&lt;tt class="docutils literal"&gt;'John'&lt;/tt&gt;) &lt;tt class="docutils literal"&gt;Hello John!&lt;/tt&gt;.&lt;/dd&gt;
&lt;dt&gt;()&lt;/dt&gt;
&lt;dd&gt;Call a callable: &lt;tt class="docutils literal"&gt;{{ post.render() }}&lt;/tt&gt;.  Inside of the parentheses you
can use positional arguments and keyword arguments like in python:
&lt;tt class="docutils literal"&gt;{{ post.render(user, full=true) }}&lt;/tt&gt;.&lt;/dd&gt;
&lt;dt&gt;. / []&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Get an attribute of an object.  (See &lt;a href="#id50"&gt;&lt;span class="problematic" id="id51"&gt;:ref:`variables`&lt;/span&gt;&lt;/a&gt;)&lt;/p&gt;
&lt;div class="last system-message" id="id50"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/templates.rst&lt;/tt&gt;, line 1064); &lt;em&gt;&lt;a href="#id51"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="id52"&gt;
&lt;span id="if-expression"&gt;&lt;/span&gt;&lt;h3&gt;If Expression&lt;/h3&gt;
&lt;p&gt;It is also possible to use inline &lt;cite&gt;if&lt;/cite&gt; expressions.  These are useful in some
situations.  For example you can use this to extend from one template if a
variable is defined, otherwise from the default layout template:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% extends layout_template if layout_template is defined else 'master.html' %}
&lt;/pre&gt;
&lt;p&gt;The general syntax is &lt;tt class="docutils literal"&gt;&amp;lt;do something&amp;gt; if &amp;lt;something is true&amp;gt; else &amp;lt;do
something else&amp;gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;cite&gt;else&lt;/cite&gt; part is optional.  If not provided the else block implicitly
evaluates into an undefined object:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{{ '[%s]' % page.title if page.title }}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="list-of-builtin-filters"&gt;
&lt;span id="builtin-filters"&gt;&lt;/span&gt;&lt;h2&gt;List of Builtin Filters&lt;/h2&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/templates.rst&lt;/tt&gt;, line 1092)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;jinjafilters&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. jinjafilters::


&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="list-of-builtin-tests"&gt;
&lt;span id="builtin-tests"&gt;&lt;/span&gt;&lt;h2&gt;List of Builtin Tests&lt;/h2&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/templates.rst&lt;/tt&gt;, line 1100)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;jinjatests&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. jinjatests::

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="list-of-global-functions"&gt;
&lt;span id="builtin-globals"&gt;&lt;/span&gt;&lt;h2&gt;List of Global Functions&lt;/h2&gt;
&lt;p&gt;The following functions are available in the global scope by default:&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/templates.rst&lt;/tt&gt;, line 1109)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;function&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. function:: range([start,] stop[, step])

    Return a list containing an arithmetic progression of integers.
    range(i, j) returns [i, i+1, i+2, ..., j-1]; start (!) defaults to 0.
    When step is given, it specifies the increment (or decrement).
    For example, range(4) returns [0, 1, 2, 3].  The end point is omitted!
    These are exactly the valid indices for a list of 4 elements.

    This is useful to repeat a template block multiple times for example
    to fill a list.  Imagine you have 7 users in the list but you want to
    render three empty items to enforce a height with CSS::

        &amp;lt;ul&amp;gt;
        {% for user in users %}
            &amp;lt;li&amp;gt;{{ user.username }}&amp;lt;/li&amp;gt;
        {% endfor %}
        {% for number in range(10 - users|count) %}
            &amp;lt;li class=&amp;quot;empty&amp;quot;&amp;gt;&amp;lt;span&amp;gt;...&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
        {% endfor %}
        &amp;lt;/ul&amp;gt;

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/templates.rst&lt;/tt&gt;, line 1130)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;function&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. function:: lipsum(n=5, html=True, min=20, max=100)

    Generates some lorem ipsum for the template.  Per default five paragraphs
    with HTML are generated each paragraph between 20 and 100 words.  If html
    is disabled regular text is returned.  This is useful to generate simple
    contents for layout testing.

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/templates.rst&lt;/tt&gt;, line 1137)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;function&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. function:: dict(\**items)

    A convenient alternative to dict literals.  ``{'foo': 'bar'}`` is the same
    as ``dict(foo='bar')``.

&lt;/pre&gt;
&lt;/div&gt;
&lt;p class="cycler-items"&gt;The cycler allows you to cycle among values similar to how &lt;cite&gt;loop.cycle&lt;/cite&gt;
works.  Unlike &lt;cite&gt;loop.cycle&lt;/cite&gt; however you can use this cycler outside of
loops or over multiple loops.&lt;/p&gt;
&lt;p class="cycler-items"&gt;This is for example very useful if you want to show a list of folders and
files, with the folders on top, but both in the same list with alternating
row colors.&lt;/p&gt;
&lt;p class="cycler-items"&gt;The following example shows how &lt;cite&gt;cycler&lt;/cite&gt; can be used:&lt;/p&gt;
&lt;pre class="cycler-items literal-block"&gt;
{% set row_class = cycler('odd', 'even') %}
&amp;lt;ul class=&amp;quot;browser&amp;quot;&amp;gt;
{% for folder in folders %}
  &amp;lt;li class=&amp;quot;folder {{ row_class.next() }}&amp;quot;&amp;gt;{{ folder|e }}&amp;lt;/li&amp;gt;
{% endfor %}
{% for filename in files %}
  &amp;lt;li class=&amp;quot;file {{ row_class.next() }}&amp;quot;&amp;gt;{{ filename|e }}&amp;lt;/li&amp;gt;
{% endfor %}
&amp;lt;/ul&amp;gt;
&lt;/pre&gt;
&lt;p class="cycler-items"&gt;A cycler has the following attributes and methods:&lt;/p&gt;
&lt;div class="cycler-items system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/templates.rst&lt;/tt&gt;, line 1166)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;method&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. method:: reset()

    Resets the cycle to the first item.

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="cycler-items system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/templates.rst&lt;/tt&gt;, line 1170)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;method&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. method:: next()

    Goes one item a head and returns the then current item.

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="cycler-items system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/templates.rst&lt;/tt&gt;, line 1174)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;attribute&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. attribute:: current

    Returns the current item.

&lt;/pre&gt;
&lt;/div&gt;
&lt;p class="cycler-items"&gt;&lt;strong&gt;new in Jinja 2.1&lt;/strong&gt;&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/templates.rst&lt;/tt&gt;, line 1180)&lt;/p&gt;
&lt;p&gt;Invalid class attribute value for &amp;quot;class&amp;quot; directive: &amp;quot;joiner(sep=', ')&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. class:: joiner(sep=', ')

    A tiny helper that can be use to &amp;quot;join&amp;quot; multiple sections.  A joiner is
    passed a string and will return that string every time it's calld, except
    the first time in which situation it returns an empty string.  You can
    use this to join things::

        {% set pipe = joiner(&amp;quot;|&amp;quot;) %}
        {% if categories %} {{ pipe() }}
            Categories: {{ categories|join(&amp;quot;, &amp;quot;) }}
        {% endif %}
        {% if author %} {{ pipe() }}
            Author: {{ author() }}
        {% endif %}
        {% if can_edit %} {{ pipe() }}
            &amp;lt;a href=&amp;quot;?action=edit&amp;quot;&amp;gt;Edit&amp;lt;/a&amp;gt;
        {% endif %}

    **new in Jinja 2.1**


&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="extensions"&gt;
&lt;h2&gt;Extensions&lt;/h2&gt;
&lt;p&gt;The following sections cover the built-in Jinja2 extensions that may be
enabled by the application.  The application could also provide further
extensions not covered by this documentation.  In that case there should
be a separate document explaining the extensions.&lt;/p&gt;
&lt;div class="section" id="i18n"&gt;
&lt;span id="i18n-in-templates"&gt;&lt;/span&gt;&lt;h3&gt;i18n&lt;/h3&gt;
&lt;p&gt;If the i18n extension is enabled it's possible to mark parts in the template
as translatable.  To mark a section as translatable you can use &lt;cite&gt;trans&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;p&amp;gt;{% trans %}Hello {{ user }}!{% endtrans %}&amp;lt;/p&amp;gt;
&lt;/pre&gt;
&lt;p&gt;To translate a template expression --- say, using template filters or just
accessing an attribute of an object --- you need to bind the expression to a
name for use within the translation block:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;p&amp;gt;{% trans user=user.username %}Hello {{ user }}!{% endtrans %}&amp;lt;/p&amp;gt;
&lt;/pre&gt;
&lt;p&gt;If you need to bind more than one expression inside a &lt;cite&gt;trans&lt;/cite&gt; tag, separate
the pieces with a comma (&lt;tt class="docutils literal"&gt;,&lt;/tt&gt;):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% trans book_title=book.title, author=author.name %}
This is {{ book_title }} by {{ author }}
{% endtrans %}
&lt;/pre&gt;
&lt;p&gt;Inside trans tags no statements are allowed, only variable tags are.&lt;/p&gt;
&lt;p&gt;To pluralize, specify both the singular and plural forms with the &lt;cite&gt;pluralize&lt;/cite&gt;
tag, which appears between &lt;cite&gt;trans&lt;/cite&gt; and &lt;cite&gt;endtrans&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% trans count=list|length %}
There is {{ count }} {{ name }} object.
{% pluralize %}
There are {{ count }} {{ name }} objects.
{% endtrans %}
&lt;/pre&gt;
&lt;p&gt;Per default the first variable in a block is used to determine the correct
singular or plural form.  If that doesn't work out you can specify the name
which should be used for pluralizing by adding it as parameter to &lt;cite&gt;pluralize&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% trans ..., user_count=users|length %}...
{% pluralize user_count %}...{% endtrans %}
&lt;/pre&gt;
&lt;p&gt;It's also possible to translate strings in expressions.  For that purpose
three functions exist:&lt;/p&gt;
&lt;p&gt;_   &lt;cite&gt;gettext&lt;/cite&gt;: translate a single string
-   &lt;cite&gt;ngettext&lt;/cite&gt;: translate a pluralizable string
-   &lt;cite&gt;_&lt;/cite&gt;: alias for &lt;cite&gt;gettext&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;For example you can print a translated string easily this way:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{{ _('Hello World!') }}
&lt;/pre&gt;
&lt;p&gt;To use placeholders you can use the &lt;cite&gt;format&lt;/cite&gt; filter:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{{ _('Hello %(user)s!')|format(user=user.username) }}
&lt;/pre&gt;
&lt;p&gt;For multiple placeholders always use keyword arguments to &lt;cite&gt;format&lt;/cite&gt; as other
languages may not use the words in the same order.&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/templates.rst&lt;/tt&gt;, line 1268)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;versionchanged&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. versionchanged:: 2.5

&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;If newstyle gettext calls are activated (&lt;a href="#id53"&gt;&lt;span class="problematic" id="id54"&gt;:ref:`newstyle-gettext`&lt;/span&gt;&lt;/a&gt;), using
placeholders is a lot easier:&lt;/p&gt;
&lt;div class="system-message" id="id53"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/templates.rst&lt;/tt&gt;, line 1270); &lt;em&gt;&lt;a href="#id54"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;gettext&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;gettext&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello %(name)s!&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;World&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;ngettext&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%(num)d apple&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%(num)d apples&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;apples&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that the &lt;cite&gt;ngettext&lt;/cite&gt; function's format string automatically recieves
the count as &lt;cite&gt;num&lt;/cite&gt; parameter additionally to the regular parameters.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="expression-statement"&gt;
&lt;h3&gt;Expression Statement&lt;/h3&gt;
&lt;p&gt;If the expression-statement extension is loaded a tag called &lt;cite&gt;do&lt;/cite&gt; is available
that works exactly like the regular variable expression (&lt;tt class="docutils literal"&gt;{{ ... }}&lt;/tt&gt;) just
that it doesn't print anything.  This can be used to modify lists:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% do navigation.append('a string') %}
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="loop-controls"&gt;
&lt;h3&gt;Loop Controls&lt;/h3&gt;
&lt;p&gt;If the application enables the &lt;a href="#id55"&gt;&lt;span class="problematic" id="id56"&gt;:ref:`loopcontrols-extension`&lt;/span&gt;&lt;/a&gt; it's possible to
use &lt;cite&gt;break&lt;/cite&gt; and &lt;cite&gt;continue&lt;/cite&gt; in loops.  When &lt;cite&gt;break&lt;/cite&gt; is reached, the loop is
terminated, if &lt;cite&gt;continue&lt;/cite&gt; is eached the processing is stopped and continues
with the next iteration.&lt;/p&gt;
&lt;div class="system-message" id="id55"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/templates.rst&lt;/tt&gt;, line 1296); &lt;em&gt;&lt;a href="#id56"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/div&gt;
&lt;p&gt;Here a loop that skips every second item:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% for user in users %}
    {%- if loop.index is even %}{% continue %}{% endif %}
    ...
{% endfor %}
&lt;/pre&gt;
&lt;p&gt;Likewise a look that stops processing after the 10th iteration:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% for user in users %}
    {%- if loop.index &amp;gt;= 10 %}{% break %}{% endif %}
{%- endfor %}
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="with-statement"&gt;
&lt;h3&gt;With Statement&lt;/h3&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/templates.rst&lt;/tt&gt;, line 1318)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;versionadded&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. versionadded:: 2.3

&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;If the application enables the &lt;a href="#id57"&gt;&lt;span class="problematic" id="id58"&gt;:ref:`with-extension`&lt;/span&gt;&lt;/a&gt; it is possible to
use the &lt;cite&gt;with&lt;/cite&gt; keyword in templates.  This makes it possible to create
a new inner scope.  Variables set within this scope are not visible
outside of the scope.&lt;/p&gt;
&lt;div class="system-message" id="id57"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/templates.rst&lt;/tt&gt;, line 1320); &lt;em&gt;&lt;a href="#id58"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/div&gt;
&lt;p&gt;With in a nutshell:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% with %}
    {% set foo = 42 %}
    {{ foo }}           foo is 42 here
{% endwith %}
foo is not visible here any longer
&lt;/pre&gt;
&lt;p&gt;Because it is common to set variables at the beginning of the scope
you can do that within the with statement.  The following two examples
are equivalent:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% with foo = 42 %}
    {{ foo }}
{% endwith %}

{% with %}
    {% set foo = 42 %}
    {{ foo }}
{% endwith %}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="autoescape-extension"&gt;
&lt;span id="autoescape-overrides"&gt;&lt;/span&gt;&lt;h2&gt;Autoescape Extension&lt;/h2&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/templates.rst&lt;/tt&gt;, line 1351)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;versionadded&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. versionadded:: 2.4

&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;If the application enables the &lt;a href="#id59"&gt;&lt;span class="problematic" id="id60"&gt;:ref:`autoescape-extension`&lt;/span&gt;&lt;/a&gt; one can
activate and deactivate the autoescaping from within the templates.&lt;/p&gt;
&lt;div class="system-message" id="id59"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/templates.rst&lt;/tt&gt;, line 1353); &lt;em&gt;&lt;a href="#id60"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/div&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% autoescape true %}
    Autoescaping is active within this block
{% endautoescape %}

{% autoescape false %}
    Autoescaping is inactive within this block
{% endautoescape %}
&lt;/pre&gt;
&lt;p&gt;After the &lt;cite&gt;endautoescape&lt;/cite&gt; the behavior is reverted to what it was before.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Tips and Tricks</title><link href="/tips-and-tricks.html" rel="alternate"></link><updated>2012-09-30T04:52:53Z</updated><author><name>kamal</name></author><id>tag:,2012-09-30:tips-and-tricks.html</id><summary type="html">&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/tricks.rst&lt;/tt&gt;, line 4)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;highlight&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. highlight:: html+jinja

&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This part of the documentation shows some tips and tricks for Jinja2
templates.&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;span id="null-master-fallback"&gt;&lt;/span&gt;&lt;h2&gt;Null-Master Fallback&lt;/h2&gt;
&lt;p&gt;Jinja2 supports dynamic inheritance and does not distinguish between parent
and child template as long as no &lt;cite&gt;extends&lt;/cite&gt; tag is visited.  While this leads
to the surprising behavior that everything before the first &lt;cite&gt;extends&lt;/cite&gt; tag
including whitespace is printed out instead of being igored, it can be used
for a neat trick.&lt;/p&gt;
&lt;p&gt;Usually child templates extend from one template that adds a basic HTML
skeleton.  However it's possible put the &lt;cite&gt;extends&lt;/cite&gt; tag into an &lt;cite&gt;if&lt;/cite&gt; tag to
only extend from the layout template if the &lt;cite&gt;standalone&lt;/cite&gt; variable evaluates
to false which it does per default if it's not defined.  Additionally a very
basic skeleton is added to the file so that if it's indeed rendered with
&lt;cite&gt;standalone&lt;/cite&gt; set to &lt;cite&gt;True&lt;/cite&gt; a very basic HTML skeleton is added:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% if not standalone %}{% extends 'master.html' %}{% endif -%}
&amp;lt;!DOCTYPE HTML PUBLIC &amp;quot;-//W3C//DTD HTML 4.01 Transitional//EN&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;{% block title %}The Page Title{% endblock %}&amp;lt;/title&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;style.css&amp;quot; type=&amp;quot;text/css&amp;quot;&amp;gt;
{% block body %}
  &amp;lt;p&amp;gt;This is the page body.&amp;lt;/p&amp;gt;
{% endblock %}
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="alternating-rows"&gt;
&lt;h2&gt;Alternating Rows&lt;/h2&gt;
&lt;p&gt;If you want to have different styles for each row of a table or
list you can use the &lt;cite&gt;cycle&lt;/cite&gt; method on the &lt;cite&gt;loop&lt;/cite&gt; object:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;ul&amp;gt;
{% for row in rows %}
  &amp;lt;li class=&amp;quot;{{ loop.cycle('odd', 'even') }}&amp;quot;&amp;gt;{{ row }}&amp;lt;/li&amp;gt;
{% endfor %}
&amp;lt;/ul&amp;gt;
&lt;/pre&gt;
&lt;p&gt;&lt;cite&gt;cycle&lt;/cite&gt; can take an unlimited amount of strings.  Each time this
tag is encountered the next item from the list is rendered.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="highlighting-active-menu-items"&gt;
&lt;h2&gt;Highlighting Active Menu Items&lt;/h2&gt;
&lt;p&gt;Often you want to have a navigation bar with an active navigation
item.  This is really simple to achieve.  Because assignments outside
of &lt;cite&gt;block&lt;/cite&gt;s in child templates are global and executed before the layout
template is evaluated it's possible to define the active menu item in the
child template:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% extends &amp;quot;layout.html&amp;quot; %}
{% set active_page = &amp;quot;index&amp;quot; %}
&lt;/pre&gt;
&lt;p&gt;The layout template can then access &lt;cite&gt;active_page&lt;/cite&gt;.  Additionally it makes
sense to defined a default for that variable:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% set navigation_bar = [
    ('/', 'index', 'Index'),
    ('/downloads/', 'downloads', 'Downloads'),
    ('/about/', 'about', 'About')
] -%}
{% set active_page = active_page|default('index') -%}
...
&amp;lt;ul id=&amp;quot;navigation&amp;quot;&amp;gt;
{% for href, id, caption in navigation_bar %}
  &amp;lt;li{% if id == active_page %} class=&amp;quot;active&amp;quot;{% endif
  %}&amp;gt;&amp;lt;a href=&amp;quot;{{ href|e }}&amp;quot;&amp;gt;{{ caption|e }}&amp;lt;/a&amp;gt;/li&amp;gt;
{% endfor %}
&amp;lt;/ul&amp;gt;
...
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;span id="accessing-the-parent-loop"&gt;&lt;/span&gt;&lt;h2&gt;Accessing the parent Loop&lt;/h2&gt;
&lt;p&gt;The special &lt;cite&gt;loop&lt;/cite&gt; variable always points to the innermost loop.  If it's
desired to have access to an outer loop it's possible to alias it:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;table&amp;gt;
{% for row in table %}
  &amp;lt;tr&amp;gt;
  {% set rowloop = loop %}
  {% for cell in row %}
    &amp;lt;td id=&amp;quot;cell-{{ rowloop.index }}-{{ loop.index }}&amp;gt;{{ cell }}&amp;lt;/td&amp;gt;
  {% endfor %}
  &amp;lt;/tr&amp;gt;
{% endfor %}
&amp;lt;/table&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
</summary></entry><entry><title></title><link href="/.html" rel="alternate"></link><updated>2012-09-30T04:52:53Z</updated><author><name>kamal</name></author><id>tag:,2012-09-30:.html</id><summary type="html">&lt;div class="section" id="jinja2-documentation"&gt;
&lt;h2&gt;Jinja2 Documentation&lt;/h2&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;Jinja2 Documentation&lt;/h3&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;~/.pip/build/jinja2/docs/contents.rst.inc&lt;/tt&gt;, line 4)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;toctree&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. toctree::
   :maxdepth: 2

   intro
   api
   sandbox
   templates
   extensions
   integration
   switching
   tricks

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="additional-information"&gt;
&lt;h3&gt;Additional Information&lt;/h3&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;~/.pip/build/jinja2/docs/contents.rst.inc&lt;/tt&gt;, line 19)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;toctree&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. toctree::
   :maxdepth: 2

   faq
   changelog

&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;If you can't find the information you're looking for, have a look at the
index of try to find it using the search function:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a href="#id2"&gt;&lt;span class="problematic" id="id3"&gt;:ref:`genindex`&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="system-message" id="id2"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;~/.pip/build/jinja2/docs/contents.rst.inc&lt;/tt&gt;, line 28); &lt;em&gt;&lt;a href="#id3"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a href="#id4"&gt;&lt;span class="problematic" id="id5"&gt;:ref:`search`&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="system-message" id="id4"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;~/.pip/build/jinja2/docs/contents.rst.inc&lt;/tt&gt;, line 29); &lt;em&gt;&lt;a href="#id5"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>API</title><link href="/api.html" rel="alternate"></link><updated>2012-09-30T04:52:53Z</updated><author><name>kamal</name></author><id>tag:,2012-09-30:api.html</id><summary type="html">&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 4)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;module&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. module:: jinja2
    :synopsis: public Jinja2 API

&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This document describes the API to Jinja2 and not the template language.  It
will be most useful as reference to those implementing the template interface
to the application and not those who are creating Jinja2 templates.&lt;/p&gt;
&lt;div class="section" id="basics"&gt;
&lt;h2&gt;Basics&lt;/h2&gt;
&lt;p&gt;Jinja2 uses a central object called the template &lt;a href="#id1"&gt;&lt;span class="problematic" id="id2"&gt;:class:`Environment`&lt;/span&gt;&lt;/a&gt;.
Instances of this class are used to store the configuration, global objects
and are used to load templates from the file system or other locations.
Even if you are creating templates from strings by using the constructor of
&lt;a href="#id3"&gt;&lt;span class="problematic" id="id4"&gt;:class:`Template`&lt;/span&gt;&lt;/a&gt; class, an environment is created automatically for you,
albeit a shared one.&lt;/p&gt;
&lt;div class="system-message" id="id1"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 14); &lt;em&gt;&lt;a href="#id2"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;class&amp;quot;.&lt;/div&gt;
&lt;div class="system-message" id="id3"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 14); &lt;em&gt;&lt;a href="#id4"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;class&amp;quot;.&lt;/div&gt;
&lt;p&gt;Most applications will create one &lt;a href="#id5"&gt;&lt;span class="problematic" id="id6"&gt;:class:`Environment`&lt;/span&gt;&lt;/a&gt; object on application
initialization and use that to load templates.  In some cases it's however
useful to have multiple environments side by side, if different configurations
are in use.&lt;/p&gt;
&lt;div class="system-message" id="id5"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 21); &lt;em&gt;&lt;a href="#id6"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;class&amp;quot;.&lt;/div&gt;
&lt;p&gt;The simplest way to configure Jinja2 to load templates for your application
looks roughly like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from jinja2 import Environment, PackageLoader
env = Environment(loader=PackageLoader('yourapplication', 'templates'))
&lt;/pre&gt;
&lt;p&gt;This will create a template environment with the default settings and a
loader that looks up the templates in the &lt;cite&gt;templates&lt;/cite&gt; folder inside the
&lt;cite&gt;yourapplication&lt;/cite&gt; python package.  Different loaders are available
and you can also write your own if you want to load templates from a
database or other resources.&lt;/p&gt;
&lt;p&gt;To load a template from this environment you just have to call the
&lt;a href="#id7"&gt;&lt;span class="problematic" id="id8"&gt;:meth:`get_template`&lt;/span&gt;&lt;/a&gt; method which then returns the loaded &lt;a href="#id9"&gt;&lt;span class="problematic" id="id10"&gt;:class:`Template`&lt;/span&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class="system-message" id="id7"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 38); &lt;em&gt;&lt;a href="#id8"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;meth&amp;quot;.&lt;/div&gt;
&lt;div class="system-message" id="id9"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 38); &lt;em&gt;&lt;a href="#id10"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;class&amp;quot;.&lt;/div&gt;
&lt;pre class="literal-block"&gt;
template = env.get_template('mytemplate.html')
&lt;/pre&gt;
&lt;p&gt;To render it with some variables, just call the &lt;a href="#id11"&gt;&lt;span class="problematic" id="id12"&gt;:meth:`render`&lt;/span&gt;&lt;/a&gt; method:&lt;/p&gt;
&lt;div class="system-message" id="id11"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 43); &lt;em&gt;&lt;a href="#id12"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;meth&amp;quot;.&lt;/div&gt;
&lt;pre class="literal-block"&gt;
print template.render(the='variables', go='here')
&lt;/pre&gt;
&lt;p&gt;Using a template loader rather then passing strings to &lt;a href="#id13"&gt;&lt;span class="problematic" id="id14"&gt;:class:`Template`&lt;/span&gt;&lt;/a&gt;
or &lt;a href="#id15"&gt;&lt;span class="problematic" id="id16"&gt;:meth:`Environment.from_string`&lt;/span&gt;&lt;/a&gt; has multiple advantages.  Besides being
a lot easier to use it also enables template inheritance.&lt;/p&gt;
&lt;div class="system-message" id="id13"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 47); &lt;em&gt;&lt;a href="#id14"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;class&amp;quot;.&lt;/div&gt;
&lt;div class="system-message" id="id15"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 47); &lt;em&gt;&lt;a href="#id16"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;meth&amp;quot;.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="unicode"&gt;
&lt;h2&gt;Unicode&lt;/h2&gt;
&lt;p&gt;Jinja2 is using Unicode internally which means that you have to pass Unicode
objects to the render function or bytestrings that only consist of ASCII
characters.  Additionally newlines are normalized to one end of line
sequence which is per default UNIX style (&lt;tt class="docutils literal"&gt;\n&lt;/tt&gt;).&lt;/p&gt;
&lt;p&gt;Python 2.x supports two ways of representing string objects.  One is the
&lt;cite&gt;str&lt;/cite&gt; type and the other is the &lt;cite&gt;unicode&lt;/cite&gt; type, both of which extend a type
called &lt;cite&gt;basestring&lt;/cite&gt;.  Unfortunately the default is &lt;cite&gt;str&lt;/cite&gt; which should not
be used to store text based information unless only ASCII characters are
used.  With Python 2.6 it is possible to make &lt;cite&gt;unicode&lt;/cite&gt; the default on a per
module level and with Python 3 it will be the default.&lt;/p&gt;
&lt;p&gt;To explicitly use a Unicode string you have to prefix the string literal
with a &lt;cite&gt;u&lt;/cite&gt;: &lt;tt class="docutils literal"&gt;u'Hänsel und Gretel sagen Hallo'&lt;/tt&gt;.  That way Python will
store the string as Unicode by decoding the string with the character
encoding from the current Python module.  If no encoding is specified this
defaults to 'ASCII' which means that you can't use any non ASCII identifier.&lt;/p&gt;
&lt;p&gt;To set a better module encoding add the following comment to the first or
second line of the Python module using the Unicode literal:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# -*- coding: utf-8 -*-
&lt;/pre&gt;
&lt;p&gt;We recommend utf-8 as Encoding for Python modules and templates as it's
possible to represent every Unicode character in utf-8 and because it's
backwards compatible to ASCII.  For Jinja2 the default encoding of templates
is assumed to be utf-8.&lt;/p&gt;
&lt;p&gt;It is not possible to use Jinja2 to process non-Unicode data.  The reason
for this is that Jinja2 uses Unicode already on the language level.  For
example Jinja2 treats the non-breaking space as valid whitespace inside
expressions which requires knowledge of the encoding or operating on an
Unicode string.&lt;/p&gt;
&lt;p&gt;For more details about Unicode in Python have a look at the excellent
&lt;a class="reference external" href="http://docs.python.org/dev/howto/unicode.html"&gt;Unicode documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Another important thing is how Jinja2 is handling string literals in
templates.  A naive implementation would be using Unicode strings for
all string literals but it turned out in the past that this is problematic
as some libraries are typechecking against &lt;cite&gt;str&lt;/cite&gt; explicitly.  For example
&lt;cite&gt;datetime.strftime&lt;/cite&gt; does not accept Unicode arguments.  To not break it
completely Jinja2 is returning &lt;cite&gt;str&lt;/cite&gt; for strings that fit into ASCII and
for everything else &lt;cite&gt;unicode&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="doctest-block"&gt;
&amp;gt;&amp;gt;&amp;gt; m = Template(u&amp;quot;{% set a, b = 'foo', 'föö' %}&amp;quot;).module
&amp;gt;&amp;gt;&amp;gt; m.a
'foo'
&amp;gt;&amp;gt;&amp;gt; m.b
u'f\xf6\xf6'
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="high-level-api"&gt;
&lt;h2&gt;High Level API&lt;/h2&gt;
&lt;p&gt;The high-level API is the API you will use in the application to load and
render Jinja2 templates.  The &lt;a href="#id17"&gt;&lt;span class="problematic" id="id18"&gt;:ref:`low-level-api`&lt;/span&gt;&lt;/a&gt; on the other side is only
useful if you want to dig deeper into Jinja2 or &lt;a href="#id19"&gt;&lt;span class="problematic" id="id20"&gt;:ref:`develop extensions
&amp;lt;jinja-extensions&amp;gt;`&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="system-message" id="id17"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 112); &lt;em&gt;&lt;a href="#id18"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/div&gt;
&lt;div class="system-message" id="id19"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 112); &lt;em&gt;&lt;a href="#id20"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 117)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autoclass&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autoclass:: Environment([options])
    :members: from_string, get_template, select_template,
              get_or_select_template, join_path, extend, compile_expression,
              compile_templates, list_templates

    .. attribute:: shared

        If a template was created by using the :class:`Template` constructor
        an environment is created automatically.  These environments are
        created as shared environments which means that multiple templates
        may have the same anonymous environment.  For all shared environments
        this attribute is `True`, else `False`.

    .. attribute:: sandboxed

        If the environment is sandboxed this attribute is `True`.  For the
        sandbox mode have a look at the documentation for the
        :class:`~jinja2.sandbox.SandboxedEnvironment`.

    .. attribute:: filters

        A dict of filters for this environment.  As long as no template was
        loaded it's safe to add new filters or remove old.  For custom filters
        see :ref:`writing-filters`.  For valid filter names have a look at
        :ref:`identifier-naming`.

    .. attribute:: tests

        A dict of test functions for this environment.  As long as no
        template was loaded it's safe to modify this dict.  For custom tests
        see :ref:`writing-tests`.  For valid test names have a look at
        :ref:`identifier-naming`.

    .. attribute:: globals

        A dict of global variables.  These variables are always available
        in a template.  As long as no template was loaded it's safe
        to modify this dict.  For more details see :ref:`global-namespace`.
        For valid object names have a look at :ref:`identifier-naming`.

    .. automethod:: overlay([options])

    .. method:: undefined([hint, obj, name, exc])

        Creates a new :class:`Undefined` object for `name`.  This is useful
        for filters or functions that may return undefined objects for
        some operations.  All parameters except of `hint` should be provided
        as keyword parameters for better readability.  The `hint` is used as
        error message for the exception if provided, otherwise the error
        message will be generated from `obj` and `name` automatically.  The exception
        provided as `exc` is raised if something with the generated undefined
        object is done that the undefined object does not allow.  The default
        exception is :exc:`UndefinedError`.  If a `hint` is provided the
        `name` may be ommited.

        The most common way to create an undefined object is by providing
        a name only::

            return environment.undefined(name='some_name')

        This means that the name `some_name` is not defined.  If the name
        was from an attribute of an object it makes sense to tell the
        undefined object the holder object to improve the error message::

            if not hasattr(obj, 'attr'):
                return environment.undefined(obj=obj, name='attr')

        For a more complex example you can provide a hint.  For example
        the :func:`first` filter creates an undefined object that way::

            return environment.undefined('no first item, sequence was empty')

        If it the `name` or `obj` is known (for example because an attribute
        was accessed) it shold be passed to the undefined object, even if
        a custom `hint` is provided.  This gives undefined objects the
        possibility to enhance the error message.

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 194)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autoclass&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autoclass:: Template
    :members: module, make_module

    .. attribute:: globals

        The dict with the globals of that template.  It's unsafe to modify
        this dict as it may be shared with other templates or the environment
        that loaded the template.

    .. attribute:: name

        The loading name of the template.  If the template was loaded from a
        string this is `None`.

    .. attribute:: filename

        The filename of the template on the file system if it was loaded from
        there.  Otherwise this is `None`.

    .. automethod:: render([context])

    .. automethod:: generate([context])

    .. automethod:: stream([context])


&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 220)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autoclass&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autoclass:: jinja2.environment.TemplateStream()
    :members: disable_buffering, enable_buffering, dump


&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="autoescaping"&gt;
&lt;h2&gt;Autoescaping&lt;/h2&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 227)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;versionadded&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. versionadded:: 2.4

&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;As of Jinja 2.4 the preferred way to do autoescaping is to enable the
&lt;a href="#id21"&gt;&lt;span class="problematic" id="id22"&gt;:ref:`autoescape-extension`&lt;/span&gt;&lt;/a&gt; and to configure a sensible default for
autoescaping.  This makes it possible to enable and disable autoescaping
on a per-template basis (HTML versus text for instance).&lt;/p&gt;
&lt;div class="system-message" id="id21"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 229); &lt;em&gt;&lt;a href="#id22"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/div&gt;
&lt;p&gt;Here a recommended setup that enables autoescaping for templates ending
in &lt;tt class="docutils literal"&gt;'.html'&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;'.htm'&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;'.xml'&lt;/tt&gt; and disabling it by default
for all other extensions:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def guess_autoescape(template_name):
    if template_name is None or '.' not in template_name:
        return False
    ext = template_name.rsplit('.', 1)[1]
    return ext in ('html', 'htm', 'xml')

env = Environment(autoescape=guess_autoescape,
                  loader=PackageLoader('mypackage'),
                  extensions=['jinja2.ext.autoescape'])
&lt;/pre&gt;
&lt;p&gt;When implementing a guessing autoescape function, make sure you also
accept &lt;cite&gt;None&lt;/cite&gt; as valid template name.  This will be passed when generating
templates from strings.&lt;/p&gt;
&lt;p&gt;Inside the templates the behaviour can be temporarily changed by using
the &lt;cite&gt;autoescape&lt;/cite&gt; block (see &lt;a href="#id23"&gt;&lt;span class="problematic" id="id24"&gt;:ref:`autoescape-overrides`&lt;/span&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;div class="system-message" id="id23"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 252); &lt;em&gt;&lt;a href="#id24"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="notes-on-identifiers"&gt;
&lt;span id="identifier-naming"&gt;&lt;/span&gt;&lt;h2&gt;Notes on Identifiers&lt;/h2&gt;
&lt;p&gt;Jinja2 uses the regular Python 2.x naming rules.  Valid identifiers have to
match &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[a-zA-Z_][a-zA-Z0-9_]*&lt;/span&gt;&lt;/tt&gt;.  As a matter of fact non ASCII characters
are currently not allowed.  This limitation will probably go away as soon as
unicode identifiers are fully specified for Python 3.&lt;/p&gt;
&lt;p&gt;Filters and tests are looked up in separate namespaces and have slightly
modified identifier syntax.  Filters and tests may contain dots to group
filters and tests by topic.  For example it's perfectly valid to add a
function into the filter dict and call it &lt;cite&gt;to.unicode&lt;/cite&gt;.  The regular
expression for filter and test identifiers is
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[a-zA-Z_][a-zA-Z0-9_]*(\.[a-zA-Z_][a-zA-Z0-9_]*)*`&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="undefined-types"&gt;
&lt;h2&gt;Undefined Types&lt;/h2&gt;
&lt;p&gt;These classes can be used as undefined types.  The &lt;a href="#id25"&gt;&lt;span class="problematic" id="id26"&gt;:class:`Environment`&lt;/span&gt;&lt;/a&gt;
constructor takes an &lt;cite&gt;undefined&lt;/cite&gt; parameter that can be one of those classes
or a custom subclass of &lt;a href="#id27"&gt;&lt;span class="problematic" id="id28"&gt;:class:`Undefined`&lt;/span&gt;&lt;/a&gt;.  Whenever the template engine is
unable to look up a name or access an attribute one of those objects is
created and returned.  Some operations on undefined values are then allowed,
others fail.&lt;/p&gt;
&lt;div class="system-message" id="id25"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 277); &lt;em&gt;&lt;a href="#id26"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;class&amp;quot;.&lt;/div&gt;
&lt;div class="system-message" id="id27"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 277); &lt;em&gt;&lt;a href="#id28"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;class&amp;quot;.&lt;/div&gt;
&lt;p&gt;The closest to regular Python behavior is the &lt;cite&gt;StrictUndefined&lt;/cite&gt; which
disallows all operations beside testing if it's an undefined object.&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 287)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autoclass&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autoclass:: jinja2.Undefined()

    .. attribute:: _undefined_hint

        Either `None` or an unicode string with the error message for
        the undefined object.

    .. attribute:: _undefined_obj

        Either `None` or the owner object that caused the undefined object
        to be created (for example because an attribute does not exist).

    .. attribute:: _undefined_name

        The name for the undefined variable / attribute or just `None`
        if no such information exists.

    .. attribute:: _undefined_exception

        The exception that the undefined object wants to raise.  This
        is usually one of :exc:`UndefinedError` or :exc:`SecurityError`.

    .. method:: _fail_with_undefined_error(\*args, \**kwargs)

        When called with any arguments this method raises
        :attr:`_undefined_exception` with an error message generated
        from the undefined hints stored on the undefined object.

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 315)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autoclass&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autoclass:: jinja2.DebugUndefined()

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 317)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autoclass&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autoclass:: jinja2.StrictUndefined()

&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Undefined objects are created by calling &lt;a href="#id29"&gt;&lt;span class="problematic" id="id30"&gt;:attr:`undefined`&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="system-message" id="id29"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 319); &lt;em&gt;&lt;a href="#id30"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;attr&amp;quot;.&lt;/div&gt;
&lt;div class="admonition-implementation admonition"&gt;
&lt;p class="first admonition-title"&gt;Implementation&lt;/p&gt;
&lt;p&gt;&lt;a href="#id31"&gt;&lt;span class="problematic" id="id32"&gt;:class:`Undefined`&lt;/span&gt;&lt;/a&gt; objects are implemented by overriding the special
&lt;cite&gt;__underscore__&lt;/cite&gt; methods.  For example the default &lt;a href="#id33"&gt;&lt;span class="problematic" id="id34"&gt;:class:`Undefined`&lt;/span&gt;&lt;/a&gt;
class implements &lt;cite&gt;__unicode__&lt;/cite&gt; in a way that it returns an empty
string, however &lt;cite&gt;__int__&lt;/cite&gt; and others still fail with an exception.  To
allow conversion to int by returning &lt;tt class="docutils literal"&gt;0&lt;/tt&gt; you can implement your own:&lt;/p&gt;
&lt;div class="system-message" id="id31"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 323); &lt;em&gt;&lt;a href="#id32"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;class&amp;quot;.&lt;/div&gt;
&lt;div class="system-message" id="id33"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 323); &lt;em&gt;&lt;a href="#id34"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;class&amp;quot;.&lt;/div&gt;
&lt;pre class="literal-block"&gt;
class NullUndefined(Undefined):
    def __int__(self):
        return 0
    def __float__(self):
        return 0.0
&lt;/pre&gt;
&lt;p&gt;To disallow a method, just override it and raise
&lt;a href="#id35"&gt;&lt;span class="problematic" id="id36"&gt;:attr:`~Undefined._undefined_exception`&lt;/span&gt;&lt;/a&gt;.  Because this is a very common
idom in undefined objects there is the helper method
&lt;a href="#id37"&gt;&lt;span class="problematic" id="id38"&gt;:meth:`~Undefined._fail_with_undefined_error`&lt;/span&gt;&lt;/a&gt; that does the error raising
automatically.  Here a class that works like the regular &lt;a href="#id39"&gt;&lt;span class="problematic" id="id40"&gt;:class:`Undefined`&lt;/span&gt;&lt;/a&gt;
but chokes on iteration:&lt;/p&gt;
&lt;div class="system-message" id="id35"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 335); &lt;em&gt;&lt;a href="#id36"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;attr&amp;quot;.&lt;/div&gt;
&lt;div class="system-message" id="id37"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 335); &lt;em&gt;&lt;a href="#id38"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;meth&amp;quot;.&lt;/div&gt;
&lt;div class="system-message" id="id39"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 335); &lt;em&gt;&lt;a href="#id40"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;class&amp;quot;.&lt;/div&gt;
&lt;pre class="last literal-block"&gt;
class NonIterableUndefined(Undefined):
    __iter__ = Undefined._fail_with_undefined_error
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-context"&gt;
&lt;h2&gt;The Context&lt;/h2&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 349)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autoclass&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autoclass:: jinja2.runtime.Context()
    :members: resolve, get_exported, get_all

    .. attribute:: parent

        A dict of read only, global variables the template looks up.  These
        can either come from another :class:`Context`, from the
        :attr:`Environment.globals` or :attr:`Template.globals` or points
        to a dict created by combining the globals with the variables
        passed to the render function.  It must not be altered.

    .. attribute:: vars

        The template local variables.  This list contains environment and
        context functions from the :attr:`parent` scope as well as local
        modifications and exported variables from the template.  The template
        will modify this dict during template evaluation but filters and
        context functions are not allowed to modify it.

    .. attribute:: environment

        The environment that loaded the template.

    .. attribute:: exported_vars

        This set contains all the names the template exports.  The values for
        the names are in the :attr:`vars` dict.  In order to get a copy of the
        exported variables as dict, :meth:`get_exported` can be used.

    .. attribute:: name

        The load name of the template owning this context.

    .. attribute:: blocks

        A dict with the current mapping of blocks in the template.  The keys
        in this dict are the names of the blocks, and the values a list of
        blocks registered.  The last item in each list is the current active
        block (latest in the inheritance chain).

    .. attribute:: eval_ctx

        The current :ref:`eval-context`.

    .. automethod:: jinja2.runtime.Context.call(callable, \*args, \**kwargs)


&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="admonition-implementation admonition"&gt;
&lt;p class="first admonition-title"&gt;Implementation&lt;/p&gt;
&lt;p&gt;Context is immutable for the same reason Python's frame locals are
immutable inside functions.  Both Jinja2 and Python are not using the
context / frame locals as data storage for variables but only as primary
data source.&lt;/p&gt;
&lt;p class="last"&gt;When a template accesses a variable the template does not define, Jinja2
looks up the variable in the context, after that the variable is treated
as if it was defined in the template.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id41"&gt;
&lt;span id="loaders"&gt;&lt;/span&gt;&lt;h2&gt;Loaders&lt;/h2&gt;
&lt;p&gt;Loaders are responsible for loading templates from a resource such as the
file system.  The environment will keep the compiled modules in memory like
Python's &lt;cite&gt;sys.modules&lt;/cite&gt;.  Unlike &lt;cite&gt;sys.modules&lt;/cite&gt; however this cache is limited in
size by default and templates are automatically reloaded.
All loaders are subclasses of &lt;a href="#id42"&gt;&lt;span class="problematic" id="id43"&gt;:class:`BaseLoader`&lt;/span&gt;&lt;/a&gt;.  If you want to create your
own loader, subclass &lt;a href="#id44"&gt;&lt;span class="problematic" id="id45"&gt;:class:`BaseLoader`&lt;/span&gt;&lt;/a&gt; and override &lt;cite&gt;get_source&lt;/cite&gt;.&lt;/p&gt;
&lt;div class="system-message" id="id42"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 413); &lt;em&gt;&lt;a href="#id43"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;class&amp;quot;.&lt;/div&gt;
&lt;div class="system-message" id="id44"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 413); &lt;em&gt;&lt;a href="#id45"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;class&amp;quot;.&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 420)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autoclass&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autoclass:: jinja2.BaseLoader
    :members: get_source, load

&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Here a list of the builtin loaders Jinja2 provides:&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 425)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autoclass&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autoclass:: jinja2.FileSystemLoader

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 427)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autoclass&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autoclass:: jinja2.PackageLoader

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 429)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autoclass&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autoclass:: jinja2.DictLoader

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 431)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autoclass&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autoclass:: jinja2.FunctionLoader

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 433)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autoclass&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autoclass:: jinja2.PrefixLoader

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 435)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autoclass&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autoclass:: jinja2.ChoiceLoader

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 437)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autoclass&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autoclass:: jinja2.ModuleLoader


&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id46"&gt;
&lt;span id="bytecode-cache"&gt;&lt;/span&gt;&lt;h2&gt;Bytecode Cache&lt;/h2&gt;
&lt;p&gt;Jinja 2.1 and higher support external bytecode caching.  Bytecode caches make
it possible to store the generated bytecode on the file system or a different
location to avoid parsing the templates on first use.&lt;/p&gt;
&lt;p&gt;This is especially useful if you have a web application that is initialized on
the first request and Jinja compiles many templates at once which slows down
the application.&lt;/p&gt;
&lt;p&gt;To use a bytecode cache, instanciate it and pass it to the &lt;a href="#id47"&gt;&lt;span class="problematic" id="id48"&gt;:class:`Environment`&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="system-message" id="id47"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 453); &lt;em&gt;&lt;a href="#id48"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;class&amp;quot;.&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 455)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autoclass&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autoclass:: jinja2.BytecodeCache
    :members: load_bytecode, dump_bytecode, clear

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 458)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autoclass&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autoclass:: jinja2.bccache.Bucket
    :members: write_bytecode, load_bytecode, bytecode_from_string,
              bytecode_to_string, reset

    .. attribute:: environment

        The :class:`Environment` that created the bucket.

    .. attribute:: key

        The unique cache key for this bucket

    .. attribute:: code

        The bytecode if it's loaded, otherwise `None`.


&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Builtin bytecode caches:&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 477)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autoclass&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autoclass:: jinja2.FileSystemBytecodeCache

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 479)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autoclass&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autoclass:: jinja2.MemcachedBytecodeCache


&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="utilities"&gt;
&lt;h2&gt;Utilities&lt;/h2&gt;
&lt;p&gt;These helper functions and classes are useful if you add custom filters or
functions to a Jinja2 environment.&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 488)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autofunction&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autofunction:: jinja2.environmentfilter

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 490)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autofunction&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autofunction:: jinja2.contextfilter

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 492)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autofunction&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autofunction:: jinja2.evalcontextfilter

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 494)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autofunction&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autofunction:: jinja2.environmentfunction

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 496)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autofunction&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autofunction:: jinja2.contextfunction

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 498)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autofunction&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autofunction:: jinja2.evalcontextfunction

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 500)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;function&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. function:: escape(s)

    Convert the characters ``&amp;amp;``, ``&amp;lt;``, ``&amp;gt;``, ``'``, and ``&amp;quot;`` in string `s`
    to HTML-safe sequences.  Use this if you need to display text that might
    contain such characters in HTML.  This function will not escaped objects
    that do have an HTML representation such as already escaped data.

    The return value is a :class:`Markup` string.

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 509)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autofunction&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autofunction:: jinja2.clear_caches

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 511)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autofunction&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autofunction:: jinja2.is_undefined

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 513)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autoclass&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autoclass:: jinja2.Markup([string])
    :members: escape, unescape, striptags

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="admonition-note admonition"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;The Jinja2 &lt;a href="#id49"&gt;&lt;span class="problematic" id="id50"&gt;:class:`Markup`&lt;/span&gt;&lt;/a&gt; class is compatible with at least Pylons and
Genshi.  It's expected that more template engines and framework will pick
up the &lt;cite&gt;__html__&lt;/cite&gt; concept soon.&lt;/p&gt;
&lt;div class="last system-message" id="id49"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 518); &lt;em&gt;&lt;a href="#id50"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;class&amp;quot;.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="exceptions"&gt;
&lt;h2&gt;Exceptions&lt;/h2&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 526)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autoexception&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autoexception:: jinja2.TemplateError

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 528)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autoexception&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autoexception:: jinja2.UndefinedError

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 530)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autoexception&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autoexception:: jinja2.TemplateNotFound

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 532)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autoexception&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autoexception:: jinja2.TemplatesNotFound

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 534)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autoexception&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autoexception:: jinja2.TemplateSyntaxError

    .. attribute:: message

        The error message as utf-8 bytestring.

    .. attribute:: lineno

        The line number where the error occurred

    .. attribute:: name

        The load name for the template as unicode string.

    .. attribute:: filename

        The filename that loaded the template as bytestring in the encoding
        of the file system (most likely utf-8 or mbcs on Windows systems).

    The reason why the filename and error message are bytestrings and not
    unicode strings is that Python 2.x is not using unicode for exceptions
    and tracebacks as well as the compiler.  This will change with Python 3.

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 557)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autoexception&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autoexception:: jinja2.TemplateAssertionError


&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="custom-filters"&gt;
&lt;span id="writing-filters"&gt;&lt;/span&gt;&lt;h2&gt;Custom Filters&lt;/h2&gt;
&lt;p&gt;Custom filters are just regular Python functions that take the left side of
the filter as first argument and the the arguments passed to the filter as
extra arguments or keyword arguments.&lt;/p&gt;
&lt;p&gt;For example in the filter &lt;tt class="docutils literal"&gt;{{ 42|myfilter(23) }}&lt;/tt&gt; the function would be
called with &lt;tt class="docutils literal"&gt;myfilter(42, 23)&lt;/tt&gt;.  Here for example a simple filter that can
be applied to datetime objects to format them:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def datetimeformat(value, format='%H:%M / %d-%m-%Y'):
    return value.strftime(format)
&lt;/pre&gt;
&lt;p&gt;You can register it on the template environment by updating the
&lt;a href="#id51"&gt;&lt;span class="problematic" id="id52"&gt;:attr:`~Environment.filters`&lt;/span&gt;&lt;/a&gt; dict on the environment:&lt;/p&gt;
&lt;div class="system-message" id="id51"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 576); &lt;em&gt;&lt;a href="#id52"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;attr&amp;quot;.&lt;/div&gt;
&lt;pre class="literal-block"&gt;
environment.filters['datetimeformat'] = datetimeformat
&lt;/pre&gt;
&lt;p&gt;Inside the template it can then be used as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;written on: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;article.pub_date&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;datetimeformat&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;publication date: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;article.pub_date&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;datetimeformat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%d-%m-%Y&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Filters can also be passed the current template context or environment.  This
is useful if a filter wants to return an undefined value or check the current
&lt;a href="#id53"&gt;&lt;span class="problematic" id="id54"&gt;:attr:`~Environment.autoescape`&lt;/span&gt;&lt;/a&gt; setting.  For this purpose three decorators
exist: &lt;a href="#id55"&gt;&lt;span class="problematic" id="id56"&gt;:func:`environmentfilter`&lt;/span&gt;&lt;/a&gt;, &lt;a href="#id57"&gt;&lt;span class="problematic" id="id58"&gt;:func:`contextfilter`&lt;/span&gt;&lt;/a&gt; and
&lt;a href="#id59"&gt;&lt;span class="problematic" id="id60"&gt;:func:`evalcontextfilter`&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="system-message" id="id53"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 588); &lt;em&gt;&lt;a href="#id54"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;attr&amp;quot;.&lt;/div&gt;
&lt;div class="system-message" id="id55"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 588); &lt;em&gt;&lt;a href="#id56"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;func&amp;quot;.&lt;/div&gt;
&lt;div class="system-message" id="id57"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 588); &lt;em&gt;&lt;a href="#id58"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;func&amp;quot;.&lt;/div&gt;
&lt;div class="system-message" id="id59"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 588); &lt;em&gt;&lt;a href="#id60"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;func&amp;quot;.&lt;/div&gt;
&lt;p&gt;Here a small example filter that breaks a text into HTML line breaks and
paragraphs and marks the return value as safe HTML string if autoescaping is
enabled:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import re
from jinja2 import evalcontextfilter, Markup, escape

_paragraph_re = re.compile(r'(?:\r\n|\r|\n){2,}')

&amp;#64;evalcontextfilter
def nl2br(eval_ctx, value):
    result = u'\n\n'.join(u'&amp;lt;p&amp;gt;%s&amp;lt;/p&amp;gt;' % p.replace('\n', '&amp;lt;br&amp;gt;\n')
                          for p in _paragraph_re.split(escape(value)))
    if eval_ctx.autoescape:
        result = Markup(result)
    return result
&lt;/pre&gt;
&lt;p&gt;Context filters work the same just that the first argument is the current
active &lt;a href="#id61"&gt;&lt;span class="problematic" id="id62"&gt;:class:`Context`&lt;/span&gt;&lt;/a&gt; rather then the environment.&lt;/p&gt;
&lt;div class="system-message" id="id61"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 611); &lt;em&gt;&lt;a href="#id62"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;class&amp;quot;.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="evaluation-context"&gt;
&lt;span id="eval-context"&gt;&lt;/span&gt;&lt;h2&gt;Evaluation Context&lt;/h2&gt;
&lt;p&gt;The evaluation context (short eval context or eval ctx) is a new object
introducted in Jinja 2.4 that makes it possible to activate and deactivate
compiled features at runtime.&lt;/p&gt;
&lt;p&gt;Currently it is only used to enable and disable the automatic escaping but
can be used for extensions as well.&lt;/p&gt;
&lt;p&gt;In previous Jinja versions filters and functions were marked as
environment callables in order to check for the autoescape status from the
environment.  In new versions it's encouraged to check the setting from the
evaluation context instead.&lt;/p&gt;
&lt;p&gt;Previous versions:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;#64;environmentfilter
def filter(env, value):
    result = do_something(value)
    if env.autoescape:
        result = Markup(result)
    return result
&lt;/pre&gt;
&lt;p&gt;In new versions you can either use a &lt;a href="#id63"&gt;&lt;span class="problematic" id="id64"&gt;:func:`contextfilter`&lt;/span&gt;&lt;/a&gt; and access the
evaluation context from the actual context, or use a
&lt;a href="#id65"&gt;&lt;span class="problematic" id="id66"&gt;:func:`evalcontextfilter`&lt;/span&gt;&lt;/a&gt; which directly passes the evaluation context to
the function:&lt;/p&gt;
&lt;div class="system-message" id="id63"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 641); &lt;em&gt;&lt;a href="#id64"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;func&amp;quot;.&lt;/div&gt;
&lt;div class="system-message" id="id65"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 641); &lt;em&gt;&lt;a href="#id66"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;func&amp;quot;.&lt;/div&gt;
&lt;pre class="literal-block"&gt;
&amp;#64;contextfilter
def filter(context, value):
    result = do_something(value)
    if context.eval_ctx.autoescape:
        result = Markup(result)
    return result

&amp;#64;evalcontextfilter
def filter(eval_ctx, value):
    result = do_something(value)
    if eval_ctx.autoescape:
        result = Markup(result)
    return result
&lt;/pre&gt;
&lt;p&gt;The evaluation context must not be modified at runtime.  Modifications
must only happen with a &lt;a href="#id67"&gt;&lt;span class="problematic" id="id68"&gt;:class:`nodes.EvalContextModifier`&lt;/span&gt;&lt;/a&gt; and
&lt;a href="#id69"&gt;&lt;span class="problematic" id="id70"&gt;:class:`nodes.ScopedEvalContextModifier`&lt;/span&gt;&lt;/a&gt; from an extension, not on the
eval context object itself.&lt;/p&gt;
&lt;div class="system-message" id="id67"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 660); &lt;em&gt;&lt;a href="#id68"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;class&amp;quot;.&lt;/div&gt;
&lt;div class="system-message" id="id69"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 660); &lt;em&gt;&lt;a href="#id70"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;class&amp;quot;.&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 665)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autoclass&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autoclass:: jinja2.nodes.EvalContext

   .. attribute:: autoescape

      `True` or `False` depending on if autoescaping is active or not.

   .. attribute:: volatile

      `True` if the compiler cannot evaluate some expressions at compile
      time.  At runtime this should always be `False`.


&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="custom-tests"&gt;
&lt;span id="writing-tests"&gt;&lt;/span&gt;&lt;h2&gt;Custom Tests&lt;/h2&gt;
&lt;p&gt;Tests work like filters just that there is no way for a test to get access
to the environment or context and that they can't be chained.  The return
value of a test should be &lt;cite&gt;True&lt;/cite&gt; or &lt;cite&gt;False&lt;/cite&gt;.  The purpose of a test is to
give the template designers the possibility to perform type and conformability
checks.&lt;/p&gt;
&lt;p&gt;Here a simple test that checks if a variable is a prime number:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import math

def is_prime(n):
    if n == 2:
        return True
    for i in xrange(2, int(math.ceil(math.sqrt(n))) + 1):
        if n % i == 0:
            return False
    return True
&lt;/pre&gt;
&lt;p&gt;You can register it on the template environment by updating the
&lt;a href="#id71"&gt;&lt;span class="problematic" id="id72"&gt;:attr:`~Environment.tests`&lt;/span&gt;&lt;/a&gt; dict on the environment:&lt;/p&gt;
&lt;div class="system-message" id="id71"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 701); &lt;em&gt;&lt;a href="#id72"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;attr&amp;quot;.&lt;/div&gt;
&lt;pre class="literal-block"&gt;
environment.tests['prime'] = is_prime
&lt;/pre&gt;
&lt;p&gt;A template designer can then use the test like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="m"&gt;42&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="nf"&gt;prime&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    42 is a prime number&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    42 is not a prime number&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-global-namespace"&gt;
&lt;span id="global-namespace"&gt;&lt;/span&gt;&lt;h2&gt;The Global Namespace&lt;/h2&gt;
&lt;p&gt;Variables stored in the &lt;a href="#id73"&gt;&lt;span class="problematic" id="id74"&gt;:attr:`Environment.globals`&lt;/span&gt;&lt;/a&gt; dict are special as they
are available for imported templates too, even if they are imported without
context.  This is the place where you can put variables and functions
that should be available all the time.  Additionally &lt;a href="#id75"&gt;&lt;span class="problematic" id="id76"&gt;:attr:`Template.globals`&lt;/span&gt;&lt;/a&gt;
exist that are variables available to a specific template that are available
to all &lt;a href="#id77"&gt;&lt;span class="problematic" id="id78"&gt;:meth:`~Template.render`&lt;/span&gt;&lt;/a&gt; calls.&lt;/p&gt;
&lt;div class="system-message" id="id73"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 722); &lt;em&gt;&lt;a href="#id74"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;attr&amp;quot;.&lt;/div&gt;
&lt;div class="system-message" id="id75"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 722); &lt;em&gt;&lt;a href="#id76"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;attr&amp;quot;.&lt;/div&gt;
&lt;div class="system-message" id="id77"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 722); &lt;em&gt;&lt;a href="#id78"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;meth&amp;quot;.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id79"&gt;
&lt;span id="low-level-api"&gt;&lt;/span&gt;&lt;h2&gt;Low Level API&lt;/h2&gt;
&lt;p&gt;The low level API exposes functionality that can be useful to understand some
implementation details, debugging purposes or advanced &lt;a href="#id80"&gt;&lt;span class="problematic" id="id81"&gt;:ref:`extension
&amp;lt;jinja-extensions&amp;gt;`&lt;/span&gt;&lt;/a&gt; techniques.  Unless you know exactly what you are doing we
don't recommend using any of those.&lt;/p&gt;
&lt;div class="system-message" id="id80"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 735); &lt;em&gt;&lt;a href="#id81"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 740)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;automethod&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. automethod:: Environment.lex

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 742)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;automethod&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. automethod:: Environment.parse

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 744)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;automethod&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. automethod:: Environment.preprocess

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 746)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;automethod&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. automethod:: Template.new_context

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 748)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;method&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. method:: Template.root_render_func(context)

    This is the low level render function.  It's passed a :class:`Context`
    that has to be created by :meth:`new_context` of the same template or
    a compatible template.  This render function is generated by the
    compiler from the template code and returns a generator that yields
    unicode strings.

    If an exception in the template code happens the template engine will
    not rewrite the exception but pass through the original one.  As a
    matter of fact this function should only be called from within a
    :meth:`render` / :meth:`generate` / :meth:`stream` call.

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 761)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;attribute&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. attribute:: Template.blocks

    A dict of block render functions.  Each of these functions works exactly
    like the :meth:`root_render_func` with the same limitations.

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 766)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;attribute&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. attribute:: Template.is_up_to_date

    This attribute is `False` if there is a newer version of the template
    available, otherwise `True`.

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="admonition-note admonition"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;The low-level API is fragile.  Future Jinja2 versions will try not to
change it in a backwards incompatible way but modifications in the Jinja2
core may shine through.  For example if Jinja2 introduces a new AST node
in later versions that may be returned by &lt;a href="#id82"&gt;&lt;span class="problematic" id="id83"&gt;:meth:`~Environment.parse`&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="last system-message" id="id82"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 773); &lt;em&gt;&lt;a href="#id83"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;meth&amp;quot;.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-meta-api"&gt;
&lt;h2&gt;The Meta API&lt;/h2&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 781)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;versionadded&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. versionadded:: 2.2

&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The meta API returns some information about abstract syntax trees that
could help applications to implement more advanced template concepts.  All
the functions of the meta API operate on an abstract syntax tree as
returned by the &lt;a href="#id84"&gt;&lt;span class="problematic" id="id85"&gt;:meth:`Environment.parse`&lt;/span&gt;&lt;/a&gt; method.&lt;/p&gt;
&lt;div class="system-message" id="id84"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 783); &lt;em&gt;&lt;a href="#id85"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;meth&amp;quot;.&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 788)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autofunction&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autofunction:: jinja2.meta.find_undeclared_variables

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/api.rst&lt;/tt&gt;, line 790)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autofunction&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autofunction:: jinja2.meta.find_referenced_templates
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Extensions</title><link href="/extensions.html" rel="alternate"></link><updated>2012-09-30T04:52:53Z</updated><author><name>kamal</name></author><id>tag:,2012-09-30:extensions.html</id><summary type="html">&lt;p&gt;Jinja2 supports extensions that can add extra filters, tests, globals or even
extend the parser.  The main motivation of extensions is it to move often used
code into a reusable class like adding support for internationalization.&lt;/p&gt;
&lt;div class="section" id="adding-extensions"&gt;
&lt;h2&gt;Adding Extensions&lt;/h2&gt;
&lt;p&gt;Extensions are added to the Jinja2 environment at creation time.  Once the
environment is created additional extensions cannot be added.  To add an
extension pass a list of extension classes or import paths to the
&lt;cite&gt;environment&lt;/cite&gt; parameter of the &lt;a href="#id1"&gt;&lt;span class="problematic" id="id2"&gt;:class:`Environment`&lt;/span&gt;&lt;/a&gt; constructor.  The following
example creates a Jinja2 environment with the i18n extension loaded:&lt;/p&gt;
&lt;div class="system-message" id="id1"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/extensions.rst&lt;/tt&gt;, line 14); &lt;em&gt;&lt;a href="#id2"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;class&amp;quot;.&lt;/div&gt;
&lt;pre class="literal-block"&gt;
jinja_env = Environment(extensions=['jinja2.ext.i18n'])
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;span id="i18n-extension"&gt;&lt;/span&gt;&lt;h2&gt;i18n Extension&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Import name:&lt;/strong&gt; &lt;cite&gt;jinja2.ext.i18n&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;Jinja2 currently comes with one extension, the i18n extension.  It can be
used in combination with &lt;a class="reference external" href="http://docs.python.org/dev/library/gettext"&gt;gettext&lt;/a&gt; or &lt;a class="reference external" href="http://babel.edgewall.org/"&gt;babel&lt;/a&gt;.  If the i18n extension is
enabled Jinja2 provides a &lt;cite&gt;trans&lt;/cite&gt; statement that marks the wrapped string as
translatable and calls &lt;cite&gt;gettext&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;After enabling dummy &lt;cite&gt;_&lt;/cite&gt; function that forwards calls to &lt;cite&gt;gettext&lt;/cite&gt; is added
to the environment globals.  An internationalized application then has to
provide at least an &lt;cite&gt;gettext&lt;/cite&gt; and optoinally a &lt;cite&gt;ngettext&lt;/cite&gt; function into the
namespace.  Either globally or for each rendering.&lt;/p&gt;
&lt;div class="section" id="environment-methods"&gt;
&lt;h3&gt;Environment Methods&lt;/h3&gt;
&lt;p&gt;After enabling of the extension the environment provides the following
additional methods:&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/extensions.rst&lt;/tt&gt;, line 46)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;method&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. method:: jinja2.Environment.install_gettext_translations(translations, newstyle=False)

    Installs a translation globally for that environment.  The tranlations
    object provided must implement at least `ugettext` and `ungettext`.
    The `gettext.NullTranslations` and `gettext.GNUTranslations` classes
    as well as `Babel`_\s `Translations` class are supported.

    .. versionchanged:: 2.5 newstyle gettext added

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/extensions.rst&lt;/tt&gt;, line 55)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;method&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. method:: jinja2.Environment.install_null_translations(newstyle=False)

    Install dummy gettext functions.  This is useful if you want to prepare
    the application for internationalization but don't want to implement the
    full internationalization system yet.

    .. versionchanged:: 2.5 newstyle gettext added

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/extensions.rst&lt;/tt&gt;, line 63)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;method&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. method:: jinja2.Environment.install_gettext_callables(gettext, ngettext, newstyle=False)

    Installs the given `gettext` and `ngettext` callables into the
    environment as globals.  They are supposed to behave exactly like the
    standard library's :func:`gettext.ugettext` and
    :func:`gettext.ungettext` functions.

    If `newstyle` is activated, the callables are wrapped to work like
    newstyle callables.  See :ref:`newstyle-gettext` for more information.

    .. versionadded:: 2.5

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/extensions.rst&lt;/tt&gt;, line 75)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;method&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. method:: jinja2.Environment.uninstall_gettext_translations()

    Uninstall the translations again.

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/extensions.rst&lt;/tt&gt;, line 79)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;method&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. method:: jinja2.Environment.extract_translations(source)

    Extract localizable strings from the given template node or source.

    For every string found this function yields a ``(lineno, function,
    message)`` tuple, where:

    * `lineno` is the number of the line on which the string was found,
    * `function` is the name of the `gettext` function used (if the
      string was extracted from embedded Python code), and
    *  `message` is the string itself (a `unicode` object, or a tuple
       of `unicode` objects for functions with multiple string arguments).

    If `Babel`_ is installed :ref:`the babel integration &amp;lt;babel-integration&amp;gt;`
    can be used to extract strings for babel.

&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;For a web application that is available in multiple languages but gives all
the users the same language (for example a multilingual forum software
installed for a French community) may load the translations once and add the
translation methods to the environment at environment generation time:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
translations = get_gettext_translations()
env = Environment(extensions=['jinja2.ext.i18n'])
env.install_gettext_translations(translations)
&lt;/pre&gt;
&lt;p&gt;The &lt;cite&gt;get_gettext_translations&lt;/cite&gt; function would return the translator for the
current configuration.  (For example by using &lt;cite&gt;gettext.find&lt;/cite&gt;)&lt;/p&gt;
&lt;p&gt;The usage of the &lt;cite&gt;i18n&lt;/cite&gt; extension for template designers is covered as part
&lt;a href="#id4"&gt;&lt;span class="problematic" id="id5"&gt;:ref:`of the template documentation &amp;lt;i18n-in-templates&amp;gt;`&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="system-message" id="id4"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/extensions.rst&lt;/tt&gt;, line 107); &lt;em&gt;&lt;a href="#id5"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;span id="newstyle-gettext"&gt;&lt;/span&gt;&lt;h3&gt;Newstyle Gettext&lt;/h3&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/extensions.rst&lt;/tt&gt;, line 118)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;versionadded&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. versionadded:: 2.5

&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Starting with version 2.5 you can use newstyle gettext calls.  These are
inspired by trac's internal gettext functions and are fully supported by
the babel extraction tool.  They might not work as expected by other
extraction tools in case you are not using Babel's.&lt;/p&gt;
&lt;p&gt;What's the big difference between standard and newstyle gettext calls?  In
general they are less to type and less error prone.  Also if they are used
in an autoescaping environment they better support automatic escaping.
Here some common differences between old and new calls:&lt;/p&gt;
&lt;p&gt;standard gettext:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;gettext&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;gettext&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello %(name)s!&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)|&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;World&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;ngettext&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%(num)d apple&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%(num)d apples&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;apples&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="o"&gt;)|&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nv"&gt;num&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;apples&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;newstyle gettext looks like this instead:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;gettext&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;gettext&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello %(name)s!&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;World&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;ngettext&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%(num)d apple&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%(num)d apples&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;apples&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The advantages of newstyle gettext is that you have less to type and that
named placeholders become mandatory.  The latter sounds like a
disadvantage but solves a lot of troubles translators are often facing
when they are unable to switch the positions of two placeholder.  With
newstyle gettext, all format strings look the same.&lt;/p&gt;
&lt;p&gt;Furthermore with newstyle gettext, string formatting is also used if no
placeholders are used which makes all strings behave exactly the same.
Last but not least are newstyle gettext calls able to properly mark
strings for autoescaping which solves lots of escaping related issues many
templates are experiencing over time when using autoescaping.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="expression-statement"&gt;
&lt;h2&gt;Expression Statement&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Import name:&lt;/strong&gt; &lt;cite&gt;jinja2.ext.do&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;The &amp;quot;do&amp;quot; aka expression-statement extension adds a simple &lt;cite&gt;do&lt;/cite&gt; tag to the
template engine that works like a variable expression but ignores the
return value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="loop-controls"&gt;
&lt;span id="loopcontrols-extension"&gt;&lt;/span&gt;&lt;h2&gt;Loop Controls&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Import name:&lt;/strong&gt; &lt;cite&gt;jinja2.ext.loopcontrols&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;This extension adds support for &lt;cite&gt;break&lt;/cite&gt; and &lt;cite&gt;continue&lt;/cite&gt; in loops.  After
enabling Jinja2 provides those two keywords which work exactly like in
Python.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="with-statement"&gt;
&lt;span id="with-extension"&gt;&lt;/span&gt;&lt;h2&gt;With Statement&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Import name:&lt;/strong&gt; &lt;cite&gt;jinja2.ext.with_&lt;/cite&gt;&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/extensions.rst&lt;/tt&gt;, line 187)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;versionadded&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. versionadded:: 2.3

&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This extension adds support for the with keyword.  Using this keyword it
is possible to enforce a nested scope in a template.  Variables can be
declared directly in the opening block of the with statement or using a
standard &lt;cite&gt;set&lt;/cite&gt; statement directly within.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;span id="autoescape-extension"&gt;&lt;/span&gt;&lt;h2&gt;Autoescape Extension&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Import name:&lt;/strong&gt; &lt;cite&gt;jinja2.ext.autoescape&lt;/cite&gt;&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/extensions.rst&lt;/tt&gt;, line 201)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;versionadded&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. versionadded:: 2.4

&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The autoescape extension allows you to toggle the autoescape feature from
within the template.  If the environment's &lt;a href="#id8"&gt;&lt;span class="problematic" id="id9"&gt;:attr:`~Environment.autoescape`&lt;/span&gt;&lt;/a&gt;
setting is set to &lt;cite&gt;False&lt;/cite&gt; it can be activated, if it's &lt;cite&gt;True&lt;/cite&gt; it can be
deactivated.  The setting overriding is scoped.&lt;/p&gt;
&lt;div class="system-message" id="id8"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/extensions.rst&lt;/tt&gt;, line 203); &lt;em&gt;&lt;a href="#id9"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;attr&amp;quot;.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;span id="writing-extensions"&gt;&lt;/span&gt;&lt;h2&gt;Writing Extensions&lt;/h2&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/extensions.rst&lt;/tt&gt;, line 214)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;module&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. module:: jinja2.ext

&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;By writing extensions you can add custom tags to Jinja2.  This is a non trival
task and usually not needed as the default tags and expressions cover all
common use cases.  The i18n extension is a good example of why extensions are
useful, another one would be fragment caching.&lt;/p&gt;
&lt;p&gt;When writing extensions you have to keep in mind that you are working with the
Jinja2 template compiler which does not validate the node tree you are possing
to it.  If the AST is malformed you will get all kinds of compiler or runtime
errors that are horrible to debug.  Always make sure you are using the nodes
you create correctly.  The API documentation below shows which nodes exist and
how to use them.&lt;/p&gt;
&lt;div class="section" id="example-extension"&gt;
&lt;h3&gt;Example Extension&lt;/h3&gt;
&lt;p&gt;The following example implements a &lt;cite&gt;cache&lt;/cite&gt; tag for Jinja2 by using the
&lt;a class="reference external" href="http://werkzeug.pocoo.org/"&gt;Werkzeug&lt;/a&gt; caching contrib module:&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/extensions.rst&lt;/tt&gt;, line 234)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;literalinclude&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. literalinclude:: cache_extension.py
    :language: python

&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;And here is how you use it in an environment:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from jinja2 import Environment
from werkzeug.contrib.cache import SimpleCache

env = Environment(extensions=[FragmentCacheExtension])
env.fragment_cache = SimpleCache()
&lt;/pre&gt;
&lt;p&gt;Inside the template it's then possible to mark blocks as cacheable.  The
following example caches a sidebar for 300 seconds:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;cache&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sidebar&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;300&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sidebar&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    ...
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endcache&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="extension-api"&gt;
&lt;h3&gt;Extension API&lt;/h3&gt;
&lt;p&gt;Extensions always have to extend the &lt;a href="#id11"&gt;&lt;span class="problematic" id="id12"&gt;:class:`jinja2.ext.Extension`&lt;/span&gt;&lt;/a&gt; class:&lt;/p&gt;
&lt;div class="system-message" id="id11"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/extensions.rst&lt;/tt&gt;, line 261); &lt;em&gt;&lt;a href="#id12"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;class&amp;quot;.&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/extensions.rst&lt;/tt&gt;, line 263)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autoclass&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autoclass:: Extension
    :members: preprocess, filter_stream, parse, attr, call_method

    .. attribute:: identifier

        The identifier of the extension.  This is always the true import name
        of the extension class and must not be changed.

    .. attribute:: tags

        If the extension implements custom tags this is a set of tag names
        the extension is listening for.

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="parser-api"&gt;
&lt;h3&gt;Parser API&lt;/h3&gt;
&lt;p&gt;The parser passed to &lt;a href="#id13"&gt;&lt;span class="problematic" id="id14"&gt;:meth:`Extension.parse`&lt;/span&gt;&lt;/a&gt; provides ways to parse
expressions of different types.  The following methods may be used by
extensions:&lt;/p&gt;
&lt;div class="system-message" id="id13"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/extensions.rst&lt;/tt&gt;, line 279); &lt;em&gt;&lt;a href="#id14"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;meth&amp;quot;.&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/extensions.rst&lt;/tt&gt;, line 283)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autoclass&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autoclass:: jinja2.parser.Parser
    :members: parse_expression, parse_tuple, parse_assign_target,
              parse_statements, free_identifier, fail

    .. attribute:: filename

        The filename of the template the parser processes.  This is **not**
        the load name of the template.  For the load name see :attr:`name`.
        For templates that were not loaded form the file system this is
        `None`.

    .. attribute:: name

        The load name of the template.

    .. attribute:: stream

        The current :class:`~jinja2.lexer.TokenStream`

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/extensions.rst&lt;/tt&gt;, line 302)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autoclass&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autoclass:: jinja2.lexer.TokenStream
   :members: push, look, eos, skip, next, next_if, skip_if, expect

   .. attribute:: current

        The current :class:`~jinja2.lexer.Token`.

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/extensions.rst&lt;/tt&gt;, line 309)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autoclass&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autoclass:: jinja2.lexer.Token
    :members: test, test_any

    .. attribute:: lineno

        The line number of the token

    .. attribute:: type

        The type of the token.  This string is interned so you may compare
        it with arbitrary strings using the `is` operator.

    .. attribute:: value

        The value of the token.

&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;There is also a utility function in the lexer module that can count newline
characters in strings:&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/extensions.rst&lt;/tt&gt;, line 328)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autofunction&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autofunction:: jinja2.lexer.count_newlines

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ast"&gt;
&lt;h3&gt;AST&lt;/h3&gt;
&lt;p&gt;The AST (Abstract Syntax Tree) is used to represent a template after parsing.
It's build of nodes that the compiler then converts into executable Python
code objects.  Extensions that provide custom statements can return nodes to
execute custom Python code.&lt;/p&gt;
&lt;p&gt;The list below describes all nodes that are currently available.  The AST may
change between Jinja2 versions but will stay backwards compatible.&lt;/p&gt;
&lt;p&gt;For more information have a look at the repr of &lt;a href="#id15"&gt;&lt;span class="problematic" id="id16"&gt;:meth:`jinja2.Environment.parse`&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="system-message" id="id15"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/extensions.rst&lt;/tt&gt;, line 341); &lt;em&gt;&lt;a href="#id16"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;meth&amp;quot;.&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/extensions.rst&lt;/tt&gt;, line 343)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;module&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. module:: jinja2.nodes

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/extensions.rst&lt;/tt&gt;, line 345)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;jinjanodes&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. jinjanodes::

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/extensions.rst&lt;/tt&gt;, line 347)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autoexception&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autoexception:: Impossible
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Frequently Asked Questions</title><link href="/frequently-asked-questions.html" rel="alternate"></link><updated>2012-09-30T04:52:53Z</updated><author><name>kamal</name></author><id>tag:,2012-09-30:frequently-asked-questions.html</id><summary type="html">&lt;p&gt;This page answers some of the often asked questions about Jinja.&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/faq.rst&lt;/tt&gt;, line 6)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;highlight&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. highlight:: html+jinja

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="why-is-it-called-jinja"&gt;
&lt;h2&gt;Why is it called Jinja?&lt;/h2&gt;
&lt;p&gt;The name Jinja was chosen because it's the name of a Japanese temple and
temple and template share a similar pronunciation.  It is not named after
the city in Uganda.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-fast-is-it"&gt;
&lt;h2&gt;How fast is it?&lt;/h2&gt;
&lt;p&gt;We really hate benchmarks especially since they don't reflect much.  The
performance of a template depends on many factors and you would have to
benchmark different engines in different situations.  The benchmarks from the
testsuite show that Jinja2 has a similar performance to &lt;a class="reference external" href="http://www.makotemplates.org/"&gt;Mako&lt;/a&gt; and is between
10 and 20 times faster than Django's template engine or Genshi.  These numbers
should be taken with tons of salt as the benchmarks that took these numbers
only test a few performance related situations such as looping.  Generally
speaking the performance of a template engine doesn't matter much as the
usual bottleneck in a web application is either the database or the application
code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-compatible-is-jinja2-with-django"&gt;
&lt;h2&gt;How Compatible is Jinja2 with Django?&lt;/h2&gt;
&lt;p&gt;The default syntax of Jinja2 matches Django syntax in many ways.  However
this similarity doesn't mean that you can use a Django template unmodified
in Jinja2.  For example filter arguments use a function call syntax rather
than a colon to separate filter name and arguments.  Additionally the
extension interface in Jinja is fundamentally different from the Django one
which means that your custom tags won't work any longer.&lt;/p&gt;
&lt;p&gt;Generally speaking you will use much less custom extensions as the Jinja
template system allows you to use a certain subset of Python expressions
which can replace most Django extensions.  For example instead of using
something like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% load comments %}
{% get_latest_comments 10 as latest_comments %}
{% for comment in latest_comments %}
    ...
{% endfor %}
&lt;/pre&gt;
&lt;p&gt;You will most likely provide an object with attributes to retrieve
comments from the database:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% for comment in models.comments.latest(10) %}
    ...
{% endfor %}
&lt;/pre&gt;
&lt;p&gt;Or directly provide the model for quick testing:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% for comment in Comment.objects.order_by('-pub_date')[:10] %}
    ...
{% endfor %}
&lt;/pre&gt;
&lt;p&gt;Please keep in mind that even though you may put such things into templates
it still isn't a good idea.  Queries should go into the view code and not
the template!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="isn-t-it-a-terrible-idea-to-put-logic-into-templates"&gt;
&lt;h2&gt;Isn't it a terrible idea to put Logic into Templates?&lt;/h2&gt;
&lt;p&gt;Without a doubt you should try to remove as much logic from templates as
possible.  But templates without any logic mean that you have to do all
the processing in the code which is boring and stupid.  A template engine
that does that is shipped with Python and called &lt;cite&gt;string.Template&lt;/cite&gt;.  Comes
without loops and if conditions and is by far the fastest template engine
you can get for Python.&lt;/p&gt;
&lt;p&gt;So some amount of logic is required in templates to keep everyone happy.
And Jinja leaves it pretty much to you how much logic you want to put into
templates.  There are some restrictions in what you can do and what not.&lt;/p&gt;
&lt;p&gt;Jinja2 neither allows you to put arbitrary Python code into templates nor
does it allow all Python expressions.  The operators are limited to the
most common ones and more advanced expressions such as list comprehensions
and generator expressions are not supported.  This keeps the template engine
easier to maintain and templates more readable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-is-autoescaping-not-the-default"&gt;
&lt;h2&gt;Why is Autoescaping not the Default?&lt;/h2&gt;
&lt;p&gt;There are multiple reasons why automatic escaping is not the default mode
and also not the recommended one.  While automatic escaping of variables
means that you will less likely have an XSS problem it also causes a huge
amount of extra processing in the template engine which can cause serious
performance problems.  As Python doesn't provide a way to mark strings as
unsafe Jinja has to hack around that limitation by providing a custom
string class (the &lt;a href="#id1"&gt;&lt;span class="problematic" id="id2"&gt;:class:`Markup`&lt;/span&gt;&lt;/a&gt; string) that safely interacts with safe
and unsafe strings.&lt;/p&gt;
&lt;div class="system-message" id="id1"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/faq.rst&lt;/tt&gt;, line 92); &lt;em&gt;&lt;a href="#id2"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;class&amp;quot;.&lt;/div&gt;
&lt;p&gt;With explicit escaping however the template engine doesn't have to perform
any safety checks on variables.  Also a human knows not to escape integers
or strings that may never contain characters one has to escape or already
HTML markup.  For example when iterating over a list over a table of
integers and floats for a table of statistics the template designer can
omit the escaping because he knows that integers or floats don't contain
any unsafe parameters.&lt;/p&gt;
&lt;p&gt;Additionally Jinja2 is a general purpose template engine and not only used
for HTML/XML generation.  For example you may generate LaTeX, emails,
CSS, JavaScript, or configuration files.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-is-the-context-immutable"&gt;
&lt;h2&gt;Why is the Context immutable?&lt;/h2&gt;
&lt;p&gt;When writing a &lt;a href="#id3"&gt;&lt;span class="problematic" id="id4"&gt;:func:`contextfunction`&lt;/span&gt;&lt;/a&gt; or something similar you may have
noticed that the context tries to stop you from modifying it.  If you have
managed to modify the context by using an internal context API you may
have noticed that changes in the context don't seem to be visible in the
template.  The reason for this is that Jinja uses the context only as
primary data source for template variables for performance reasons.&lt;/p&gt;
&lt;div class="system-message" id="id3"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/faq.rst&lt;/tt&gt;, line 116); &lt;em&gt;&lt;a href="#id4"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;func&amp;quot;.&lt;/div&gt;
&lt;p&gt;If you want to modify the context write a function that returns a variable
instead that one can assign to a variable by using set:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% set comments = get_latest_comments() %}
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="what-is-the-speedups-module-and-why-is-it-missing"&gt;
&lt;h2&gt;What is the speedups module and why is it missing?&lt;/h2&gt;
&lt;p&gt;To achieve a good performance with automatic escaping enabled, the escaping
function was also implemented in pure C in older Jinja2 releases and used if
Jinja2 was installed with the speedups module.&lt;/p&gt;
&lt;p&gt;Because this feature itself is very useful for non-template engines as
well it was moved into a separate project on PyPI called &lt;a class="reference external" href="http://pypi.python.org/pypi/MarkupSafe"&gt;MarkupSafe&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Jinja2 no longer ships with a C implementation of it but only the pure
Python implementation.  It will however check if MarkupSafe is available
and installed, and if it is, use the Markup class from MarkupSafe.&lt;/p&gt;
&lt;p&gt;So if you want the speedups, just import MarkupSafe.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="my-tracebacks-look-weird-what-s-happening"&gt;
&lt;h2&gt;My tracebacks look weird.  What's happening?&lt;/h2&gt;
&lt;p&gt;If the debugsupport module is not compiled and you are using a Python
installation without ctypes (Python 2.4 without ctypes, Jython or Google's
AppEngine) Jinja2 is unable to provide correct debugging information and
the traceback may be incomplete.  There is currently no good workaround
for Jython or the AppEngine as ctypes is unavailable there and it's not
possible to use the debugsupport extension.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-is-there-no-python-2-3-support"&gt;
&lt;h2&gt;Why is there no Python 2.3 support?&lt;/h2&gt;
&lt;p&gt;Python 2.3 is missing a lot of features that are used heavily in Jinja2.  This
decision was made as with the upcoming Python 2.6 and 3.0 versions it becomes
harder to maintain the code for older Python versions.  If you really need
Python 2.3 support you either have to use &lt;a class="reference external" href="http://jinja.pocoo.org/1/"&gt;Jinja 1&lt;/a&gt; or other templating
engines that still support 2.3.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="my-macros-are-overriden-by-something"&gt;
&lt;h2&gt;My Macros are overriden by something&lt;/h2&gt;
&lt;p&gt;In some situations the Jinja scoping appears arbitrary:&lt;/p&gt;
&lt;p&gt;layout.tmpl:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;macro&lt;/span&gt; &lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;LAYOUT&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endmacro&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;body&lt;/span&gt; &lt;span class="cp"&gt;%}{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;child.tmpl:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;layout.tmpl&amp;#39;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;macro&lt;/span&gt; &lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;CHILD&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endmacro&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;body&lt;/span&gt; &lt;span class="cp"&gt;%}{{&lt;/span&gt; &lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;}}{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will print &lt;tt class="docutils literal"&gt;LAYOUT&lt;/tt&gt; in Jinja2.  This is a side effect of having
the parent template evaluated after the child one.  This allows child
templates passing information to the parent template.  To avoid this
issue rename the macro or variable in the parent template to have an
uncommon prefix.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Integration</title><link href="/integration.html" rel="alternate"></link><updated>2012-09-30T04:52:53Z</updated><author><name>kamal</name></author><id>tag:,2012-09-30:integration.html</id><summary type="html">&lt;p&gt;Jinja2 provides some code for integration into other tools such as frameworks,
the &lt;a class="reference external" href="http://babel.edgewall.org/"&gt;Babel&lt;/a&gt; library or your favourite editor for fancy code highlighting.
This is a brief description of whats included.&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;span id="babel-integration"&gt;&lt;/span&gt;&lt;h2&gt;Babel Integration&lt;/h2&gt;
&lt;p&gt;Jinja provides support for extracting gettext messages from templates via a
&lt;a class="reference external" href="http://babel.edgewall.org/"&gt;Babel&lt;/a&gt; extractor entry point called &lt;cite&gt;jinja2.ext.babel_extract&lt;/cite&gt;.  The Babel
support is implemented as part of the &lt;a href="#id2"&gt;&lt;span class="problematic" id="id3"&gt;:ref:`i18n-extension`&lt;/span&gt;&lt;/a&gt; extension.&lt;/p&gt;
&lt;div class="system-message" id="id2"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/integration.rst&lt;/tt&gt;, line 13); &lt;em&gt;&lt;a href="#id3"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/div&gt;
&lt;p&gt;Gettext messages extracted from both &lt;cite&gt;trans&lt;/cite&gt; tags and code expressions.&lt;/p&gt;
&lt;p&gt;To extract gettext messages from templates, the project needs a Jinja2 section
in its Babel extraction method &lt;a class="reference external" href="http://babel.edgewall.org/wiki/Documentation/messages.html#extraction-method-mapping-and-configuration"&gt;mapping file&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[jinja2: **/templates/**.html]&lt;/span&gt;
&lt;span class="na"&gt;encoding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;utf-8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The syntax related options of the &lt;a href="#id4"&gt;&lt;span class="problematic" id="id5"&gt;:class:`Environment`&lt;/span&gt;&lt;/a&gt; are also available as
configuration values in the mapping file.  For example to tell the extraction
that templates use &lt;tt class="docutils literal"&gt;%&lt;/tt&gt; as &lt;cite&gt;line_statement_prefix&lt;/cite&gt; you can use this code:&lt;/p&gt;
&lt;div class="system-message" id="id4"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/integration.rst&lt;/tt&gt;, line 27); &lt;em&gt;&lt;a href="#id5"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;class&amp;quot;.&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[jinja2: **/templates/**.html]&lt;/span&gt;
&lt;span class="na"&gt;encoding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;utf-8&lt;/span&gt;
&lt;span class="na"&gt;line_statement_prefix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;%&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="#id6"&gt;&lt;span class="problematic" id="id7"&gt;:ref:`jinja-extensions`&lt;/span&gt;&lt;/a&gt; may also be defined by passing a comma separated list
of import paths as &lt;cite&gt;extensions&lt;/cite&gt; value.  The i18n extension is added
automatically.&lt;/p&gt;
&lt;div class="system-message" id="id6"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/integration.rst&lt;/tt&gt;, line 37); &lt;em&gt;&lt;a href="#id7"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="pylons"&gt;
&lt;h2&gt;Pylons&lt;/h2&gt;
&lt;p&gt;With &lt;a class="reference external" href="http://www.pylonshq.com/"&gt;Pylons&lt;/a&gt; 0.9.7 onwards it's incredible easy to integrate Jinja into a
Pylons powered application.&lt;/p&gt;
&lt;p&gt;The template engine is configured in &lt;cite&gt;config/environment.py&lt;/cite&gt;.  The configuration
for Jinja2 looks something like that:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from jinja2 import Environment, PackageLoader
config['pylons.app_globals'].jinja_env = Environment(
    loader=PackageLoader('yourapplication', 'templates')
)
&lt;/pre&gt;
&lt;p&gt;After that you can render Jinja templates by using the &lt;cite&gt;render_jinja&lt;/cite&gt; function
from the &lt;cite&gt;pylons.templating&lt;/cite&gt; module.&lt;/p&gt;
&lt;p&gt;Additionally it's a good idea to set the Pylons' &lt;cite&gt;c&lt;/cite&gt; object into strict mode.
Per default any attribute to not existing attributes on the &lt;cite&gt;c&lt;/cite&gt; object return
an empty string and not an undefined object.  To change this just use this
snippet and add it into your &lt;cite&gt;config/environment.py&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
config['pylons.strict_c'] = True
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="textmate"&gt;
&lt;h2&gt;TextMate&lt;/h2&gt;
&lt;p&gt;Inside the &lt;cite&gt;ext&lt;/cite&gt; folder of Jinja2 there is a bundle for TextMate that supports
syntax highlighting for Jinja1 and Jinja2 for text based templates as well as
HTML.  It also contains a few often used snippets.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="vim"&gt;
&lt;h2&gt;Vim&lt;/h2&gt;
&lt;p&gt;A syntax plugin for &lt;a class="reference external" href="http://www.vim.org/"&gt;Vim&lt;/a&gt; exists in the Vim-scripts directory as well as the
ext folder of Jinja2.  &lt;a class="reference external" href="http://www.vim.org/scripts/script.php?script_id=1856"&gt;The script&lt;/a&gt;
supports Jinja1 and Jinja2.  Once installed two file types are available &lt;cite&gt;jinja&lt;/cite&gt;
and &lt;cite&gt;htmljinja&lt;/cite&gt;.  The first one for text based templates, the latter for HTML
templates.&lt;/p&gt;
&lt;p&gt;Copy the files into your &lt;cite&gt;syntax&lt;/cite&gt; folder.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Introduction</title><link href="/introduction.html" rel="alternate"></link><updated>2012-09-30T04:52:53Z</updated><author><name>kamal</name></author><id>tag:,2012-09-30:introduction.html</id><summary type="html">&lt;p&gt;This is the documentation for the Jinja2 general purpose templating language.
Jinja2 is a library for Python 2.4 and onwards that is designed to be flexible,
fast and secure.&lt;/p&gt;
&lt;p&gt;If you have any exposure to other text-based template languages, such as Smarty or
Django, you should feel right at home with Jinja2.  It's both designer and
developer friendly by sticking to Python's principles and adding functionality
useful for templating environments.&lt;/p&gt;
&lt;div class="section" id="prerequisites"&gt;
&lt;h2&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;Jinja2 needs at least &lt;strong&gt;Python 2.4&lt;/strong&gt; to run.  Additionally a working C-compiler
that can create python extensions should be installed for the debugger if you
are using Python 2.4.&lt;/p&gt;
&lt;p&gt;If you don't have a working C-compiler and you are trying to install the source
release with the debugsupport you will get a compiler error.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;You have multiple ways to install Jinja2.  If you are unsure what to do, go
with the Python egg or tarball.&lt;/p&gt;
&lt;div class="section" id="as-a-python-egg-via-easy-install"&gt;
&lt;h3&gt;As a Python egg (via easy_install)&lt;/h3&gt;
&lt;p&gt;You can install the most recent Jinja2 version using &lt;a class="reference external" href="http://peak.telecommunity.com/DevCenter/EasyInstall"&gt;easy_install&lt;/a&gt; or &lt;a class="reference external" href="http://pypi.python.org/pypi/pip"&gt;pip&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
easy_install Jinja2
pip install Jinja2
&lt;/pre&gt;
&lt;p&gt;This will install a Jinja2 egg in your Python installation's site-packages
directory.&lt;/p&gt;
&lt;p&gt;(If you are installing from the windows command line omit the &lt;cite&gt;sudo&lt;/cite&gt; and make
sure to run the command as user with administrator rights)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="from-the-tarball-release"&gt;
&lt;h3&gt;From the tarball release&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Download the most recent tarball from the &lt;a class="reference external" href="http://pypi.python.org/pypi/Jinja2"&gt;download page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Unpack the tarball&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;sudo python setup.py install&lt;/tt&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that you either have to have setuptools or &lt;a class="reference external" href="http://pypi.python.org/pypi/distribute"&gt;distribute&lt;/a&gt; installed,
the latter is preferred.&lt;/p&gt;
&lt;p&gt;This will install Jinja2 into your Python installation's site-packages directory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-the-development-version"&gt;
&lt;h3&gt;Installing the development version&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Install &lt;a class="reference external" href="http://git-scm.org/"&gt;git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;git clone &lt;span class="pre"&gt;git://github.com/mitsuhiko/jinja2.git&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;cd jinja2&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;ln &lt;span class="pre"&gt;-s&lt;/span&gt; jinja2 &lt;span class="pre"&gt;/usr/lib/python2.X/site-packages&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As an alternative to steps 4 you can also do &lt;tt class="docutils literal"&gt;python setup.py develop&lt;/tt&gt;
which will install the package via distribute in development mode.  This also
has the advantage that the C extensions are compiled.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="more-speed-with-markupsafe"&gt;
&lt;h3&gt;More Speed with MarkupSafe&lt;/h3&gt;
&lt;p&gt;As of version 2.5.1 Jinja2 will check for an installed &lt;a class="reference external" href="http://pypi.python.org/pypi/MarkupSafe"&gt;MarkupSafe&lt;/a&gt;
module.  If it can find it, it will use the Markup class of that module
instead of the one that comes with Jinja2.  &lt;cite&gt;MarkupSafe&lt;/cite&gt; replaces the
older speedups module that came with Jinja2 and has the advantage that is
has a better setup script and will automatically attempt to install the C
version and nicely fall back to a pure Python implementation if that is
not possible.&lt;/p&gt;
&lt;p&gt;The C implementation of MarkupSafe is much faster and recommended when
using Jinja2 with autoescaping.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="enable-the-debug-support-module"&gt;
&lt;h3&gt;Enable the debug support Module&lt;/h3&gt;
&lt;p&gt;By default Jinja2 will not compile the debug support module.  Enabling this
will fail if you don't have the Python headers or a working compiler.  This
is often the case if you are installing Jinja2 from a windows machine.&lt;/p&gt;
&lt;p&gt;Because the debug support is only necessary for Python 2.4 you will not
have to do this unless you run 2.4:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo python setup.py --with-debugsupport install
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="basic-api-usage"&gt;
&lt;h2&gt;Basic API Usage&lt;/h2&gt;
&lt;p&gt;This section gives you a brief introduction to the Python API for Jinja2
templates.&lt;/p&gt;
&lt;p&gt;The most basic way to create a template and render it is through
&lt;a href="#id1"&gt;&lt;span class="problematic" id="id2"&gt;:class:`~jinja2.Template`&lt;/span&gt;&lt;/a&gt;.  This however is not the recommended way to
work with it if your templates are not loaded from strings but the file
system or another data source:&lt;/p&gt;
&lt;div class="system-message" id="id1"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/intro.rst&lt;/tt&gt;, line 115); &lt;em&gt;&lt;a href="#id2"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;class&amp;quot;.&lt;/div&gt;
&lt;pre class="doctest-block"&gt;
&amp;gt;&amp;gt;&amp;gt; from jinja2 import Template
&amp;gt;&amp;gt;&amp;gt; template = Template('Hello {{ name }}!')
&amp;gt;&amp;gt;&amp;gt; template.render(name='John Doe')
u'Hello John Doe!'
&lt;/pre&gt;
&lt;p&gt;By creating an instance of &lt;a href="#id3"&gt;&lt;span class="problematic" id="id4"&gt;:class:`~jinja2.Template`&lt;/span&gt;&lt;/a&gt; you get back a new template
object that provides a method called &lt;a href="#id5"&gt;&lt;span class="problematic" id="id6"&gt;:meth:`~jinja2.Template.render`&lt;/span&gt;&lt;/a&gt; which when
called with a dict or keyword arguments expands the template.  The dict
or keywords arguments passed to the template are the so-called &amp;quot;context&amp;quot;
of the template.&lt;/p&gt;
&lt;div class="system-message" id="id3"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/intro.rst&lt;/tt&gt;, line 125); &lt;em&gt;&lt;a href="#id4"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;class&amp;quot;.&lt;/div&gt;
&lt;div class="system-message" id="id5"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/intro.rst&lt;/tt&gt;, line 125); &lt;em&gt;&lt;a href="#id6"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;meth&amp;quot;.&lt;/div&gt;
&lt;p&gt;What you can see here is that Jinja2 is using unicode internally and the
return value is an unicode string.  So make sure that your application is
indeed using unicode internally.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="experimental-python-3-support"&gt;
&lt;h2&gt;Experimental Python 3 Support&lt;/h2&gt;
&lt;p&gt;Jinja 2.3 brings experimental support for Python 3.  It means that all
unittests pass on the new version, but there might still be small bugs in
there and behavior might be inconsistent.  If you notice any bugs, please
provide feedback in the &lt;a class="reference external" href="http://github.com/mitsuhiko/jinja2/issues"&gt;Jinja bug tracker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also please keep in mind that the documentation is written with Python 2
in mind, you will have to adapt the shown code examples to Python 3 syntax
for yourself.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Jinja2 Changelog</title><link href="/jinja2-changelog.html" rel="alternate"></link><updated>2012-09-30T04:52:53Z</updated><author><name>kamal</name></author><id>tag:,2012-09-30:jinja2-changelog.html</id><summary type="html">&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/changelog.rst&lt;/tt&gt;, line 1)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;module&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. module:: jinja2

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="version-2-6"&gt;
&lt;h2&gt;Version 2.6&lt;/h2&gt;
&lt;p&gt;(codename Convolution, released on July 24th 2011)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;internal attributes now raise an internal attribute error now instead
of returning an undefined.  This fixes problems when passing undefined
objects to Python semantics expecting APIs.&lt;/li&gt;
&lt;li&gt;traceback support now works properly for PyPy.  (Tested with 1.4)&lt;/li&gt;
&lt;li&gt;implemented operator intercepting for sandboxed environments.  This
allows application developers to disable builtin operators for better
security.  (For instance limit the mathematical operators to actual
integers instead of longs)&lt;/li&gt;
&lt;li&gt;groupby filter now supports dotted notation for grouping by attributes
of attributes.&lt;/li&gt;
&lt;li&gt;scoped blocks not properly treat toplevel assignments and imports.
Previously an import suddenly &amp;quot;disappeared&amp;quot; in a scoped block.&lt;/li&gt;
&lt;li&gt;automatically detect newer Python interpreter versions before loading code
from bytecode caches to prevent segfaults on invalid opcodes.  The segfault
in earlier Jinja2 versions here was not a Jinja2 bug but a limitation in
the underlying Python interpreter.  If you notice Jinja2 segfaulting in
earlier versions after an upgrade of the Python interpreter you don't have
to upgrade, it's enough to flush the bytecode cache.  This just no longer
makes this necessary, Jinja2 will automatically detect these cases now.&lt;/li&gt;
&lt;li&gt;the sum filter can now sum up values by attribute.  This is a backwards
incompatible change.  The argument to the filter previously was the
optional starting index which defaultes to zero.  This now became the
second argument to the function because it's rarely used.&lt;/li&gt;
&lt;li&gt;like sum, sort now also makes it possible to order items by attribute.&lt;/li&gt;
&lt;li&gt;like sum and sort, join now also is able to join attributes of objects
as string.&lt;/li&gt;
&lt;li&gt;the internal eval context now has a reference to the environment.&lt;/li&gt;
&lt;li&gt;added a mapping test to see if an object is a dict or an object with
a similar interface.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="version-2-5-5"&gt;
&lt;h2&gt;Version 2.5.5&lt;/h2&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;(re-release of 2.5.4 with built documentation removed for filesize.&lt;/dt&gt;
&lt;dd&gt;Released on October 18th 2010)&lt;/dd&gt;
&lt;/dl&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;built documentation is no longer part of release.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="version-2-5-4"&gt;
&lt;h2&gt;Version 2.5.4&lt;/h2&gt;
&lt;p&gt;(bugfix release, released on October 17th 2010)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Fixed extensions not loading properly with overlays.&lt;/li&gt;
&lt;li&gt;Work around a bug in cpython for the debugger that causes segfaults
on 64bit big-endian architectures.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="version-2-5-3"&gt;
&lt;h2&gt;Version 2.5.3&lt;/h2&gt;
&lt;p&gt;(bugfix release, released on October 17th 2010)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;fixed an operator precedence error introduced in 2.5.2.  Statements
like &amp;quot;-foo.bar&amp;quot; had their implicit parentheses applied around the
first part of the expression (&amp;quot;(-foo).bar&amp;quot;) instead of the more
correct &amp;quot;-(foo.bar)&amp;quot;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="version-2-5-2"&gt;
&lt;h2&gt;Version 2.5.2&lt;/h2&gt;
&lt;p&gt;(bugfix release, released on August 18th 2010)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;improved setup.py script to better work with assumptions people
might still have from it (&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--with-speedups&lt;/span&gt;&lt;/tt&gt;).&lt;/li&gt;
&lt;li&gt;fixed a packaging error that excluded the new debug support.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="version-2-5-1"&gt;
&lt;h2&gt;Version 2.5.1&lt;/h2&gt;
&lt;p&gt;(bugfix release, released on August 17th 2010)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;StopIteration exceptions raised by functions called from templates
are now intercepted and converted to undefineds.  This solves a
lot of debugging grief.  (StopIteration is used internally to
abort template execution)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;improved performance of macro calls slightly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;babel extraction can now properly extract newstyle gettext calls.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;using the variable &lt;cite&gt;num&lt;/cite&gt; in newstyle gettext for something else
than the pluralize count will no longer raise a &lt;a href="#id1"&gt;&lt;span class="problematic" id="id2"&gt;:exc:`KeyError`&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="system-message" id="id1"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;~/.pip/build/jinja2/CHANGES&lt;/tt&gt;, line 80); &lt;em&gt;&lt;a href="#id2"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unknown interpreted text role &amp;quot;exc&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;removed builtin markup class and switched to markupsafe.  For backwards
compatibility the pure Python implementation still exists but is
pulled from markupsafe by the Jinja2 developers.  The debug support
went into a separate feature called &amp;quot;debugsupport&amp;quot; and is disabled
by default because it is only relevant for Python 2.4&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;fixed an issue with unary operators having the wrong precendence.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="version-2-5"&gt;
&lt;h2&gt;Version 2.5&lt;/h2&gt;
&lt;p&gt;(codename Incoherence, relased on May 29th 2010)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;improved the sort filter (should have worked like this for a
long time) by adding support for case insensitive searches.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;fixed a bug for getattribute constant folding.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;support for newstyle gettext translations which result in a
nicer in-template user interface and more consistent
catalogs. (&lt;a href="#id3"&gt;&lt;span class="problematic" id="id4"&gt;:ref:`newstyle-gettext`&lt;/span&gt;&lt;/a&gt;)&lt;/p&gt;
&lt;div class="system-message" id="id3"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;~/.pip/build/jinja2/CHANGES&lt;/tt&gt;, line 96); &lt;em&gt;&lt;a href="#id4"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;it's now possible to register extensions after an environment
was created.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="version-2-4-1"&gt;
&lt;h2&gt;Version 2.4.1&lt;/h2&gt;
&lt;p&gt;(bugfix release, released on April 20th 2010)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;fixed an error reporting bug for undefineds.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="version-2-4"&gt;
&lt;h2&gt;Version 2.4&lt;/h2&gt;
&lt;p&gt;(codename Correlation, released on April 13th 2010)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;the environment template loading functions now transparently
pass through a template object if it was passed to it.  This
makes it possible to import or extend from a template object
that was passed to the template.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;added a &lt;a href="#id5"&gt;&lt;span class="problematic" id="id6"&gt;:class:`ModuleLoader`&lt;/span&gt;&lt;/a&gt; that can load templates from
precompiled sources.  The environment now features a method
to compile the templates from a configured loader into a zip
file or folder.&lt;/p&gt;
&lt;div class="system-message" id="id5"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;~/.pip/build/jinja2/CHANGES&lt;/tt&gt;, line 116); &lt;em&gt;&lt;a href="#id6"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unknown interpreted text role &amp;quot;class&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;the _speedups C extension now supports Python 3.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;added support for autoescaping toggling sections and support
for evaluation contexts (&lt;a href="#id7"&gt;&lt;span class="problematic" id="id8"&gt;:ref:`eval-context`&lt;/span&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;div class="system-message" id="id7"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;~/.pip/build/jinja2/CHANGES&lt;/tt&gt;, line 121); &lt;em&gt;&lt;a href="#id8"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;extensions have a priority now.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="version-2-3-1"&gt;
&lt;h2&gt;Version 2.3.1&lt;/h2&gt;
&lt;p&gt;(bugfix release, released on February 19th 2010)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;fixed an error reporting bug on all python versions&lt;/li&gt;
&lt;li&gt;fixed an error reporting bug on Python 2.4&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="version-2-3"&gt;
&lt;h2&gt;Version 2.3&lt;/h2&gt;
&lt;p&gt;(3000 Pythons, released on February 10th 2010)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;fixes issue with code generator that causes unbound variables
to be generated if set was used in if-blocks and other small
identifier problems.&lt;/li&gt;
&lt;li&gt;include tags are now able to select between multiple templates
and take the first that exists, if a list of templates is
given.&lt;/li&gt;
&lt;li&gt;fixed a problem with having call blocks in outer scopes that
have an argument that is also used as local variable in an
inner frame (#360).&lt;/li&gt;
&lt;li&gt;greatly improved error message reporting (#339)&lt;/li&gt;
&lt;li&gt;implicit tuple expressions can no longer be totally empty.
This change makes &lt;tt class="docutils literal"&gt;{% if &lt;span class="pre"&gt;%}...{%&lt;/span&gt; endif %}&lt;/tt&gt; a syntax error
now. (#364)&lt;/li&gt;
&lt;li&gt;added support for translator comments if extracted via babel.&lt;/li&gt;
&lt;li&gt;added with-statement extension.&lt;/li&gt;
&lt;li&gt;experimental Python 3 support.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="version-2-2-1"&gt;
&lt;h2&gt;Version 2.2.1&lt;/h2&gt;
&lt;p&gt;(bugfix release, released on September 14th 2009)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;fixes some smaller problems for Jinja2 on Jython.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="version-2-2"&gt;
&lt;h2&gt;Version 2.2&lt;/h2&gt;
&lt;p&gt;(codename Kong, released on September 13th 2009)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Include statements can now be marked with &lt;tt class="docutils literal"&gt;ignore missing&lt;/tt&gt; to skip
non existing templates.&lt;/li&gt;
&lt;li&gt;Priority of &lt;cite&gt;not&lt;/cite&gt; raised.  It's now possible to write &lt;cite&gt;not foo in bar&lt;/cite&gt;
as an alias to &lt;cite&gt;foo not in bar&lt;/cite&gt; like in python.  Previously the grammar
required parentheses (&lt;cite&gt;not (foo in bar)&lt;/cite&gt;) which was odd.&lt;/li&gt;
&lt;li&gt;Fixed a bug that caused syntax errors when defining macros or using the
&lt;cite&gt;{% call %}&lt;/cite&gt; tag inside loops.&lt;/li&gt;
&lt;li&gt;Fixed a bug in the parser that made &lt;tt class="docutils literal"&gt;{{ foo[1, 2] }}&lt;/tt&gt; impossible.&lt;/li&gt;
&lt;li&gt;Made it possible to refer to names from outer scopes in included templates
that were unused in the callers frame (#327)&lt;/li&gt;
&lt;li&gt;Fixed a bug that caused internal errors if names where used as iteration
variable and regular variable &lt;em&gt;after&lt;/em&gt; the loop if that variable was unused
&lt;em&gt;before&lt;/em&gt; the loop.  (#331)&lt;/li&gt;
&lt;li&gt;Added support for optional &lt;cite&gt;scoped&lt;/cite&gt; modifier to blocks.&lt;/li&gt;
&lt;li&gt;Added support for line-comments.&lt;/li&gt;
&lt;li&gt;Added the &lt;cite&gt;meta&lt;/cite&gt; module.&lt;/li&gt;
&lt;li&gt;Renamed (undocumented) attribute &amp;quot;overlay&amp;quot; to &amp;quot;overlayed&amp;quot; on the
environment because it was clashing with a method of the same name.&lt;/li&gt;
&lt;li&gt;speedup extension is now disabled by default.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="version-2-1-1"&gt;
&lt;h2&gt;Version 2.1.1&lt;/h2&gt;
&lt;p&gt;(Bugfix release)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Fixed a translation error caused by looping over empty recursive loops.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="version-2-1"&gt;
&lt;h2&gt;Version 2.1&lt;/h2&gt;
&lt;p&gt;(codename Yasuzō, released on November 23rd 2008)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;fixed a bug with nested loops and the special loop variable.  Before the
change an inner loop overwrote the loop variable from the outer one after
iteration.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;fixed a bug with the i18n extension that caused the explicit pluralization
block to look up the wrong variable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;fixed a limitation in the lexer that made &lt;tt class="docutils literal"&gt;{{ foo.0.0 }}&lt;/tt&gt; impossible.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;index based subscribing of variables with a constant value returns an
undefined object now instead of raising an index error.  This was a bug
caused by eager optimizing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;the i18n extension looks up &lt;cite&gt;foo.ugettext&lt;/cite&gt; now followed by &lt;cite&gt;foo.gettext&lt;/cite&gt;
if an translations object is installed.  This makes dealing with custom
translations classes easier.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;fixed a confusing behavior with conditional extending.  loops were partially
executed under some conditions even though they were not part of a visible
area.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;added &lt;cite&gt;sort&lt;/cite&gt; filter that works like &lt;cite&gt;dictsort&lt;/cite&gt; but for arbitrary sequences.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;fixed a bug with empty statements in macros.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;implemented a bytecode cache system.  (&lt;a href="#id9"&gt;&lt;span class="problematic" id="id10"&gt;:ref:`bytecode-cache`&lt;/span&gt;&lt;/a&gt;)&lt;/p&gt;
&lt;div class="system-message" id="id9"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;~/.pip/build/jinja2/CHANGES&lt;/tt&gt;, line 218); &lt;em&gt;&lt;a href="#id10"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;the template context is now weakref-able&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;inclusions and imports &amp;quot;with context&amp;quot; forward all variables now, not only
the initial context.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;added a cycle helper called &lt;cite&gt;cycler&lt;/cite&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;added a joining helper called &lt;cite&gt;joiner&lt;/cite&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;added a &lt;cite&gt;compile_expression&lt;/cite&gt; method to the environment that allows compiling
of Jinja expressions into callable Python objects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;fixed an escaping bug in urlize&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="version-2-0"&gt;
&lt;h2&gt;Version 2.0&lt;/h2&gt;
&lt;p&gt;(codename jinjavitus, released on July 17th 2008)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;the subscribing of objects (looking up attributes and items) changed from
slightly.  It's now possible to give attributes or items a higher priority
by either using dot-notation lookup or the bracket syntax.  This also
changed the AST slightly.  &lt;cite&gt;Subscript&lt;/cite&gt; is gone and was replaced with
&lt;a href="#id11"&gt;&lt;span class="problematic" id="id12"&gt;:class:`~jinja2.nodes.Getitem`&lt;/span&gt;&lt;/a&gt; and &lt;a href="#id13"&gt;&lt;span class="problematic" id="id14"&gt;:class:`~jinja2.nodes.Getattr`&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="system-message" id="id11"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;~/.pip/build/jinja2/CHANGES&lt;/tt&gt;, line 238); &lt;em&gt;&lt;a href="#id12"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unknown interpreted text role &amp;quot;class&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="system-message" id="id13"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;~/.pip/build/jinja2/CHANGES&lt;/tt&gt;, line 238); &lt;em&gt;&lt;a href="#id14"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unknown interpreted text role &amp;quot;class&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;For more information see &lt;a href="#id15"&gt;&lt;span class="problematic" id="id16"&gt;:ref:`the implementation details &amp;lt;notes-on-subscriptions&amp;gt;`&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="system-message" id="id15"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;~/.pip/build/jinja2/CHANGES&lt;/tt&gt;, line 244); &lt;em&gt;&lt;a href="#id16"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;added support for preprocessing and token stream filtering for extensions.
This would allow extensions to allow simplified gettext calls in template
data and something similar.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;added &lt;a href="#id17"&gt;&lt;span class="problematic" id="id18"&gt;:meth:`jinja2.environment.TemplateStream.dump`&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="system-message" id="id17"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;~/.pip/build/jinja2/CHANGES&lt;/tt&gt;, line 250); &lt;em&gt;&lt;a href="#id18"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unknown interpreted text role &amp;quot;meth&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;added missing support for implicit string literal concatenation.
&lt;tt class="docutils literal"&gt;{{ &amp;quot;foo&amp;quot; &amp;quot;bar&amp;quot; }}&lt;/tt&gt; is equivalent to &lt;tt class="docutils literal"&gt;{{ &amp;quot;foobar&amp;quot; }}&lt;/tt&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;cite&gt;else&lt;/cite&gt; is optional for conditional expressions.  If not given it evaluates
to &lt;cite&gt;false&lt;/cite&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;improved error reporting for undefined values by providing a position.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;cite&gt;filesizeformat&lt;/cite&gt; filter uses decimal prefixes now per default and can be
set to binary mode with the second parameter.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;fixed bug in finalizer&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="version-2-0rc1"&gt;
&lt;h2&gt;Version 2.0rc1&lt;/h2&gt;
&lt;p&gt;(no codename, released on June 9th 2008)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;first release of Jinja2&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Sandbox</title><link href="/sandbox.html" rel="alternate"></link><updated>2012-09-30T04:52:53Z</updated><author><name>kamal</name></author><id>tag:,2012-09-30:sandbox.html</id><summary type="html">&lt;p&gt;The Jinja2 sandbox can be used to evaluate untrusted code.  Access to unsafe
attributes and methods is prohibited.&lt;/p&gt;
&lt;p&gt;Assuming &lt;cite&gt;env&lt;/cite&gt; is a &lt;a href="#id1"&gt;&lt;span class="problematic" id="id2"&gt;:class:`SandboxedEnvironment`&lt;/span&gt;&lt;/a&gt; in the default configuration
the following piece of code shows how it works:&lt;/p&gt;
&lt;div class="system-message" id="id1"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/sandbox.rst&lt;/tt&gt;, line 7); &lt;em&gt;&lt;a href="#id2"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;class&amp;quot;.&lt;/div&gt;
&lt;pre class="doctest-block"&gt;
&amp;gt;&amp;gt;&amp;gt; env.from_string(&amp;quot;{{ func.func_code }}&amp;quot;).render(func=lambda:None)
u''
&amp;gt;&amp;gt;&amp;gt; env.from_string(&amp;quot;{{ func.func_code.do_something }}&amp;quot;).render(func=lambda:None)
Traceback (most recent call last):
  ...
SecurityError: access to attribute 'func_code' of 'function' object is unsafe.
&lt;/pre&gt;
&lt;div class="section" id="api"&gt;
&lt;h2&gt;API&lt;/h2&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/sandbox.rst&lt;/tt&gt;, line 20)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;module&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. module:: jinja2.sandbox

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/sandbox.rst&lt;/tt&gt;, line 22)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autoclass&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autoclass:: SandboxedEnvironment([options])
    :members: is_safe_attribute, is_safe_callable, default_binop_table,
              default_unop_table, intercepted_binops, intercepted_unops,
              call_binop, call_unop

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/sandbox.rst&lt;/tt&gt;, line 27)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autoclass&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autoclass:: ImmutableSandboxedEnvironment([options])

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/sandbox.rst&lt;/tt&gt;, line 29)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autoexception&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autoexception:: SecurityError

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/sandbox.rst&lt;/tt&gt;, line 31)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autofunction&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autofunction:: unsafe

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/sandbox.rst&lt;/tt&gt;, line 33)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autofunction&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autofunction:: is_internal_attribute

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/sandbox.rst&lt;/tt&gt;, line 35)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;autofunction&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. autofunction:: modifies_known_mutable

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="admonition-note admonition"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;The Jinja2 sandbox alone is no solution for perfect security.  Especially
for web applications you have to keep in mind that users may create
templates with arbitrary HTML in so it's crucial to ensure that (if you
are running multiple users on the same server) they can't harm each other
via JavaScript insertions and much more.&lt;/p&gt;
&lt;p&gt;Also the sandbox is only as good as the configuration.  We stronly
recommend only passing non-shared resources to the template and use
some sort of whitelisting for attributes.&lt;/p&gt;
&lt;p class="last"&gt;Also keep in mind that templates may raise runtime or compile time errors,
so make sure to catch them.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="operator-intercepting"&gt;
&lt;h2&gt;Operator Intercepting&lt;/h2&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/sandbox.rst&lt;/tt&gt;, line 55)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;versionadded&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. versionadded:: 2.6

&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;For maximum performace Jinja2 will let operators call directly the type
specific callback methods.  This means that it's not possible to have this
intercepted by overriding &lt;a href="#id3"&gt;&lt;span class="problematic" id="id4"&gt;:meth:`Environment.call`&lt;/span&gt;&lt;/a&gt;.  Furthermore a
conversion from operator to special method is not always directly possible
due to how operators work.  For instance for divisions more than one
special method exist.&lt;/p&gt;
&lt;div class="system-message" id="id3"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/sandbox.rst&lt;/tt&gt;, line 57); &lt;em&gt;&lt;a href="#id4"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;meth&amp;quot;.&lt;/div&gt;
&lt;p&gt;With Jinja 2.6 there is now support for explicit operator intercepting.
This can be used to customize specific operators as necessary.  In order
to intercept an operator one has to override the
&lt;a href="#id5"&gt;&lt;span class="problematic" id="id6"&gt;:attr:`SandboxedEnvironment.intercepted_binops`&lt;/span&gt;&lt;/a&gt; attribute.  Once the
operator that needs to be intercepted is added to that set Jinja2 will
generate bytecode that calls the &lt;a href="#id7"&gt;&lt;span class="problematic" id="id8"&gt;:meth:`SandboxedEnvironment.call_binop`&lt;/span&gt;&lt;/a&gt;
function.  For unary operators the &lt;cite&gt;unary&lt;/cite&gt; attributes and methods have to
be used instead.&lt;/p&gt;
&lt;div class="system-message" id="id5"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/sandbox.rst&lt;/tt&gt;, line 64); &lt;em&gt;&lt;a href="#id6"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;attr&amp;quot;.&lt;/div&gt;
&lt;div class="system-message" id="id7"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/sandbox.rst&lt;/tt&gt;, line 64); &lt;em&gt;&lt;a href="#id8"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;meth&amp;quot;.&lt;/div&gt;
&lt;p&gt;The default implementation of &lt;a href="#id9"&gt;&lt;span class="problematic" id="id10"&gt;:attr:`SandboxedEnvironment.call_binop`&lt;/span&gt;&lt;/a&gt;
will use the &lt;a href="#id11"&gt;&lt;span class="problematic" id="id12"&gt;:attr:`SandboxedEnvironment.binop_table`&lt;/span&gt;&lt;/a&gt; to translate
operator symbols into callbacks performing the default operator behavior.&lt;/p&gt;
&lt;div class="system-message" id="id9"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/sandbox.rst&lt;/tt&gt;, line 73); &lt;em&gt;&lt;a href="#id10"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;attr&amp;quot;.&lt;/div&gt;
&lt;div class="system-message" id="id11"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/sandbox.rst&lt;/tt&gt;, line 73); &lt;em&gt;&lt;a href="#id12"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;attr&amp;quot;.&lt;/div&gt;
&lt;p&gt;This example shows how the power (&lt;tt class="docutils literal"&gt;**&lt;/tt&gt;) operator can be disabled in
Jinja2:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from jinja2.sandbox import SandboxedEnvironment


class MyEnvironment(SandboxedEnvironment):
    intercepted_binops = frozenset(['**'])

    def call_binop(self, context, operator, left, right):
        if operator == '**':
            return self.undefined('the power operator is unavailable')
        return SandboxedEnvironment.call_binop(self, context,
                                               operator, left, right)
&lt;/pre&gt;
&lt;p&gt;Make sure to always call into the super method, even if you are not
intercepting the call.  Jinja2 might internally call the method to
evaluate expressions.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Switching from other Template Engines</title><link href="/switching-from-other-template-engines.html" rel="alternate"></link><updated>2012-09-30T04:52:53Z</updated><author><name>kamal</name></author><id>tag:,2012-09-30:switching-from-other-template-engines.html</id><summary type="html">&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/switching.rst&lt;/tt&gt;, line 4)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;highlight&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. highlight:: html+jinja

&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;If you have used a different template engine in the past and want to swtich
to Jinja2 here is a small guide that shows the basic syntatic and semantic
changes between some common, similar text template engines for Python.&lt;/p&gt;
&lt;div class="section" id="jinja1"&gt;
&lt;h2&gt;Jinja1&lt;/h2&gt;
&lt;p&gt;Jinja2 is mostly compatible with Jinja1 in terms of API usage and template
syntax.  The differences between Jinja1 and 2 are explained in the following
list.&lt;/p&gt;
&lt;div class="section" id="api"&gt;
&lt;h3&gt;API&lt;/h3&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Loaders&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Jinja2 uses a different loader API.  Because the internal representation
of templates changed there is no longer support for external caching
systems such as memcached.  The memory consumed by templates is comparable
with regular Python modules now and external caching doesn't give any
advantage.  If you have used a custom loader in the past have a look at
the new &lt;a href="#id1"&gt;&lt;span class="problematic" id="id2"&gt;:ref:`loader API &amp;lt;loaders&amp;gt;`&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="last system-message" id="id1"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/switching.rst&lt;/tt&gt;, line 21); &lt;em&gt;&lt;a href="#id2"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/div&gt;
&lt;/dd&gt;
&lt;dt&gt;Loading templates from strings&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;In the past it was possible to generate templates from a string with the
default environment configuration by using &lt;cite&gt;jinja.from_string&lt;/cite&gt;.  Jinja2
provides a &lt;a href="#id3"&gt;&lt;span class="problematic" id="id4"&gt;:class:`Template`&lt;/span&gt;&lt;/a&gt; class that can be used to do the same, but
with optional additional configuration.&lt;/p&gt;
&lt;div class="last system-message" id="id3"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/switching.rst&lt;/tt&gt;, line 29); &lt;em&gt;&lt;a href="#id4"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;class&amp;quot;.&lt;/div&gt;
&lt;/dd&gt;
&lt;dt&gt;Automatic unicode conversion&lt;/dt&gt;
&lt;dd&gt;Jinja1 performed automatic conversion of bytestrings in a given encoding
into unicode objects.  This conversion is no longer implemented as it
was inconsistent as most libraries are using the regular Python ASCII
bytestring to Unicode conversion.  An application powered by Jinja2
&lt;em&gt;has to&lt;/em&gt; use unicode internally everywhere or make sure that Jinja2 only
gets unicode strings passed.&lt;/dd&gt;
&lt;dt&gt;i18n&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Jinja1 used custom translators for internationalization.  i18n is now
available as Jinja2 extension and uses a simpler, more gettext friendly
interface and has support for babel.  For more details see
&lt;a href="#id5"&gt;&lt;span class="problematic" id="id6"&gt;:ref:`i18n-extension`&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="last system-message" id="id5"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/switching.rst&lt;/tt&gt;, line 43); &lt;em&gt;&lt;a href="#id6"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/div&gt;
&lt;/dd&gt;
&lt;dt&gt;Internal methods&lt;/dt&gt;
&lt;dd&gt;Jinja1 exposed a few internal methods on the environment object such
as &lt;cite&gt;call_function&lt;/cite&gt;, &lt;cite&gt;get_attribute&lt;/cite&gt; and others.  While they were marked
as being an internal method it was possible to override them.  Jinja2
doesn't have equivalent methods.&lt;/dd&gt;
&lt;dt&gt;Sandbox&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Jinja1 was running sandbox mode by default.  Few applications actually
used that feature so it became optional in Jinja2.  For more details
about the sandboxed execution see &lt;a href="#id7"&gt;&lt;span class="problematic" id="id8"&gt;:class:`SandboxedEnvironment`&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="last system-message" id="id7"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/switching.rst&lt;/tt&gt;, line 55); &lt;em&gt;&lt;a href="#id8"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;class&amp;quot;.&lt;/div&gt;
&lt;/dd&gt;
&lt;dt&gt;Context&lt;/dt&gt;
&lt;dd&gt;Jinja1 had a stacked context as storage for variables passed to the
environment.  In Jinja2 a similar object exists but it doesn't allow
modifications nor is it a singleton.  As inheritance is dynamic now
multiple context objects may exist during template evaluation.&lt;/dd&gt;
&lt;dt&gt;Filters and Tests&lt;/dt&gt;
&lt;dd&gt;Filters and tests are regular functions now.  It's no longer necessary
and allowed to use factory functions.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="templates"&gt;
&lt;h3&gt;Templates&lt;/h3&gt;
&lt;p&gt;Jinja2 has mostly the same syntax as Jinja1.  What's different is that
macros require parentheses around the argument list now.&lt;/p&gt;
&lt;p&gt;Additionally Jinja2 allows dynamic inheritance now and dynamic includes.
The old helper function &lt;cite&gt;rendertemplate&lt;/cite&gt; is gone now, &lt;cite&gt;include&lt;/cite&gt; can be used
instead.  Includes no longer import macros and variable assignments, for
that the new &lt;cite&gt;import&lt;/cite&gt; tag is used.  This concept is explained in the
&lt;a href="#id9"&gt;&lt;span class="problematic" id="id10"&gt;:ref:`import`&lt;/span&gt;&lt;/a&gt; documentation.&lt;/p&gt;
&lt;div class="system-message" id="id9"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/switching.rst&lt;/tt&gt;, line 76); &lt;em&gt;&lt;a href="#id10"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/div&gt;
&lt;p&gt;Another small change happened in the &lt;cite&gt;for&lt;/cite&gt;-tag.  The special loop variable
doesn't have a &lt;cite&gt;parent&lt;/cite&gt; attribute, instead you have to alias the loop
yourself.  See &lt;a href="#id11"&gt;&lt;span class="problematic" id="id12"&gt;:ref:`accessing-the-parent-loop`&lt;/span&gt;&lt;/a&gt; for more details.&lt;/p&gt;
&lt;div class="system-message" id="id11"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/switching.rst&lt;/tt&gt;, line 82); &lt;em&gt;&lt;a href="#id12"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="django"&gt;
&lt;h2&gt;Django&lt;/h2&gt;
&lt;p&gt;If you have previously worked with Django templates, you should find
Jinja2 very familiar.  In fact, most of the syntax elements look and
work the same.&lt;/p&gt;
&lt;p&gt;However, Jinja2 provides some more syntax elements covered in the
documentation and some work a bit different.&lt;/p&gt;
&lt;p&gt;This section covers the template changes.  As the API is fundamentally
different we won't cover it here.&lt;/p&gt;
&lt;div class="section" id="method-calls"&gt;
&lt;h3&gt;Method Calls&lt;/h3&gt;
&lt;p&gt;In Django method calls work implicitly.  With Jinja2 you have to specify that
you want to call an object.  Thus this Django code:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% for page in user.get_created_pages %}
    ...
{% endfor %}
&lt;/pre&gt;
&lt;p&gt;will look like this in Jinja:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% for page in user.get_created_pages() %}
    ...
{% endfor %}
&lt;/pre&gt;
&lt;p&gt;This allows you to pass variables to the function which is also used for macros
which is not possible in Django.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conditions"&gt;
&lt;h3&gt;Conditions&lt;/h3&gt;
&lt;p&gt;In Django you can use the following constructs to check for equality:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% ifequal foo &amp;quot;bar&amp;quot; %}
    ...
{% else %}
    ...
{% endifequal %}
&lt;/pre&gt;
&lt;p&gt;In Jinja2 you can use the normal if statement in combination with operators:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% if foo == 'bar' %}
    ...
{% else %}
    ...
{% endif %}
&lt;/pre&gt;
&lt;p&gt;You can also have multiple elif branches in your template:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% if something %}
    ...
{% elif otherthing %}
    ...
{% elif foothing %}
    ...
{% else %}
    ...
{% endif %}
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="filter-arguments"&gt;
&lt;h3&gt;Filter Arguments&lt;/h3&gt;
&lt;p&gt;Jinja2 provides more than one argument for filters.  Also the syntax for
argument passing is different.  A template that looks like this in Django:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{{ items|join:&amp;quot;, &amp;quot; }}
&lt;/pre&gt;
&lt;p&gt;looks like this in Jinja2:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{{ items|join(', ') }}
&lt;/pre&gt;
&lt;p&gt;In fact it's a bit more verbose but it allows different types of arguments -
including variables - and more than one of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tests"&gt;
&lt;h3&gt;Tests&lt;/h3&gt;
&lt;p&gt;In addition to filters there also are tests you can perform using the is
operator.  Here are some examples:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% if user.user_id is odd %}
    {{ user.username|e }} is odd
{% else %}
    hmm. {{ user.username|e }} looks pretty normal
{% endif %}
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="loops"&gt;
&lt;h3&gt;Loops&lt;/h3&gt;
&lt;p&gt;For loops work very similar to Django, the only incompatibility is that in
Jinja2 the special variable for the loop context is called &lt;cite&gt;loop&lt;/cite&gt; and not
&lt;cite&gt;forloop&lt;/cite&gt; like in Django.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cycle"&gt;
&lt;h3&gt;Cycle&lt;/h3&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;{% cycle %}&lt;/tt&gt; tag does not exist in Jinja because of it's implicit
nature.  However you can achieve mostly the same by using the &lt;cite&gt;cycle&lt;/cite&gt;
method on a loop object.&lt;/p&gt;
&lt;p&gt;The following Django template:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% for user in users %}
    &amp;lt;li class=&amp;quot;{% cycle 'odd' 'even' %}&amp;quot;&amp;gt;{{ user }}&amp;lt;/li&amp;gt;
{% endfor %}
&lt;/pre&gt;
&lt;p&gt;Would look like this in Jinja:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% for user in users %}
    &amp;lt;li class=&amp;quot;{{ loop.cycle('odd', 'even') }}&amp;quot;&amp;gt;{{ user }}&amp;lt;/li&amp;gt;
{% endfor %}
&lt;/pre&gt;
&lt;p&gt;There is no equivalent of &lt;tt class="docutils literal"&gt;{% cycle ... as variable %}&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="mako"&gt;
&lt;h2&gt;Mako&lt;/h2&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/switching.rst&lt;/tt&gt;, line 209)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;highlight&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. highlight:: html+mako

&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;If you have used Mako so far and want to switch to Jinja2 you can configure
Jinja2 to look more like Mako:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Environment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;lt;%&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;%&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;${&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;%&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once the environment is configure like that Jinja2 should be able to interpret
a small subset of Mako templates.  Jinja2 does not support embedded Python code
so you would have to move that out of the template.  The syntax for defs (in
Jinja2 defs are called macros) and template inheritance is different too.  The
following Mako template:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;%inherit file=&amp;quot;layout.html&amp;quot; /&amp;gt;
&amp;lt;%def name=&amp;quot;title()&amp;quot;&amp;gt;Page Title&amp;lt;/%def&amp;gt;
&amp;lt;ul&amp;gt;
% for item in list:
    &amp;lt;li&amp;gt;${item}&amp;lt;/li&amp;gt;
% endfor
&amp;lt;/ul&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Looks like this in Jinja2 with the above configuration:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;% extends &amp;quot;layout.html&amp;quot; %&amp;gt;
&amp;lt;% block title %&amp;gt;Page Title&amp;lt;% endblock %&amp;gt;
&amp;lt;% block body %&amp;gt;
&amp;lt;ul&amp;gt;
% for item in list:
    &amp;lt;li&amp;gt;${item}&amp;lt;/li&amp;gt;
% endfor
&amp;lt;/ul&amp;gt;
&amp;lt;% endblock %&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
</summary></entry><entry><title>Welcome to Jinja2</title><link href="/welcome-to-jinja2.html" rel="alternate"></link><updated>2012-09-30T04:52:53Z</updated><author><name>kamal</name></author><id>tag:,2012-09-30:welcome-to-jinja2.html</id><summary type="html">&lt;p&gt;Jinja2 is a modern and designer friendly templating language for Python,
modelled after Django's templates.  It is fast, widely used and secure
with the optional sandboxed template execution environment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="cp"&gt;%}{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;user&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;users&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;user.url&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;user.username&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;sandboxed execution&lt;/li&gt;
&lt;li&gt;powerful automatic HTML escaping system for XSS prevention&lt;/li&gt;
&lt;li&gt;template inheritance&lt;/li&gt;
&lt;li&gt;compiles down to the optimal python code just in time&lt;/li&gt;
&lt;li&gt;optional ahead of time template compilation&lt;/li&gt;
&lt;li&gt;easy to debug.  Line numbers of exceptions directly point to
the correct line in the template.&lt;/li&gt;
&lt;li&gt;configurable syntax&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="jinja2-documentation"&gt;
&lt;h2&gt;Jinja2 Documentation&lt;/h2&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;~/.pip/build/jinja2/docs/contents.rst.inc&lt;/tt&gt;, line 4)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;toctree&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. toctree::
   :maxdepth: 2

   intro
   api
   sandbox
   templates
   extensions
   integration
   switching
   tricks

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="additional-information"&gt;
&lt;h2&gt;Additional Information&lt;/h2&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;~/.pip/build/jinja2/docs/contents.rst.inc&lt;/tt&gt;, line 19)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;toctree&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. toctree::
   :maxdepth: 2

   faq
   changelog

&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;If you can't find the information you're looking for, have a look at the
index of try to find it using the search function:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a href="#id1"&gt;&lt;span class="problematic" id="id2"&gt;:ref:`genindex`&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="system-message" id="id1"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;~/.pip/build/jinja2/docs/contents.rst.inc&lt;/tt&gt;, line 28); &lt;em&gt;&lt;a href="#id2"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a href="#id3"&gt;&lt;span class="problematic" id="id4"&gt;:ref:`search`&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="system-message" id="id3"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;~/.pip/build/jinja2/docs/contents.rst.inc&lt;/tt&gt;, line 29); &lt;em&gt;&lt;a href="#id4"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you can't find the information you're looking for, have a look at the
index of try to find it using the search function:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a href="#id5"&gt;&lt;span class="problematic" id="id6"&gt;:ref:`genindex`&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="system-message" id="id5"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/index.rst&lt;/tt&gt;, line 33); &lt;em&gt;&lt;a href="#id6"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a href="#id7"&gt;&lt;span class="problematic" id="id8"&gt;:ref:`search`&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="system-message" id="id7"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;./~/.pip/build/jinja2/docs/index.rst&lt;/tt&gt;, line 34); &lt;em&gt;&lt;a href="#id8"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unknown interpreted text role &amp;quot;ref&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>This is a markdown test page</title><link href="/this-is-a-markdown-test-page.html" rel="alternate"></link><updated>2012-09-30T04:52:35Z</updated><author><name>kamal</name></author><id>tag:,2012-09-30:this-is-a-markdown-test-page.html</id><summary type="html">&lt;h1&gt;Test Markdown File Header&lt;/h1&gt;
&lt;h2&gt;Used for pelican test&lt;/h2&gt;
&lt;p&gt;The quick brown fox jumped over the lazy dog's back.&lt;/p&gt;</summary></entry><entry><title>This is a test page</title><link href="/this-is-a-test-page.html" rel="alternate"></link><updated>2012-09-30T04:52:35Z</updated><author><name>kamal</name></author><id>tag:,2012-09-30:this-is-a-test-page.html</id><summary type="html">&lt;p&gt;The quick brown fox jumped over the lazy dog's back.&lt;/p&gt;
</summary></entry><entry><title>This is a test page with a preset template</title><link href="/this-is-a-test-page-with-a-preset-template.html" rel="alternate"></link><updated>2012-09-30T04:52:35Z</updated><author><name>kamal</name></author><id>tag:,2012-09-30:this-is-a-test-page-with-a-preset-template.html</id><summary type="html">&lt;p&gt;The quick brown fox jumped over the lazy dog's back.&lt;/p&gt;
&lt;p&gt;This article has a custom template to be called when rendered&lt;/p&gt;
</summary></entry><entry><title>Article title</title><link href="/article-title.html" rel="alternate"></link><updated>2012-09-30T04:52:35Z</updated><author><name>kamal</name></author><id>tag:,2012-09-30:article-title.html</id><summary type="html">&lt;p&gt;This is some content. With some stuff to &amp;quot;typogrify&amp;quot;.&lt;/p&gt;
&lt;p&gt;Now with added support for &lt;abbr title="three letter acronym"&gt;TLA&lt;/abbr&gt;.&lt;/p&gt;
</summary></entry><entry><title>Article with template</title><link href="/article-with-template.html" rel="alternate"></link><updated>2012-09-30T04:52:35Z</updated><author><name>kamal</name></author><id>tag:,2012-09-30:article-with-template.html</id><summary type="html">&lt;p&gt;This article has a custom template to be called when rendered&lt;/p&gt;
&lt;p&gt;This is some content. With some stuff to &amp;quot;typogrify&amp;quot;.&lt;/p&gt;
</summary></entry><entry><title>Pelican</title><link href="/pelican.html" rel="alternate"></link><updated>2012-09-30T04:52:35Z</updated><author><name>kamal</name></author><id>tag:,2012-09-30:pelican.html</id><summary type="html">&lt;a class="reference external image-reference" href="http://travis-ci.org/#!/getpelican/pelican"&gt;&lt;img alt="Travis-ci: continuous integration status." src="https://secure.travis-ci.org/getpelican/pelican.png?branch=master" /&gt;&lt;/a&gt;
&lt;p&gt;Pelican is a static site generator, written in &lt;a class="reference external" href="http://www.python.org/"&gt;Python&lt;/a&gt;.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Write your weblog entries directly with your editor of choice (vim!)
in &lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;reStructuredText&lt;/a&gt; or &lt;a class="reference external" href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Includes a simple CLI tool to (re)generate the weblog&lt;/li&gt;
&lt;li&gt;Easy to interface with DVCSes and web hooks&lt;/li&gt;
&lt;li&gt;Completely static output is easy to host anywhere&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="features"&gt;
&lt;h2&gt;Features&lt;/h2&gt;
&lt;p&gt;Pelican currently supports:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Blog articles and pages&lt;/li&gt;
&lt;li&gt;Comments, via an external service (Disqus). (Please note that while
useful, Disqus is an external service, and thus the comment data will be
somewhat outside of your control and potentially subject to data loss.)&lt;/li&gt;
&lt;li&gt;Theming support (themes are created using &lt;a class="reference external" href="http://jinja.pocoo.org/"&gt;Jinja2&lt;/a&gt; templates)&lt;/li&gt;
&lt;li&gt;PDF generation of the articles/pages (optional)&lt;/li&gt;
&lt;li&gt;Publication of articles in multiple languages&lt;/li&gt;
&lt;li&gt;Atom/RSS feeds&lt;/li&gt;
&lt;li&gt;Code syntax highlighting&lt;/li&gt;
&lt;li&gt;Compilation of &lt;a class="reference external" href="http://lesscss.org/"&gt;LESS CSS&lt;/a&gt; (optional)&lt;/li&gt;
&lt;li&gt;Import from WordPress, Dotclear, or RSS feeds&lt;/li&gt;
&lt;li&gt;Integration with external tools: Twitter, Google Analytics, etc. (optional)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Have a look at the &lt;a class="reference external" href="http://docs.getpelican.com/latest/"&gt;Pelican documentation&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-the-name-pelican"&gt;
&lt;h2&gt;Why the name &amp;quot;Pelican&amp;quot;?&lt;/h2&gt;
&lt;p&gt;&amp;quot;Pelican&amp;quot; is an anagram for &lt;em&gt;calepin&lt;/em&gt;, which means &amp;quot;notebook&amp;quot; in French. ;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="source-code"&gt;
&lt;h2&gt;Source code&lt;/h2&gt;
&lt;p&gt;You can access the source code at: &lt;a class="reference external" href="https://github.com/getpelican/pelican"&gt;https://github.com/getpelican/pelican&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you feel hackish, have a look at the explanation of &lt;a class="reference external" href="http://docs.getpelican.com/en/latest/internals.html"&gt;Pelican's internals&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="feedback-contact-us"&gt;
&lt;h2&gt;Feedback / Contact us&lt;/h2&gt;
&lt;p&gt;If you want to see new features in Pelican, don't hesitate to offer
suggestions, clone the repository, etc. There are many ways to &lt;a class="reference external" href="http://docs.getpelican.com/en/latest/contribute.html"&gt;contribute&lt;/a&gt;.
That's open source, dude!&lt;/p&gt;
&lt;p&gt;Send a message to &amp;quot;alexis at notmyidea dot org&amp;quot; with any requests/feedback! You
can also join the team at &lt;a class="reference external" href="irc://irc.freenode.net/pelican"&gt;#pelican on Freenode&lt;/a&gt; (or if you don't have an IRC
client handy, use the &lt;a class="reference external" href="http://webchat.freenode.net/?channels=pelican&amp;amp;uio=d4"&gt;webchat&lt;/a&gt; for quick feedback.&lt;/p&gt;
&lt;!-- Links --&gt;
&lt;/div&gt;
</summary></entry><entry><title>Test md File</title><link href="/test-md-file.html" rel="alternate"></link><updated>2012-09-30T04:52:35Z</updated><author><name>kamal</name></author><id>tag:,2012-09-30:test-md-file.html</id><summary type="html">&lt;h1&gt;Test Markdown File Header&lt;/h1&gt;
&lt;h2&gt;Used for pelican test&lt;/h2&gt;
&lt;p&gt;The quick brown fox jumped over the lazy dog's back.&lt;/p&gt;</summary></entry><entry><title>This is a super article !</title><link href="/this-is-a-super-article.html" rel="alternate"></link><updated>2012-09-30T04:52:35Z</updated><author><name>kamal</name></author><id>tag:,2012-09-30:this-is-a-super-article.html</id><summary type="html"></summary></entry><entry><title>This is an article with category !</title><link href="/this-is-an-article-with-category.html" rel="alternate"></link><updated>2012-09-30T04:52:35Z</updated><author><name>kamal</name></author><id>tag:,2012-09-30:this-is-an-article-with-category.html</id><summary type="html">&lt;p&gt;This article should be in 'yeah' category.&lt;/p&gt;
</summary></entry><entry><title>This is an article without category !</title><link href="/this-is-an-article-without-category.html" rel="alternate"></link><updated>2012-09-30T04:52:35Z</updated><author><name>kamal</name></author><id>tag:,2012-09-30:this-is-an-article-without-category.html</id><summary type="html">&lt;p&gt;This article should be in the DEFAULT_CATEGORY.&lt;/p&gt;
</summary></entry><entry><title>This is an article without category !</title><link href="/this-is-an-article-without-category.html" rel="alternate"></link><updated>2012-09-30T04:52:35Z</updated><author><name>kamal</name></author><id>tag:,2012-09-30:this-is-an-article-without-category.html</id><summary type="html">&lt;p&gt;This article should be in 'TestCategory' category.&lt;/p&gt;
</summary></entry><entry><title>Android: Phonegap with existing sqlite database</title><link href="/android-phonegap-with-existing-sqlite-database.html" rel="alternate"></link><updated>2012-09-30T00:00:00Z</updated><author><name>kamal</name></author><id>tag:,2012-09-30:android-phonegap-with-existing-sqlite-database.html</id><summary type="html">&lt;p&gt;Just started my journey into android development and one thing I quickly found 
along the way is that shipping existing sqlite database with your phonegap app 
is non-trivial. Not sure this is problem with android directly or just 
phonegap. While you can put the sqlite database in your &lt;code&gt;assets/&lt;/code&gt; directory, 
phonegap apparently try to read the database from other fix location on the 
phone. Failing to read that, it will create new empty database.&lt;/p&gt;
&lt;p&gt;There's workaround scattered in blogpost and mailing-list posts and I finally 
managed to get it working after hours of hunting and try and error session. If 
you search around you probably end up on some of these sites:-&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;*&lt;/span&gt; 
&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raymondcamden&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cfm&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;2012&lt;span class="o"&gt;/&lt;/span&gt;7&lt;span class="o"&gt;/&lt;/span&gt;27&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Guest&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Blog&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Shipping&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;populated&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;SQLite&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;PhoneGap&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;corporatezen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;shipping_prepopulated_database_with_phonegap&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; 
&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;gauravstomar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blogspot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ca&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;2011&lt;span class="o"&gt;/&lt;/span&gt;08&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;prepopulate&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sqlite&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;phonegap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The fix involved few steps:-&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;You&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;move&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;sqlite&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;phonegap&lt;/span&gt; 
&lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Have&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;write&lt;/span&gt; &lt;span class="n"&gt;some&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;luckily&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; 
&lt;span class="n"&gt;those&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt; &lt;span class="n"&gt;still&lt;/span&gt; &lt;span class="n"&gt;working&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;latest&lt;/span&gt; &lt;span class="n"&gt;phonegap&lt;/span&gt; &lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;built&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sqlite&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;such&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;does&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;support&lt;/span&gt; 
&lt;span class="n"&gt;reading&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;existing&lt;/span&gt; &lt;span class="n"&gt;sqlite&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt; &lt;span class="n"&gt;so&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; 3&lt;span class="n"&gt;rd&lt;/span&gt; &lt;span class="n"&gt;party&lt;/span&gt; &lt;span class="n"&gt;sqlite&lt;/span&gt; 
&lt;span class="n"&gt;plugin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;script src="https://gist.github.com/3805152.js?file=gistfile1.java"&gt;&lt;/script&gt;</summary></entry><entry><title>Django admin: Hook into actions</title><link href="/django-admin-hook-into-actions.html" rel="alternate"></link><updated>2012-06-18T00:00:00Z</updated><author><name>kamal</name></author><id>tag:,2012-06-18:django-admin-hook-into-actions.html</id><summary type="html">&lt;p&gt;I want to do something before actions was executed. For example when admin 
deleting users using 'Delete selected' dropdown in admin panel, I want to run 
some commands in backend system to remove info about that user in a config 
file. If the commands somehow failed, I want to abort the operation so the user 
can't be deleted. Signals won't work here since there's no way to abort the 
request gracefully (other than raising exception and causing the 500 error page 
displayed). Using transaction also wouldn't work since there might be more 
users deleted in single actions and I only want the user that failed get 
aborted, not the whole users selected.&lt;/p&gt;
&lt;p&gt;Django allow us to define custom actions in admin, it quite simple but I don't 
want to reimplement what &lt;code&gt;delete_selected&lt;/code&gt; already doing. The idea is just hook 
before the action function get called and do my stuff. The first part is 
overriding the actions:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyModelAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelAdmin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;actions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;delete_selected&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;delete_selected&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This seem to work. When you define action name similar to what already defined 
in &lt;code&gt;django.contrib.admin&lt;/code&gt;, yours will be used. (TODO: Check if order in 
&lt;code&gt;INSTALLED_APPS&lt;/code&gt; matters). The next thing to do is to wrap your logic before 
calling actual &lt;code&gt;delete_selected&lt;/code&gt; function. I have implemented my 
&lt;code&gt;delete_selected&lt;/code&gt; as:-&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.admin.actions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;delete_selected&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyModelAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelAdmin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;actions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;delete_selected&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;delete_selected&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;post&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;delete_selected&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;post&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;backend&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;some_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Fail to update user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;delete_selected&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;delete_selected&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;short_description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Delete selected&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;My code just iterate through the selected users and run backend command on 
them, if the command success it will go through the next user. If the loop 
terminate normally, the else clause will be executed, calling the real 
&lt;code&gt;delete_selected&lt;/code&gt; function. If somehow the backend function failed, the loop 
&lt;code&gt;break&lt;/code&gt; and the else clause will never been executed. Here I'd also finally 
found some use case for &lt;a href="http://psung.blogspot.com/2007/12/for-else-in-python.html"&gt;python's &lt;code&gt;for ... else&lt;/code&gt;&lt;/a&gt; construct.&lt;/p&gt;
&lt;p&gt;Initially I named my &lt;code&gt;delete_selected&lt;/code&gt; as &lt;code&gt;custom_delete_selected&lt;/code&gt; and then 
remove the real &lt;code&gt;delete_selected&lt;/code&gt; by overriding ModelAdmin's &lt;code&gt;get_actions()&lt;/code&gt; 
method but there's a problem with that. When user submit to delete the selected 
users, a confirmation page is displayed. Only when admin submit the 
confirmation page the function start deleting the user. To facilitate the 
confirmation, it use form validition to make sure the action name 
('delete_selected') exists in the POST data. If we use our 
&lt;code&gt;custom_delete_selected&lt;/code&gt; as the action then 'delete_selected' not present in 
the POST data and the validation fail, the function will not be executed.&lt;/p&gt;</summary><category term="django"></category><category term="python"></category></entry><entry><title>New blog</title><link href="/new-blog.html" rel="alternate"></link><updated>2012-06-17T00:00:00Z</updated><author><name>kamal</name></author><id>tag:,2012-06-17:new-blog.html</id><summary type="html">&lt;p&gt;Just testing new blog using Pelican.&lt;/p&gt;</summary></entry><entry><title>SVN branching strategies</title><link href="/svn-branching-strategies.html" rel="alternate"></link><updated>2011-08-27T00:00:00Z</updated><author><name>kamal</name></author><id>tag:,2011-08-27:svn-branching-strategies.html</id><summary type="html">&lt;p&gt;The linked SO question mentioned two branching strategies commonly used in parallel developments.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Trunk&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;stable&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;development&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;features&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;separate&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Trunk&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;development&lt;/span&gt; &lt;span class="n"&gt;mainline&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;every&lt;/span&gt; &lt;span class="n"&gt;releases&lt;/span&gt; &lt;span class="n"&gt;tagged&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;branched&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
  &lt;span class="n"&gt;separate&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Currently we're using more of the former approach where development mostly done in trunk and when we're releasing new features, we tagged it and push it to live. For new features that would take time or quite experimental, we create a new branch and once it ready, merge back to trunk. This would keep trunk stable most of the time and allow us to do any quick bug fixes in the trunk as it arise. With svn ability to remember merge (1.5 above), the work flow is quite straightforward.&lt;/p&gt;
&lt;p&gt;I would start with creating new branch for the new feature to work on. While working on the branch, I would merge latest changes to the trunk into my current branch. Once it ready, merging it back to trunk would be accomplish by &lt;code&gt;svn merge --reintegrate&lt;/code&gt; in the trunk. One limitation of &lt;code&gt;--reintegrate&lt;/code&gt; switch is it make the branch unusable anymore. You simply would delete the branch.&lt;/p&gt;
&lt;p&gt;Now there's certain situation that I need to create 2 separate branch for different set of new features. For example I need to work on a set of features in branch A and for another set of features I prefer to work in new branch B. This is because feature in branch B maybe would not finish or ready in time with branch A. But still, I need to base branch B with branch A because it contain some related changes. And of course while developing in branch B, I want to merge changes in branch A to make sure I have all the latest changes to the code base.&lt;/p&gt;
&lt;p&gt;With modern DVCS such as git or mercurial the workflow is feasible because they can intelligently merge all the changes between the various branch but svn is not that smart.  While I can merge changes in branch A to branch B, the problem arise when try merge B back into trunk while A also has been merged into trunk prior to that (because branch A was released first). SVN would see a conflict since some changes in B already being merged when we merge A back into trunk.&lt;/p&gt;
&lt;p&gt;This is the very reason why I want to look into alternative way of structuring our development process. We definitely won't move to dvcs such as git or mercurial. But it look like making trunk as development mainline would be more problematic as mentioned in the SO's answer. It also doesn't seem to solve the problem that we have.&lt;/p&gt;</summary></entry><entry><title>Load Django custom filters/tags on all templates</title><link href="/load-django-custom-filterstags-on-all-templates.html" rel="alternate"></link><updated>2011-02-09T00:00:00Z</updated><author><name>kamal</name></author><id>tag:,2011-02-09:load-django-custom-filterstags-on-all-templates.html</id><summary type="html">&lt;p&gt;To load your custom template tags or filters in your template, you use the following:-&lt;/p&gt;
&lt;pre&gt;
{! load custom_filters !}
&lt;/pre&gt;

&lt;p&gt;Notes: ! is not valid django template tag, replace it with %. Refer &lt;a href="https://github.com/mojombo/jekyll/issues/145"&gt;this&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In your template files. But this mean doing this in each template files that need to use the filters. You can't even put this in a base template and make it available to any templates that extend the base template. Kind of violating the DRY.&lt;/p&gt;
&lt;p&gt;Looking around (google), I found &lt;a href="http://d-w.me/blog/2010/2/18/11/"&gt;1&lt;/a&gt; which use &lt;code&gt;add_to_builtins&lt;/code&gt; function from &lt;code&gt;django.template&lt;/code&gt;. Digged into Django source code, I found out how it being used to load the default tags and filters:-&lt;/p&gt;
&lt;pre&gt;
def add_to_builtins(module):
    builtins.append(import_library(module))

add_to_builtins('django.template.defaulttags')
add_to_builtins('django.template.defaultfilters')
&lt;/pre&gt;

&lt;p&gt;That around line 1048 inside &lt;code&gt;django/template/__init__.py&lt;/code&gt;. So this is how I used it in &lt;a href="https://github.com/k4ml/kecupuapp_base"&gt;kecupuapp_base&lt;/a&gt;:-&lt;/p&gt;
&lt;p&gt;https://github.com/k4ml/kecupuapp_base/commit/b9c62736ebabffa7e972ca00d6a6a1bace47931b&lt;/p&gt;
&lt;p&gt;Along the way, also found out this links:-&lt;/p&gt;
&lt;p&gt;http://www.b-list.org/weblog/2007/dec/04/magic-tags/
http://stackoverflow.com/questions/1118183/how-to-debug-in-django-the-good-way/2324210#2324210&lt;/p&gt;</summary></entry><entry><title>This is a super article !</title><link href="/this-is-a-super-article.html" rel="alternate"></link><updated>2010-12-02T10:14:00Z</updated><author><name>Alexis Métaireau</name></author><id>tag:,2010-12-02:this-is-a-super-article.html</id><summary type="html"></summary><category term="foo"></category><category term="bar"></category><category term="foobar"></category></entry><entry><title>System python is not for you</title><link href="/system-python-is-not-for-you.html" rel="alternate"></link><updated>2010-10-04T00:00:00Z</updated><author><name>kamal</name></author><id>tag:,2010-10-04:system-python-is-not-for-you.html</id><summary type="html">&lt;p&gt;If you already did some python development or just getting started, one of the advice you would always get is to never mess with the system python - the python version that come with your distro. For example on Ubuntu or Debian based system, python that was installed by &lt;code&gt;sudo apt-get install python&lt;/code&gt;. At first I didn't really understand what this mean, why you can't use something that already comes for free ?&lt;/p&gt;
&lt;p&gt;The answer to that question is because that version of python actually meant for the distro itself. Most distro would in some place used python, maybe for some configurations script. In Ubuntu, lot of their own applications are written with python. If we upgrade some of the libraries not through the standard package manager, there's a chance it would break these apps. So that's what the python they provided is for. It's for their own use, not us. Once I realized this, I have a feeling that distro should ship the python that they need separately from the python that would be used by the users.&lt;/p&gt;
&lt;p&gt;For development purpose, I always run &lt;code&gt;virtualenv $HOME&lt;/code&gt; to setup virtualenv environment in my home directory. Under Ubuntu, &lt;code&gt;$HOME/bin&lt;/code&gt; is under &lt;code&gt;$PATH&lt;/code&gt; so &lt;code&gt;which python&lt;/code&gt; would always point to &lt;code&gt;/home/kamal/bin/python&lt;/code&gt; rather than &lt;code&gt;/usr/bin/python&lt;/code&gt;. This allow me to freely use easy_install and it would install it to my &lt;code&gt;$HOME/lib/python2.5&lt;/code&gt; instead of system wide lib directory. For something specific like developing a django project, I prefer to use &lt;a href="http://www.buildout.org/"&gt;Buildout&lt;/a&gt; to further isolate the environment. More on &lt;a href="http://www.buildout.org/"&gt;Buildout&lt;/a&gt; later.&lt;/p&gt;</summary></entry><entry><title>Hello World</title><link href="/hello-world.html" rel="alternate"></link><updated>2010-09-18T00:00:00Z</updated><author><name>kamal</name></author><id>tag:,2010-09-18:hello-world.html</id><summary type="html">&lt;p&gt;Hello world, my attempt to use &lt;a href="http://pages.github.com/"&gt;github pages&lt;/a&gt; as blog platform.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;somevar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt; &amp;quot;&lt;span class="n"&gt;something&lt;/span&gt;&amp;quot;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt; &amp;quot;&lt;span class="n"&gt;another&lt;/span&gt; &lt;span class="n"&gt;thing&lt;/span&gt;&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So &lt;code&gt;easy_install python&lt;/code&gt; will install into &lt;code&gt;/home/kamal/lib/python2.5/&lt;/code&gt;:-&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;$ &lt;span class="n"&gt;which&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;kamal&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;
$ &lt;span class="n"&gt;easy_install&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry></feed>